<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: RingBuffer.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.2.8</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a00146_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">RingBuffer.h</div></div>
</div><!--header-->
<div class="contents">
<a href="a00146.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#if !defined(__ACA_RingBuffer_HEADER_INCLUDED__)</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#define __ACA_RingBuffer_HEADER_INCLUDED__</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="comment"></span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">/*! \brief implement a circular buffer of type T</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">*/</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno"><a class="line" href="a00490.xhtml">   13</a></span><span class="keyword">class </span><a class="code hl_class" href="a00490.xhtml">CRingBuffer</a></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>{</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="a00490.xhtml#a0e007e130e9190892274dde988e40a59">   16</a></span>    <span class="keyword">explicit</span> <a class="code hl_function" href="a00490.xhtml#a0e007e130e9190892274dde988e40a59">CRingBuffer</a>(<span class="keywordtype">int</span> iBufferLengthInSamples) :</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>        <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>(iBufferLengthInSamples)</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>    {</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>        assert(iBufferLengthInSamples &gt; 0);</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>        <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a> = <span class="keyword">new</span> T[<a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>];</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>        <a class="code hl_function" href="a00490.xhtml#a716fb4acc03355a73cc7d96f3ceb2995">reset</a>();</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    }</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno"><a class="line" href="a00490.xhtml#a97c8bb4689fcef14d595e897ea72cba9">   25</a></span>    <span class="keyword">virtual</span> <a class="code hl_function" href="a00490.xhtml#a97c8bb4689fcef14d595e897ea72cba9">~CRingBuffer</a>()</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    {</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>        <span class="keyword">delete</span>[] <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>        <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a> = 0;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    }</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="comment"></span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="comment">    /*! add a new value of type T to write index and increment write index</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="comment">    \param tNewValue the new value</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">    */</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="a00490.xhtml#a2bd848181a662312600bc590b9040d2a">   34</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a2bd848181a662312600bc590b9040d2a">putPostInc</a>(T tNewValue)</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    {</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>        <a class="code hl_function" href="a00490.xhtml#a702eb6314380082795f735df74a816c9">put</a>(tNewValue);</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>        <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>);</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    }</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="comment"></span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="comment">    /*! add new values of type T to write index and increment write index</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="comment">    \param ptNewBuff: new values</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="comment">    \param iLength: number of values</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="comment">    */</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno"><a class="line" href="a00490.xhtml#a21568ce259aa8e97ea3f3d7aec4828b7">   44</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a21568ce259aa8e97ea3f3d7aec4828b7">putPostInc</a>(<span class="keyword">const</span> T* ptNewBuff, <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>        <a class="code hl_function" href="a00490.xhtml#a702eb6314380082795f735df74a816c9">put</a>(ptNewBuff, iLength);</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>        <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>, iLength);</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    }</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="comment"></span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="comment">    /*! add a new value of type T to write index</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="comment">    \param tNewValue the new value</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="comment">    */</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="a00490.xhtml#a702eb6314380082795f735df74a816c9">   53</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a702eb6314380082795f735df74a816c9">put</a>(T tNewValue)</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    {</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>        <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>[<a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>] = tNewValue;</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    }</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="comment"></span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="comment">    /*! add new values of type T to write index</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span><span class="comment">    \param ptNewBuff: new values</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span><span class="comment">    \param iLength: number of values</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="comment">    */</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="a00490.xhtml#a15f6463cfcafd855157d33d253011dc7">   62</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a15f6463cfcafd855157d33d253011dc7">put</a>(<span class="keyword">const</span> T* ptNewBuff, <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    {</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>        assert(iLength &lt;= m_iBuffLength &amp;&amp; iLength &gt;= 0);</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>        <span class="comment">// copy two parts: to the end of buffer and after wrap around</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>        <span class="keywordtype">int</span> iNumValues2End = std::min(iLength, <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a> - <a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>);</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>        std::memcpy (&amp;<a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>[<a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>], ptNewBuff, <span class="keyword">sizeof</span>(T)*iNumValues2End);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>        <span class="keywordflow">if</span> ((iLength - iNumValues2End) &gt; 0)</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>            std::memcpy (<a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>, &amp;ptNewBuff[iNumValues2End], <span class="keyword">sizeof</span>(T)*(<span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(iLength) - iNumValues2End));</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    }</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span><span class="comment"></span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="comment">    /*! return the value at the current read index and increment the read pointer</span></div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span><span class="comment">    \return float the value from the read index</span></div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="comment">    */</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="a00490.xhtml#a0f25eadaafa6a2e7bfe2f9ef6af1104b">   77</a></span>    T <a class="code hl_function" href="a00490.xhtml#a0f25eadaafa6a2e7bfe2f9ef6af1104b">getPostInc</a>()</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    {</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>        T tValue = <a class="code hl_function" href="a00490.xhtml#a23d9877584d712c17811a9833835605e">get</a>();</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>        <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>);</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>        <span class="keywordflow">return</span> tValue;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    }</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="comment"></span> </div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span><span class="comment">    /*! return the values starting at the current read index and increment the read pointer</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span><span class="comment">    \param ptBuff: pointer to where the values will be written</span></div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span><span class="comment">    \param iLength: number of values</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span><span class="comment">    */</span></div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="a00490.xhtml#aeb86fd660cbaadd93a9d89dc529d5b76">   88</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#aeb86fd660cbaadd93a9d89dc529d5b76">getPostInc</a>(T* ptBuff, <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    {</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>        <a class="code hl_function" href="a00490.xhtml#a23d9877584d712c17811a9833835605e">get</a>(ptBuff, iLength);</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>        <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>, iLength);</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    }</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span><span class="comment"></span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span><span class="comment">    /*! return the value at the current read index</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span><span class="comment">    \param fOffset: read at offset from read index</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span><span class="comment">    \return float the value from the read index</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span><span class="comment">    */</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="a00490.xhtml#a23d9877584d712c17811a9833835605e">   98</a></span>    T <a class="code hl_function" href="a00490.xhtml#a23d9877584d712c17811a9833835605e">get</a>(<span class="keywordtype">float</span> fOffset = 0)<span class="keyword"> const</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>        <span class="keywordflow">if</span> (fOffset == 0)</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>            <span class="keywordflow">return</span> <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>[<a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>];</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>        {</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>            <span class="comment">// compute fraction for linear interpolation </span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>            <span class="keywordtype">int</span>     iOffset = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(std::floor(fOffset));</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>            <span class="keywordtype">float</span>   fFrac = fOffset - iOffset;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>            <span class="keywordtype">int</span>     iRead = <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a> + iOffset;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>            <span class="keywordflow">while</span> (iRead &gt; <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a> - 1)</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>                iRead -= <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>            <span class="keywordflow">while</span> (iRead &lt; 0)</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>                iRead += <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>            <span class="keywordflow">return</span> (1 - fFrac) * <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>[iRead] +</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>                fFrac * <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>[(iRead + 1) % <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>];</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>        }</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    }</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="comment"></span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="comment">    /*! return the values starting at the current read index</span></div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span><span class="comment">    \param ptBuff to where the values will be written</span></div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span><span class="comment">    \param iLength: number of values</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span><span class="comment">    */</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno"><a class="line" href="a00490.xhtml#a047d589f30b02374de2aabdbc6892912">  123</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a047d589f30b02374de2aabdbc6892912">get</a>(T* ptBuff, <span class="keywordtype">int</span> iLength)<span class="keyword"> const</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>        assert(iLength &lt;= m_iBuffLength &amp;&amp; iLength &gt;= 0);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        <span class="comment">// copy two parts: to the end of buffer and after wrap around</span></div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>        <span class="keywordtype">int</span> iNumValues2End = std::min(iLength, <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a> - <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>        std::memcpy (ptBuff, &amp;<a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>[<a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>], <span class="keyword">sizeof</span>(T)*iNumValues2End);</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>        <span class="keywordflow">if</span> ((iLength - iNumValues2End)&gt;0)</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>            std::memcpy (&amp;ptBuff[iNumValues2End], <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>, <span class="keyword">sizeof</span>(T)*(<span class="keyword">static_cast&lt;</span><span class="keywordtype">long</span> <span class="keywordtype">long</span><span class="keyword">&gt;</span>(iLength) - iNumValues2End));</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    }</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="comment"></span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span><span class="comment">    /*! set buffer content and indices to 0</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="comment">    */</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno"><a class="line" href="a00490.xhtml#a716fb4acc03355a73cc7d96f3ceb2995">  137</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a716fb4acc03355a73cc7d96f3ceb2995">reset</a>()</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    {</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>        std::memset (<a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a>, 0, <span class="keyword">sizeof</span>(T)*<a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>);</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>        <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>  = 0;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>        <a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a> = 0;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    }</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="comment"></span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span><span class="comment">    /*! return the current index for writing/put</span></div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span><span class="comment">    \return int</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="comment">    */</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno"><a class="line" href="a00490.xhtml#a8173fd5abe5c4ff4e78ffad4b14ea88b">  147</a></span>    <span class="keywordtype">int</span> <a class="code hl_function" href="a00490.xhtml#a8173fd5abe5c4ff4e78ffad4b14ea88b">getWriteIdx</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>        <span class="keywordflow">return</span> <a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>    }</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span><span class="comment"></span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="comment">    /*! move the write index to a new position</span></div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span><span class="comment">    \param iNewWriteIdx: new position</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span><span class="comment">    */</span></div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno"><a class="line" href="a00490.xhtml#a408e0ec5855fca27bd2dc5862fa913ab">  155</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a408e0ec5855fca27bd2dc5862fa913ab">setWriteIdx</a>(<span class="keywordtype">int</span> iNewWriteIdx)</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    {</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>        <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>, iNewWriteIdx - <a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a>);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    }</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span><span class="comment"></span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span><span class="comment">    /*! return the current index for reading/get</span></div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span><span class="comment">    \return int</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span><span class="comment">    */</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno"><a class="line" href="a00490.xhtml#ab18fac37cac4e8bde0419fe04845ac9d">  163</a></span>    <span class="keywordtype">int</span> <a class="code hl_function" href="a00490.xhtml#ab18fac37cac4e8bde0419fe04845ac9d">getReadIdx</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>        <span class="keywordflow">return</span> <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>;</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>    }</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="comment"></span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="comment">    /*! move the read index to a new position</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="comment">    \param iNewReadIdx: new position</span></div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span><span class="comment">    */</span></div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno"><a class="line" href="a00490.xhtml#af265a6322c4b1584c880def00d31e663">  171</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#af265a6322c4b1584c880def00d31e663">setReadIdx</a>(<span class="keywordtype">int</span> iNewReadIdx)</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    {</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>        <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>, iNewReadIdx - <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a>);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    }</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span><span class="comment"></span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span><span class="comment">    /*! returns the number of values currently buffered (note: 0 could also mean the buffer is full!)</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span><span class="comment">    \return int</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span><span class="comment">    */</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno"><a class="line" href="a00490.xhtml#aa04a6cb30d486a6ddd5f7929db1eef9d">  179</a></span>    <span class="keywordtype">int</span> <a class="code hl_function" href="a00490.xhtml#aa04a6cb30d486a6ddd5f7929db1eef9d">getNumValuesInBuffer</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>        <span class="keywordflow">return</span> (<a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a> - <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a> + <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>) % <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    }</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span><span class="comment"></span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span><span class="comment">    /*! returns the length of the internal buffer</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="comment">    \return int</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="comment">    */</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno"><a class="line" href="a00490.xhtml#a0ec2bd62a49e5078d3ca0a03fa123c9e">  187</a></span>    <span class="keywordtype">int</span> <a class="code hl_function" href="a00490.xhtml#a0ec2bd62a49e5078d3ca0a03fa123c9e">getLength</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">    </span>{</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>        <span class="keywordflow">return</span> <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    }</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno"><a class="line" href="a00490.xhtml#a16631e41f7e79a0da11a5246dfcade5c">  192</a></span>    <a class="code hl_function" href="a00490.xhtml#a16631e41f7e79a0da11a5246dfcade5c">CRingBuffer</a>();</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno"><a class="line" href="a00490.xhtml#add36d66b9e45b08cb8bb11b1fbc83e1b">  193</a></span>    <a class="code hl_function" href="a00490.xhtml#add36d66b9e45b08cb8bb11b1fbc83e1b">CRingBuffer</a>(<span class="keyword">const</span> <a class="code hl_class" href="a00490.xhtml">CRingBuffer</a>&amp; that);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno"><a class="line" href="a00490.xhtml#a76a236cd8dcd7e464abd9416dd445f2c">  194</a></span>    <a class="code hl_class" href="a00490.xhtml">CRingBuffer</a>&amp; <a class="code hl_function" href="a00490.xhtml#a76a236cd8dcd7e464abd9416dd445f2c">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="a00490.xhtml">CRingBuffer</a>&amp; c);</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno"><a class="line" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">  196</a></span>    <span class="keywordtype">void</span> <a class="code hl_function" href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">incIdx</a>(<span class="keywordtype">int</span>&amp; iIdx, <span class="keywordtype">int</span> iOffset = 1)</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    {</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>        <span class="keywordflow">while</span> ((iIdx + iOffset) &lt; 0)</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>        {</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>            <span class="comment">// avoid negative buffer indices</span></div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>            iOffset += <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>        }</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>        iIdx = (iIdx + iOffset) % <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a>;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>    };</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno"><a class="line" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">  206</a></span>    <span class="keywordtype">int</span> <a class="code hl_variable" href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">m_iBuffLength</a> = 0,      <span class="comment">//!&lt; length of the internal buffer</span></div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno"><a class="line" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">  207</a></span>        <a class="code hl_variable" href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">m_iReadIdx</a> = 0,         <span class="comment">//!&lt; current read index</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno"><a class="line" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">  208</a></span>        <a class="code hl_variable" href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">m_iWriteIdx</a> = 0;        <span class="comment">//!&lt; current write index</span></div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">  210</a></span>    T* <a class="code hl_variable" href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">m_ptBuff</a> = 0;            <span class="comment">//!&lt; data buffer</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>};</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="preprocessor">#endif </span><span class="comment">// __ACA_RingBuffer_HEADER_INCLUDED__</span></div>
<div class="ttc" id="aa00490_xhtml"><div class="ttname"><a href="a00490.xhtml">CRingBuffer</a></div><div class="ttdoc">implement a circular buffer of type T</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00013">RingBuffer.h:14</a></div></div>
<div class="ttc" id="aa00490_xhtml_a047d589f30b02374de2aabdbc6892912"><div class="ttname"><a href="a00490.xhtml#a047d589f30b02374de2aabdbc6892912">CRingBuffer::get</a></div><div class="ttdeci">void get(T *ptBuff, int iLength) const</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00123">RingBuffer.h:123</a></div></div>
<div class="ttc" id="aa00490_xhtml_a0e007e130e9190892274dde988e40a59"><div class="ttname"><a href="a00490.xhtml#a0e007e130e9190892274dde988e40a59">CRingBuffer::CRingBuffer</a></div><div class="ttdeci">CRingBuffer(int iBufferLengthInSamples)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00016">RingBuffer.h:16</a></div></div>
<div class="ttc" id="aa00490_xhtml_a0ec2bd62a49e5078d3ca0a03fa123c9e"><div class="ttname"><a href="a00490.xhtml#a0ec2bd62a49e5078d3ca0a03fa123c9e">CRingBuffer::getLength</a></div><div class="ttdeci">int getLength() const</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00187">RingBuffer.h:187</a></div></div>
<div class="ttc" id="aa00490_xhtml_a0f25eadaafa6a2e7bfe2f9ef6af1104b"><div class="ttname"><a href="a00490.xhtml#a0f25eadaafa6a2e7bfe2f9ef6af1104b">CRingBuffer::getPostInc</a></div><div class="ttdeci">T getPostInc()</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00077">RingBuffer.h:77</a></div></div>
<div class="ttc" id="aa00490_xhtml_a15f6463cfcafd855157d33d253011dc7"><div class="ttname"><a href="a00490.xhtml#a15f6463cfcafd855157d33d253011dc7">CRingBuffer::put</a></div><div class="ttdeci">void put(const T *ptNewBuff, int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00062">RingBuffer.h:62</a></div></div>
<div class="ttc" id="aa00490_xhtml_a16631e41f7e79a0da11a5246dfcade5c"><div class="ttname"><a href="a00490.xhtml#a16631e41f7e79a0da11a5246dfcade5c">CRingBuffer::CRingBuffer</a></div><div class="ttdeci">CRingBuffer()</div></div>
<div class="ttc" id="aa00490_xhtml_a17237cdeda2b10e77e1815def129debd"><div class="ttname"><a href="a00490.xhtml#a17237cdeda2b10e77e1815def129debd">CRingBuffer::m_iReadIdx</a></div><div class="ttdeci">int m_iReadIdx</div><div class="ttdoc">current read index</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00207">RingBuffer.h:207</a></div></div>
<div class="ttc" id="aa00490_xhtml_a21568ce259aa8e97ea3f3d7aec4828b7"><div class="ttname"><a href="a00490.xhtml#a21568ce259aa8e97ea3f3d7aec4828b7">CRingBuffer::putPostInc</a></div><div class="ttdeci">void putPostInc(const T *ptNewBuff, int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00044">RingBuffer.h:44</a></div></div>
<div class="ttc" id="aa00490_xhtml_a23d9877584d712c17811a9833835605e"><div class="ttname"><a href="a00490.xhtml#a23d9877584d712c17811a9833835605e">CRingBuffer::get</a></div><div class="ttdeci">T get(float fOffset=0) const</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00098">RingBuffer.h:98</a></div></div>
<div class="ttc" id="aa00490_xhtml_a2bd848181a662312600bc590b9040d2a"><div class="ttname"><a href="a00490.xhtml#a2bd848181a662312600bc590b9040d2a">CRingBuffer::putPostInc</a></div><div class="ttdeci">void putPostInc(T tNewValue)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00034">RingBuffer.h:34</a></div></div>
<div class="ttc" id="aa00490_xhtml_a3f35b48aa5632a863a85d09de775fb0b"><div class="ttname"><a href="a00490.xhtml#a3f35b48aa5632a863a85d09de775fb0b">CRingBuffer::m_iBuffLength</a></div><div class="ttdeci">int m_iBuffLength</div><div class="ttdoc">length of the internal buffer</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00206">RingBuffer.h:206</a></div></div>
<div class="ttc" id="aa00490_xhtml_a408e0ec5855fca27bd2dc5862fa913ab"><div class="ttname"><a href="a00490.xhtml#a408e0ec5855fca27bd2dc5862fa913ab">CRingBuffer::setWriteIdx</a></div><div class="ttdeci">void setWriteIdx(int iNewWriteIdx)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00155">RingBuffer.h:155</a></div></div>
<div class="ttc" id="aa00490_xhtml_a67eddecd2a880c52c80093774bc37c24"><div class="ttname"><a href="a00490.xhtml#a67eddecd2a880c52c80093774bc37c24">CRingBuffer::incIdx</a></div><div class="ttdeci">void incIdx(int &amp;iIdx, int iOffset=1)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00196">RingBuffer.h:196</a></div></div>
<div class="ttc" id="aa00490_xhtml_a6c82ffd2218093776e8952e15309c51e"><div class="ttname"><a href="a00490.xhtml#a6c82ffd2218093776e8952e15309c51e">CRingBuffer::m_ptBuff</a></div><div class="ttdeci">T * m_ptBuff</div><div class="ttdoc">data buffer</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00210">RingBuffer.h:210</a></div></div>
<div class="ttc" id="aa00490_xhtml_a702eb6314380082795f735df74a816c9"><div class="ttname"><a href="a00490.xhtml#a702eb6314380082795f735df74a816c9">CRingBuffer::put</a></div><div class="ttdeci">void put(T tNewValue)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00053">RingBuffer.h:53</a></div></div>
<div class="ttc" id="aa00490_xhtml_a716fb4acc03355a73cc7d96f3ceb2995"><div class="ttname"><a href="a00490.xhtml#a716fb4acc03355a73cc7d96f3ceb2995">CRingBuffer::reset</a></div><div class="ttdeci">void reset()</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00137">RingBuffer.h:137</a></div></div>
<div class="ttc" id="aa00490_xhtml_a76a236cd8dcd7e464abd9416dd445f2c"><div class="ttname"><a href="a00490.xhtml#a76a236cd8dcd7e464abd9416dd445f2c">CRingBuffer::operator=</a></div><div class="ttdeci">CRingBuffer &amp; operator=(const CRingBuffer &amp;c)</div></div>
<div class="ttc" id="aa00490_xhtml_a8173fd5abe5c4ff4e78ffad4b14ea88b"><div class="ttname"><a href="a00490.xhtml#a8173fd5abe5c4ff4e78ffad4b14ea88b">CRingBuffer::getWriteIdx</a></div><div class="ttdeci">int getWriteIdx() const</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00147">RingBuffer.h:147</a></div></div>
<div class="ttc" id="aa00490_xhtml_a97c8bb4689fcef14d595e897ea72cba9"><div class="ttname"><a href="a00490.xhtml#a97c8bb4689fcef14d595e897ea72cba9">CRingBuffer::~CRingBuffer</a></div><div class="ttdeci">virtual ~CRingBuffer()</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00025">RingBuffer.h:25</a></div></div>
<div class="ttc" id="aa00490_xhtml_aa04a6cb30d486a6ddd5f7929db1eef9d"><div class="ttname"><a href="a00490.xhtml#aa04a6cb30d486a6ddd5f7929db1eef9d">CRingBuffer::getNumValuesInBuffer</a></div><div class="ttdeci">int getNumValuesInBuffer() const</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00179">RingBuffer.h:179</a></div></div>
<div class="ttc" id="aa00490_xhtml_ab18fac37cac4e8bde0419fe04845ac9d"><div class="ttname"><a href="a00490.xhtml#ab18fac37cac4e8bde0419fe04845ac9d">CRingBuffer::getReadIdx</a></div><div class="ttdeci">int getReadIdx() const</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00163">RingBuffer.h:163</a></div></div>
<div class="ttc" id="aa00490_xhtml_ad2bfd60fbefec3403b6a2a420b8695a5"><div class="ttname"><a href="a00490.xhtml#ad2bfd60fbefec3403b6a2a420b8695a5">CRingBuffer::m_iWriteIdx</a></div><div class="ttdeci">int m_iWriteIdx</div><div class="ttdoc">current write index</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00208">RingBuffer.h:208</a></div></div>
<div class="ttc" id="aa00490_xhtml_add36d66b9e45b08cb8bb11b1fbc83e1b"><div class="ttname"><a href="a00490.xhtml#add36d66b9e45b08cb8bb11b1fbc83e1b">CRingBuffer::CRingBuffer</a></div><div class="ttdeci">CRingBuffer(const CRingBuffer &amp;that)</div></div>
<div class="ttc" id="aa00490_xhtml_aeb86fd660cbaadd93a9d89dc529d5b76"><div class="ttname"><a href="a00490.xhtml#aeb86fd660cbaadd93a9d89dc529d5b76">CRingBuffer::getPostInc</a></div><div class="ttdeci">void getPostInc(T *ptBuff, int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00088">RingBuffer.h:88</a></div></div>
<div class="ttc" id="aa00490_xhtml_af265a6322c4b1584c880def00d31e663"><div class="ttname"><a href="a00490.xhtml#af265a6322c4b1584c880def00d31e663">CRingBuffer::setReadIdx</a></div><div class="ttdeci">void setReadIdx(int iNewReadIdx)</div><div class="ttdef"><b>Definition:</b> <a href="a00146_source.xhtml#l00171">RingBuffer.h:171</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_bfccd401955b95cf8c75461437045ac0.xhtml">inc</a></li><li class="navelem"><a class="el" href="dir_0aca768bfdcf5d30136701ca31d18db0.xhtml">helper</a></li><li class="navelem"><a class="el" href="a00146.xhtml">RingBuffer.h</a></li>
    <li class="footer">Generated on Thu Jun 16 2022 21:11:10 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
