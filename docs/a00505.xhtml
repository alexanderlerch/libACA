<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.13.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: CVector Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<script type="text/javascript" src="clipboard.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="cookie.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.3.1</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.13.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(0); });
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('a00505.xhtml',''); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="a00502.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">CVector Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>class with static functions for buffer operations with type T  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00185_source.xhtml">Vector.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CVector:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00503.svg" width="191" height="596"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:abaadac98b1cad18b7b568852bc951696" id="r_abaadac98b1cad18b7b568852bc951696"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:abaadac98b1cad18b7b568852bc951696"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abaadac98b1cad18b7b568852bc951696">alloc</a> (T *&amp;ptVec, long long iLength)</td></tr>
<tr class="separator:abaadac98b1cad18b7b568852bc951696"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7c5cba73e439adac77778f61c9418f0" id="r_ad7c5cba73e439adac77778f61c9418f0"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:ad7c5cba73e439adac77778f61c9418f0"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad7c5cba73e439adac77778f61c9418f0">copy</a> (T *ptDest, const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:ad7c5cba73e439adac77778f61c9418f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa86bdb0c663d4d52f2765793756f8737" id="r_aa86bdb0c663d4d52f2765793756f8737"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:aa86bdb0c663d4d52f2765793756f8737"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa86bdb0c663d4d52f2765793756f8737">free</a> (T *&amp;ptVec)</td></tr>
<tr class="separator:aa86bdb0c663d4d52f2765793756f8737"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d2a655aca5f949e4c5909ec35b8c63c" id="r_a7d2a655aca5f949e4c5909ec35b8c63c"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a7d2a655aca5f949e4c5909ec35b8c63c"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7d2a655aca5f949e4c5909ec35b8c63c">moveInMem</a> (T *ptSrcDest, int iDestIdx, int isrcIdx, long long int iLength)</td></tr>
<tr class="separator:a7d2a655aca5f949e4c5909ec35b8c63c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7cbe6ef61f8d3acc5d853af9ad58d48" id="r_af7cbe6ef61f8d3acc5d853af9ad58d48"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:af7cbe6ef61f8d3acc5d853af9ad58d48"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#af7cbe6ef61f8d3acc5d853af9ad58d48">setRand</a> (T *ptDest, long long iLength)</td></tr>
<tr class="separator:af7cbe6ef61f8d3acc5d853af9ad58d48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cf9544dd96801e3ee47fd1ef2049a1b" id="r_a4cf9544dd96801e3ee47fd1ef2049a1b"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a4cf9544dd96801e3ee47fd1ef2049a1b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4cf9544dd96801e3ee47fd1ef2049a1b">setValue</a> (T *ptDest, T tValue, long long iLength)</td></tr>
<tr class="separator:a4cf9544dd96801e3ee47fd1ef2049a1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dbb3f9f480568b60f7fe50090d20003" id="r_a6dbb3f9f480568b60f7fe50090d20003"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a6dbb3f9f480568b60f7fe50090d20003"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6dbb3f9f480568b60f7fe50090d20003">setZero</a> (T *ptSrcDest, long long iLength)</td></tr>
<tr class="separator:a6dbb3f9f480568b60f7fe50090d20003"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba07261926b4c10ed7fdbe38edf6d16d" id="r_aba07261926b4c10ed7fdbe38edf6d16d"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:aba07261926b4c10ed7fdbe38edf6d16d"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aba07261926b4c10ed7fdbe38edf6d16d">setZeroBelowThresh</a> (T *ptSrcDest, long long int iLength, T tThresh)</td></tr>
<tr class="separator:aba07261926b4c10ed7fdbe38edf6d16d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a052b83e62e5c5cc44829c64ffe42eb" id="r_a3a052b83e62e5c5cc44829c64ffe42eb"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a3a052b83e62e5c5cc44829c64ffe42eb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a3a052b83e62e5c5cc44829c64ffe42eb">add_I</a> (T *ptSrcDest, const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:a3a052b83e62e5c5cc44829c64ffe42eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22ff86e4fc2f8d5042159d9c84a7ff14" id="r_a22ff86e4fc2f8d5042159d9c84a7ff14"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a22ff86e4fc2f8d5042159d9c84a7ff14"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a22ff86e4fc2f8d5042159d9c84a7ff14">addC_I</a> (T *ptSrcDest, T fConst, long long int iLength)</td></tr>
<tr class="separator:a22ff86e4fc2f8d5042159d9c84a7ff14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2239b170d46ed3d0846d766a0634a0be" id="r_a2239b170d46ed3d0846d766a0634a0be"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a2239b170d46ed3d0846d766a0634a0be"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a2239b170d46ed3d0846d766a0634a0be">addW_I</a> (T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</td></tr>
<tr class="separator:a2239b170d46ed3d0846d766a0634a0be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac742bf0f863692575b9588cb78902484" id="r_ac742bf0f863692575b9588cb78902484"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:ac742bf0f863692575b9588cb78902484"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ac742bf0f863692575b9588cb78902484">div_I</a> (T *ptSrcDest, const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:ac742bf0f863692575b9588cb78902484"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9811f50434dd058d201290b2dc98bfcd" id="r_a9811f50434dd058d201290b2dc98bfcd"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a9811f50434dd058d201290b2dc98bfcd"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9811f50434dd058d201290b2dc98bfcd">mulC_I</a> (T *ptSrcDest, T fScale, long long int iLength)</td></tr>
<tr class="separator:a9811f50434dd058d201290b2dc98bfcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fb59528a3f5d3968f988d550b270898" id="r_a5fb59528a3f5d3968f988d550b270898"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a5fb59528a3f5d3968f988d550b270898"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a5fb59528a3f5d3968f988d550b270898">mul_I</a> (T *ptSrcDest, const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:a5fb59528a3f5d3968f988d550b270898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a269d316eeb6000aac4f57ade32c83127" id="r_a269d316eeb6000aac4f57ade32c83127"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a269d316eeb6000aac4f57ade32c83127"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a269d316eeb6000aac4f57ade32c83127">mulScalar</a> (const T *ptSrc1, const T *ptSrc2, long long int iLength)</td></tr>
<tr class="separator:a269d316eeb6000aac4f57ade32c83127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39329371d828db80c2f0ad037074c998" id="r_a39329371d828db80c2f0ad037074c998"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a39329371d828db80c2f0ad037074c998"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a39329371d828db80c2f0ad037074c998">sub_I</a> (T *ptSrcDest, const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:a39329371d828db80c2f0ad037074c998"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e5b5163bb46b8de5ac4013bde1ded00" id="r_a4e5b5163bb46b8de5ac4013bde1ded00"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a4e5b5163bb46b8de5ac4013bde1ded00"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4e5b5163bb46b8de5ac4013bde1ded00">subW_I</a> (T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</td></tr>
<tr class="separator:a4e5b5163bb46b8de5ac4013bde1ded00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16455e414da1bc89417716b46b212ab9" id="r_a16455e414da1bc89417716b46b212ab9"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a16455e414da1bc89417716b46b212ab9"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a16455e414da1bc89417716b46b212ab9">flip_I</a> (T *ptSrcDest, long long int iLength)</td></tr>
<tr class="separator:a16455e414da1bc89417716b46b212ab9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63b8f3254518a67c10b7a5b2b3e0381f" id="r_a63b8f3254518a67c10b7a5b2b3e0381f"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a63b8f3254518a67c10b7a5b2b3e0381f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a63b8f3254518a67c10b7a5b2b3e0381f">sort_I</a> (T *ptSrcDest, int *piIndices, int iLength, <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAscending=<a class="el" href="a00263.xhtml#a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</a>)</td></tr>
<tr class="separator:a63b8f3254518a67c10b7a5b2b3e0381f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45f65002e2aab7eabf8702b8bcc8d30b" id="r_a45f65002e2aab7eabf8702b8bcc8d30b"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a45f65002e2aab7eabf8702b8bcc8d30b"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a45f65002e2aab7eabf8702b8bcc8d30b">distCosine</a> (const T *ptSrc1, const T *ptSrc2, long long iLength)</td></tr>
<tr class="separator:a45f65002e2aab7eabf8702b8bcc8d30b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98bac500fad7ba363e8be30051ba6690" id="r_a98bac500fad7ba363e8be30051ba6690"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a98bac500fad7ba363e8be30051ba6690"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a98bac500fad7ba363e8be30051ba6690">distEuclidean</a> (const T *ptSrc1, const T *ptSrc2, long long iLength)</td></tr>
<tr class="separator:a98bac500fad7ba363e8be30051ba6690"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab8d1ce72a924e66e81e4802a9bed2a0" id="r_aab8d1ce72a924e66e81e4802a9bed2a0"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:aab8d1ce72a924e66e81e4802a9bed2a0"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aab8d1ce72a924e66e81e4802a9bed2a0">distManhattan</a> (const T *ptSrc1, const T *ptSrc2, long long iLength)</td></tr>
<tr class="separator:aab8d1ce72a924e66e81e4802a9bed2a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f5be871090bc5a64a7732cebfb4f8ec" id="r_a9f5be871090bc5a64a7732cebfb4f8ec"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a9f5be871090bc5a64a7732cebfb4f8ec"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9f5be871090bc5a64a7732cebfb4f8ec">getMax</a> (const T *ptSrc, long long int iLength, <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:a9f5be871090bc5a64a7732cebfb4f8ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6e3545cf196c5e2409365bc62b7c1de" id="r_ae6e3545cf196c5e2409365bc62b7c1de"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:ae6e3545cf196c5e2409365bc62b7c1de"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae6e3545cf196c5e2409365bc62b7c1de">getMean</a> (const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:ae6e3545cf196c5e2409365bc62b7c1de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f7f307c20239cfd2007393e2b3b26df" id="r_a1f7f307c20239cfd2007393e2b3b26df"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a1f7f307c20239cfd2007393e2b3b26df"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a1f7f307c20239cfd2007393e2b3b26df">getMin</a> (const T *ptSrc, long long int iLength, <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:a1f7f307c20239cfd2007393e2b3b26df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba4c4298832abaf6ae306cef5990653" id="r_acba4c4298832abaf6ae306cef5990653"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:acba4c4298832abaf6ae306cef5990653"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#acba4c4298832abaf6ae306cef5990653">getRms</a> (const T *ptSrc, long long int iLength)</td></tr>
<tr class="separator:acba4c4298832abaf6ae306cef5990653"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2ed42101e3d7075f5dec265a23f3424" id="r_ae2ed42101e3d7075f5dec265a23f3424"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:ae2ed42101e3d7075f5dec265a23f3424"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae2ed42101e3d7075f5dec265a23f3424">getStd</a> (const T *ptSrc, long long int iLength, T fMean=std::numeric_limits&lt; T &gt;::max())</td></tr>
<tr class="separator:ae2ed42101e3d7075f5dec265a23f3424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdbcc3898121387f3694f74491b7331e" id="r_abdbcc3898121387f3694f74491b7331e"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:abdbcc3898121387f3694f74491b7331e"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#abdbcc3898121387f3694f74491b7331e">getSum</a> (const T *ptSrc, long long int iLength, <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:abdbcc3898121387f3694f74491b7331e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34a5c0abd80cd982df8a8bae7cbcea19" id="r_a34a5c0abd80cd982df8a8bae7cbcea19"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a34a5c0abd80cd982df8a8bae7cbcea19"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a34a5c0abd80cd982df8a8bae7cbcea19">findMax</a> (const T *ptSrc, T &amp;fMax, long long &amp;iMax, long long int iLength, <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:a34a5c0abd80cd982df8a8bae7cbcea19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad475dff5686f7f82472071000a542806" id="r_ad475dff5686f7f82472071000a542806"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:ad475dff5686f7f82472071000a542806"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad475dff5686f7f82472071000a542806">findMin</a> (const T *ptSrc, T &amp;fMin, long long &amp;iMin, long long int iLength, <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:ad475dff5686f7f82472071000a542806"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64c5c5686629f104663dd3774e7a6e1b" id="r_a64c5c5686629f104663dd3774e7a6e1b"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:a64c5c5686629f104663dd3774e7a6e1b"><td class="memTemplItemLeft" align="right" valign="top">static int&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a64c5c5686629f104663dd3774e7a6e1b">findPeaks</a> (<a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> *pbisLocalMax, const T *ptSrc, long long int iLength, T fThresh=-std::numeric_limits&lt; T &gt;::max())</td></tr>
<tr class="separator:a64c5c5686629f104663dd3774e7a6e1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1bfa2e2a6fc6da52c05ad9e0e1dea66" id="r_ad1bfa2e2a6fc6da52c05ad9e0e1dea66"><td class="memTemplParams" colspan="2">template&lt;typename T&gt; </td></tr>
<tr class="memitem:ad1bfa2e2a6fc6da52c05ad9e0e1dea66"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad1bfa2e2a6fc6da52c05ad9e0e1dea66">isEqual</a> (const T *ptSrc1, const T *ptSrc2, long long int iLength)</td></tr>
<tr class="separator:ad1bfa2e2a6fc6da52c05ad9e0e1dea66"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>class with static functions for buffer operations with type T </p>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00014">14</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a3a052b83e62e5c5cc44829c64ffe42eb" name="a3a052b83e62e5c5cc44829c64ffe42eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a052b83e62e5c5cc44829c64ffe42eb">&#9670;&#160;</a></span>add_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::add_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>element-wise vector addition </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>one input and output buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>second input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be added </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00147">147</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  148</span>    {</div>
<div class="line"><span class="lineno">  149</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  150</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  151</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  152</span> </div>
<div class="line"><span class="lineno">  153</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  154</span>            ptSrcDest[i] += ptSrc[i];</div>
<div class="line"><span class="lineno">  155</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00110_source.xhtml#l00114">CBeatHistoIf::compBeatHisto()</a>, <a class="el" href="a00074_source.xhtml#l00263">CPitchTimeAuditory::compF0()</a>, <a class="el" href="a00188_source.xhtml#l00659">CMatrix::det()</a>, <a class="el" href="a00230_source.xhtml#l00018">CPreProc::downmix()</a>, and <a class="el" href="a00212_source.xhtml#l00056">CInstFreq::process()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a3a052b83e62e5c5cc44829c64ffe42eb_icgraph.svg" width="100%" height="585"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a22ff86e4fc2f8d5042159d9c84a7ff14" name="a22ff86e4fc2f8d5042159d9c84a7ff14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22ff86e4fc2f8d5042159d9c84a7ff14">&#9670;&#160;</a></span>addC_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::addC_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>fConst</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>adds a buffer to a scalar </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>buffer to be added </td></tr>
    <tr><td class="paramname">fConst</td><td>scalar </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be added </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00163">163</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  164</span>    {</div>
<div class="line"><span class="lineno">  165</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  166</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  167</span> </div>
<div class="line"><span class="lineno">  168</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  169</span>            ptSrcDest[i] += fConst;</div>
<div class="line"><span class="lineno">  170</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00188_source.xhtml#l00431">CMatrix::addC_I()</a>, <a class="el" href="a00086_source.xhtml#l00148">CKnn::buildHistogram_()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00056_source.xhtml#l00072">CChordFromBlockIf::genTemplateMatrix_()</a>, and <a class="el" href="a00044_source.xhtml#l00031">CKeyFromChroma::getKey()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a22ff86e4fc2f8d5042159d9c84a7ff14_icgraph.svg" width="100%" height="579"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a2239b170d46ed3d0846d766a0634a0be" name="a2239b170d46ed3d0846d766a0634a0be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2239b170d46ed3d0846d766a0634a0be">&#9670;&#160;</a></span>addW_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::addW_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>fWeight</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>weighted element-wise vector addition </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>one input and output buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>second input buffer </td></tr>
    <tr><td class="paramname">fWeight</td><td>weight to be applied to ptSrc entries </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements to be added </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00179">179</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  180</span>    {</div>
<div class="line"><span class="lineno">  181</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  182</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  183</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  184</span> </div>
<div class="line"><span class="lineno">  185</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  186</span>            ptSrcDest[i] += fWeight * ptSrc[i];</div>
<div class="line"><span class="lineno">  187</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00188_source.xhtml#l00659">CMatrix::det()</a>, and <a class="el" href="a00185_source.xhtml#l00282">subW_I()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a2239b170d46ed3d0846d766a0634a0be_icgraph.svg" width="100%" height="451"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="abaadac98b1cad18b7b568852bc951696" name="abaadac98b1cad18b7b568852bc951696"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaadac98b1cad18b7b568852bc951696">&#9670;&#160;</a></span>alloc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::alloc </td>
          <td>(</td>
          <td class="paramtype">T *&amp;</td>          <td class="paramname"><span class="paramname"><em>ptVec</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>allocates a T buffer and inits it with zeros </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptVec</td><td>(empty pointer, to be allocated) </td></tr>
    <tr><td class="paramname">iLength</td><td>number of Ts </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00025">25</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   26</span>    {</div>
<div class="line"><span class="lineno">   27</span>        assert(iLength &gt; 0);</div>
<div class="line"><span class="lineno">   28</span> </div>
<div class="line"><span class="lineno">   29</span>        ptVec = <span class="keyword">new</span> T[iLength];</div>
<div class="line"><span class="lineno">   30</span> </div>
<div class="line"><span class="lineno">   31</span>        assert(ptVec);</div>
<div class="line"><span class="lineno">   32</span>        <a class="code hl_function" href="#a6dbb3f9f480568b60f7fe50090d20003">setZero</a>(ptVec, iLength);</div>
<div class="line"><span class="lineno">   33</span>    }</div>
<div class="ttc" id="aa00505_xhtml_a6dbb3f9f480568b60f7fe50090d20003"><div class="ttname"><a href="#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a></div><div class="ttdeci">static void setZero(T *ptSrcDest, long long iLength)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00114">Vector.h:114</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00114">setZero()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00188_source.xhtml#l00023">CMatrix::alloc()</a>, <a class="el" href="a00098_source.xhtml#l00257">CFft::allocMemory_()</a>, <a class="el" href="a00197_source.xhtml#l00340">CButterLp::calcA()</a>, <a class="el" href="a00197_source.xhtml#l00300">CButterLp::calcCoeffs()</a>, <a class="el" href="a00032_source.xhtml#l00100">CPca::calcSVD()</a>, <a class="el" href="a00065_source.xhtml#l00126">CBlockAudioBuffer::CBlockAudioBuffer()</a>, <a class="el" href="a00056_source.xhtml#l00054">CChordFromBlockIf::CChordFromBlockIf()</a>, <a class="el" href="a00047_source.xhtml#l00346">CFeatureSpectralFlux::CFeatureSpectralFlux()</a>, <a class="el" href="a00047_source.xhtml#l00379">CFeatureSpectralMfccs::CFeatureSpectralMfccs()</a>, <a class="el" href="a00047_source.xhtml#l00756">CFeatureTimeMaxAcf::CFeatureTimeMaxAcf()</a>, <a class="el" href="a00071_source.xhtml#l00243">CGmmResult::CGmmResult()</a>, <a class="el" href="a00212_source.xhtml#l00021">CInstFreq::CInstFreq()</a>, <a class="el" href="a00104_source.xhtml#l00068">CNoveltyFromBlockIf::CNoveltyFromBlockIf()</a>, <a class="el" href="a00059_source.xhtml#l00196">CChordIf::compChords()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00074_source.xhtml#l00021">CPitchSpectralAcf::CPitchSpectralAcf()</a>, <a class="el" href="a00074_source.xhtml#l00096">CPitchSpectralHps::CPitchSpectralHps()</a>, <a class="el" href="a00074_source.xhtml#l00148">CPitchTimeAcf::CPitchTimeAcf()</a>, <a class="el" href="a00074_source.xhtml#l00225">CPitchTimeAuditory::CPitchTimeAuditory()</a>, <a class="el" href="a00038_source.xhtml#l00011">CSubFingerprint::CSubFingerprint()</a>, <a class="el" href="a00197_source.xhtml#l00165">CFilter&lt; T &gt;::filtfilt()</a>, <a class="el" href="a00206_source.xhtml#l00232">CMovingAverage::filtfilt()</a>, <a class="el" href="a00035_source.xhtml#l00380">CSpectrogramIf::generateMelFb_()</a>, <a class="el" href="a00092_source.xhtml#l00020">CCcf::init()</a>, <a class="el" href="a00050_source.xhtml#l00028">CDtw::init()</a>, <a class="el" href="a00197_source.xhtml#l00032">CFilter&lt; T &gt;::init()</a>, <a class="el" href="a00068_source.xhtml#l00085">CFingerprint::init()</a>, <a class="el" href="a00068_source.xhtml#l00025">CFingerprint::init()</a>, <a class="el" href="a00071_source.xhtml#l00011">CGmm::init()</a>, <a class="el" href="a00101_source.xhtml#l00009">CGmmClassifier::init()</a>, <a class="el" href="a00071_source.xhtml#l00301">CGmmResult::init()</a>, <a class="el" href="a00113_source.xhtml#l00014">CKmeans::init()</a>, <a class="el" href="a00086_source.xhtml#l00015">CKnn::init()</a>, <a class="el" href="a00107_source.xhtml#l00010">CLeaveOneOutCrossVal::init()</a>, <a class="el" href="a00032_source.xhtml#l00009">CPca::init()</a>, <a class="el" href="a00029_source.xhtml#l00011">CSeqFeatureSel::init()</a>, <a class="el" href="a00053_source.xhtml#l00017">CViterbi::init()</a>, <a class="el" href="a00110_source.xhtml#l00247">CBeatHistoIf::init_()</a>, <a class="el" href="a00110_source.xhtml#l00224">CBeatHistoIf::init_()</a>, <a class="el" href="a00059_source.xhtml#l00400">CChordIf::init_()</a>, <a class="el" href="a00062_source.xhtml#l00348">CFeatureIf::init_()</a>, <a class="el" href="a00068_source.xhtml#l00187">CFingerprint::init_()</a>, <a class="el" href="a00041_source.xhtml#l00496">CGammaToneFbIf::init_()</a>, <a class="el" href="a00116_source.xhtml#l00323">CNoveltyIf::init_()</a>, <a class="el" href="a00077_source.xhtml#l00296">CPitchIf::init_()</a>, <a class="el" href="a00035_source.xhtml#l00260">CSpectrogramIf::init_()</a>, <a class="el" href="a00149_source.xhtml#l00102">CResample::process()</a>, <a class="el" href="a00188_source.xhtml#l00854">CMatrix::rearrangeRows()</a>, <a class="el" href="a00197_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>, <a class="el" href="a00086_source.xhtml#l00089">CKnn::setParamK()</a>, and <a class="el" href="a00101_source.xhtml#l00032">CGmmClassifier::train()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_abaadac98b1cad18b7b568852bc951696_cgraph.svg" width="279" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_abaadac98b1cad18b7b568852bc951696_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ad7c5cba73e439adac77778f61c9418f0" name="ad7c5cba73e439adac77778f61c9418f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7c5cba73e439adac77778f61c9418f0">&#9670;&#160;</a></span>copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::copy </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>copies buffer of type T </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>pointer to destination memory </td></tr>
    <tr><td class="paramname">ptSrc</td><td>pointer to source memory </td></tr>
    <tr><td class="paramname">iLength</td><td>length of buffer </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00041">41</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   42</span>    {</div>
<div class="line"><span class="lineno">   43</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">   44</span> </div>
<div class="line"><span class="lineno">   45</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><span class="lineno">   46</span>        {</div>
<div class="line"><span class="lineno">   47</span>            assert(ptDest);</div>
<div class="line"><span class="lineno">   48</span>            assert(ptSrc);</div>
<div class="line"><span class="lineno">   49</span>            memcpy(ptDest, ptSrc, <span class="keyword">sizeof</span>(T) * iLength);</div>
<div class="line"><span class="lineno">   50</span>        }</div>
<div class="line"><span class="lineno">   51</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00197_source.xhtml#l00300">CButterLp::calcCoeffs()</a>, <a class="el" href="a00065_source.xhtml#l00126">CBlockAudioBuffer::CBlockAudioBuffer()</a>, <a class="el" href="a00071_source.xhtml#l00243">CGmmResult::CGmmResult()</a>, <a class="el" href="a00113_source.xhtml#l00144">CKmeans::checkConverged_()</a>, <a class="el" href="a00101_source.xhtml#l00135">CGmmClassifier::classify()</a>, <a class="el" href="a00086_source.xhtml#l00113">CKnn::classify()</a>, <a class="el" href="a00110_source.xhtml#l00114">CBeatHistoIf::compBeatHisto()</a>, <a class="el" href="a00092_source.xhtml#l00062">CCcf::compCcf()</a>, <a class="el" href="a00074_source.xhtml#l00039">CPitchSpectralAcf::compF0()</a>, <a class="el" href="a00074_source.xhtml#l00106">CPitchSpectralHps::compF0()</a>, <a class="el" href="a00047_source.xhtml#l00357">CFeatureSpectralFlux::compFeature()</a>, <a class="el" href="a00098_source.xhtml#l00091">CFft::compFft()</a>, <a class="el" href="a00098_source.xhtml#l00115">CFft::compInvFft()</a>, <a class="el" href="a00104_source.xhtml#l00109">CNoveltyFromBlockIf::compNovelty()</a>, <a class="el" href="a00188_source.xhtml#l00042">CMatrix::copy()</a>, <a class="el" href="a00230_source.xhtml#l00018">CPreProc::downmix()</a>, <a class="el" href="a00092_source.xhtml#l00111">CCcf::getCcf()</a>, <a class="el" href="a00044_source.xhtml#l00031">CKeyFromChroma::getKey()</a>, <a class="el" href="a00035_source.xhtml#l00296">CSpectrogramIf::getMelSpectrogramAxisVectors()</a>, <a class="el" href="a00065_source.xhtml#l00157">CBlockAudioBuffer::getNextBlock()</a>, <a class="el" href="a00071_source.xhtml#l00222">CGmmResult::getProb()</a>, <a class="el" href="a00029_source.xhtml#l00105">CSeqFeatureSel::getResult()</a>, <a class="el" href="a00098_source.xhtml#l00079">CFft::getWindow()</a>, <a class="el" href="a00197_source.xhtml#l00032">CFilter&lt; T &gt;::init()</a>, <a class="el" href="a00053_source.xhtml#l00017">CViterbi::init()</a>, <a class="el" href="a00098_source.xhtml#l00198">CFft::mergeRealImag()</a>, <a class="el" href="a00017_source.xhtml#l00258">CAudioFileSndLib::openFile()</a>, <a class="el" href="a00071_source.xhtml#l00205">CGmmResult::operator=()</a>, <a class="el" href="a00098_source.xhtml#l00067">CFft::overrideWindow()</a>, <a class="el" href="a00041_source.xhtml#l00107">CGammatone::process()</a>, <a class="el" href="a00212_source.xhtml#l00056">CInstFreq::process()</a>, <a class="el" href="a00107_source.xhtml#l00061">CLeaveOneOutCrossVal::process()</a>, <a class="el" href="a00029_source.xhtml#l00035">CSeqFeatureSel::process()</a>, <a class="el" href="a00188_source.xhtml#l00854">CMatrix::rearrangeRows()</a>, <a class="el" href="a00188_source.xhtml#l00134">CMatrix::setRow()</a>, <a class="el" href="a00098_source.xhtml#l00178">CFft::splitRealImag()</a>, and <a class="el" href="a00086_source.xhtml#l00066">CKnn::train()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_ad7c5cba73e439adac77778f61c9418f0_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a45f65002e2aab7eabf8702b8bcc8d30b" name="a45f65002e2aab7eabf8702b8bcc8d30b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45f65002e2aab7eabf8702b8bcc8d30b">&#9670;&#160;</a></span>distCosine()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::distCosine </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Cosine distance </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc1</td><td>first input vector </td></tr>
    <tr><td class="paramname">ptSrc2</td><td>second input vector </td></tr>
    <tr><td class="paramname">iLength</td><td>length of vectors </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00381">381</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  382</span>    {</div>
<div class="line"><span class="lineno">  383</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  384</span>        assert(ptSrc1);</div>
<div class="line"><span class="lineno">  385</span>        assert(ptSrc2);</div>
<div class="line"><span class="lineno">  386</span> </div>
<div class="line"><span class="lineno">  387</span>        T fDist = 0;</div>
<div class="line"><span class="lineno">  388</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  389</span>            fDist += ptSrc1[i] * ptSrc2[i];</div>
<div class="line"><span class="lineno">  390</span> </div>
<div class="line"><span class="lineno">  391</span>        <span class="keywordflow">return</span> 1.F - fDist / std::sqrt(<a class="code hl_function" href="#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc1, ptSrc1, iLength) * <a class="code hl_function" href="#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc2, ptSrc2, iLength));</div>
<div class="line"><span class="lineno">  392</span>    }</div>
<div class="ttc" id="aa00505_xhtml_a269d316eeb6000aac4f57ade32c83127"><div class="ttname"><a href="#a269d316eeb6000aac4f57ade32c83127">CVector::mulScalar</a></div><div class="ttdeci">static T mulScalar(const T *ptSrc1, const T *ptSrc2, long long int iLength)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00246">Vector.h:246</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00246">mulScalar()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a45f65002e2aab7eabf8702b8bcc8d30b_cgraph.svg" width="327" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a98bac500fad7ba363e8be30051ba6690" name="a98bac500fad7ba363e8be30051ba6690"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a98bac500fad7ba363e8be30051ba6690">&#9670;&#160;</a></span>distEuclidean()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::distEuclidean </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Euclidean distance </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc1</td><td>first input vector </td></tr>
    <tr><td class="paramname">ptSrc2</td><td>second input vector </td></tr>
    <tr><td class="paramname">iLength</td><td>length of vectors </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00402">402</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  403</span>    {</div>
<div class="line"><span class="lineno">  404</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  405</span>        assert(ptSrc1);</div>
<div class="line"><span class="lineno">  406</span>        assert(ptSrc2);</div>
<div class="line"><span class="lineno">  407</span> </div>
<div class="line"><span class="lineno">  408</span>        T fDist = -2.F * <a class="code hl_function" href="#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc1, ptSrc2, iLength);</div>
<div class="line"><span class="lineno">  409</span>        fDist += <a class="code hl_function" href="#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc1, ptSrc1, iLength);</div>
<div class="line"><span class="lineno">  410</span>        fDist += <a class="code hl_function" href="#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc2, ptSrc2, iLength);</div>
<div class="line"><span class="lineno">  411</span> </div>
<div class="line"><span class="lineno">  412</span>        <span class="keywordflow">return</span> std::sqrt(fDist);</div>
<div class="line"><span class="lineno">  413</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00246">mulScalar()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00162">CKmeans::assignClusterLabels_()</a>, and <a class="el" href="a00086_source.xhtml#l00113">CKnn::classify()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a98bac500fad7ba363e8be30051ba6690_cgraph.svg" width="343" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a98bac500fad7ba363e8be30051ba6690_icgraph.svg" width="632" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aab8d1ce72a924e66e81e4802a9bed2a0" name="aab8d1ce72a924e66e81e4802a9bed2a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab8d1ce72a924e66e81e4802a9bed2a0">&#9670;&#160;</a></span>distManhattan()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::distManhattan </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>manhattan distance </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc1</td><td>first input vector </td></tr>
    <tr><td class="paramname">ptSrc2</td><td>second input vector </td></tr>
    <tr><td class="paramname">iLength</td><td>length of vectors </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00422">422</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  423</span>    {</div>
<div class="line"><span class="lineno">  424</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  425</span>        assert(ptSrc1);</div>
<div class="line"><span class="lineno">  426</span>        assert(ptSrc2);</div>
<div class="line"><span class="lineno">  427</span> </div>
<div class="line"><span class="lineno">  428</span>        T fDist = std::abs(ptSrc1[0] - ptSrc2[0]);</div>
<div class="line"><span class="lineno">  429</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 1; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  430</span>            fDist += std::abs(ptSrc1[i] - ptSrc2[i]);</div>
<div class="line"><span class="lineno">  431</span> </div>
<div class="line"><span class="lineno">  432</span>        <span class="keywordflow">return</span> fDist;</div>
<div class="line"><span class="lineno">  433</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00044_source.xhtml#l00031">CKeyFromChroma::getKey()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_aab8d1ce72a924e66e81e4802a9bed2a0_icgraph.svg" width="388" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="ac742bf0f863692575b9588cb78902484" name="ac742bf0f863692575b9588cb78902484"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac742bf0f863692575b9588cb78902484">&#9670;&#160;</a></span>div_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::div_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>element-wise vector division </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>one input and output buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>second input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be divided </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00195">195</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  196</span>    {</div>
<div class="line"><span class="lineno">  197</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  198</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  199</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  200</span> </div>
<div class="line"><span class="lineno">  201</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  202</span>        {</div>
<div class="line"><span class="lineno">  203</span>            assert(ptSrc[i] != 0);</div>
<div class="line"><span class="lineno">  204</span>            ptSrcDest[i] /= ptSrc[i];</div>
<div class="line"><span class="lineno">  205</span>        }</div>
<div class="line"><span class="lineno">  206</span>    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a34a5c0abd80cd982df8a8bae7cbcea19" name="a34a5c0abd80cd982df8a8bae7cbcea19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34a5c0abd80cd982df8a8bae7cbcea19">&#9670;&#160;</a></span>findMax()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::findMax </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;</td>          <td class="paramname"><span class="paramname"><em>fMax</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long &amp;</td>          <td class="paramname"><span class="paramname"><em>iMax</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a></td>          <td class="paramname"><span class="paramname"><em>bAbs</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>finds the maximum (absolute) value in the buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">fMax</td><td>resulting output value </td></tr>
    <tr><td class="paramname">iMax</td><td>index of the resulting output value </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
    <tr><td class="paramname">bAbs</td><td>bool to specify whether we search absolute values </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00585">585</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  586</span>    {</div>
<div class="line"><span class="lineno">  587</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  588</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  589</span> </div>
<div class="line"><span class="lineno">  590</span>        fMax = -std::numeric_limits&lt;T&gt;::max();</div>
<div class="line"><span class="lineno">  591</span>        iMax = -1;</div>
<div class="line"><span class="lineno">  592</span> </div>
<div class="line"><span class="lineno">  593</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  594</span>        {</div>
<div class="line"><span class="lineno">  595</span>            T fCurr = (bAbs) ? std::abs(ptSrc[i]) : ptSrc[i];</div>
<div class="line"><span class="lineno">  596</span> </div>
<div class="line"><span class="lineno">  597</span>            <span class="keywordflow">if</span> (fCurr &gt; fMax)</div>
<div class="line"><span class="lineno">  598</span>            {</div>
<div class="line"><span class="lineno">  599</span>                fMax = fCurr;</div>
<div class="line"><span class="lineno">  600</span>                iMax = i;</div>
<div class="line"><span class="lineno">  601</span>            }</div>
<div class="line"><span class="lineno">  602</span>        }</div>
<div class="line"><span class="lineno">  603</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00196">CChordIf::compChords()</a>, <a class="el" href="a00074_source.xhtml#l00039">CPitchSpectralAcf::compF0()</a>, <a class="el" href="a00074_source.xhtml#l00106">CPitchSpectralHps::compF0()</a>, <a class="el" href="a00074_source.xhtml#l00164">CPitchTimeAcf::compF0()</a>, <a class="el" href="a00086_source.xhtml#l00201">CKnn::countMaxima_()</a>, <a class="el" href="a00074_source.xhtml#l00294">CPitchTimeAuditory::getAcfMax_()</a>, <a class="el" href="a00092_source.xhtml#l00133">CCcf::getCcfMaxIdx()</a>, and <a class="el" href="a00185_source.xhtml#l00444">getMax()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a34a5c0abd80cd982df8a8bae7cbcea19_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ad475dff5686f7f82472071000a542806" name="ad475dff5686f7f82472071000a542806"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad475dff5686f7f82472071000a542806">&#9670;&#160;</a></span>findMin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::findMin </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;</td>          <td class="paramname"><span class="paramname"><em>fMin</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long &amp;</td>          <td class="paramname"><span class="paramname"><em>iMin</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a></td>          <td class="paramname"><span class="paramname"><em>bAbs</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>finds the minimum (absolute) value in the buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">fMin</td><td>resulting output value </td></tr>
    <tr><td class="paramname">iMin</td><td>index of the resulting output value </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
    <tr><td class="paramname">bAbs</td><td>bool to specify whether we search absolute values </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00613">613</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  614</span>    {</div>
<div class="line"><span class="lineno">  615</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  616</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  617</span> </div>
<div class="line"><span class="lineno">  618</span>        fMin = std::numeric_limits&lt;T&gt;::max();</div>
<div class="line"><span class="lineno">  619</span>        iMin = -1;</div>
<div class="line"><span class="lineno">  620</span> </div>
<div class="line"><span class="lineno">  621</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  622</span>        {</div>
<div class="line"><span class="lineno">  623</span>            T fCurr = (bAbs) ? std::abs(ptSrc[i]) : ptSrc[i];</div>
<div class="line"><span class="lineno">  624</span> </div>
<div class="line"><span class="lineno">  625</span>            <span class="keywordflow">if</span> (fCurr &lt; fMin)</div>
<div class="line"><span class="lineno">  626</span>            {</div>
<div class="line"><span class="lineno">  627</span>                fMin = fCurr;</div>
<div class="line"><span class="lineno">  628</span>                iMin = i;</div>
<div class="line"><span class="lineno">  629</span>            }</div>
<div class="line"><span class="lineno">  630</span>        }</div>
<div class="line"><span class="lineno">  631</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00162">CKmeans::assignClusterLabels_()</a>, <a class="el" href="a00044_source.xhtml#l00031">CKeyFromChroma::getKey()</a>, and <a class="el" href="a00185_source.xhtml#l00481">getMin()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_ad475dff5686f7f82472071000a542806_icgraph.svg" width="100%" height="469"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a64c5c5686629f104663dd3774e7a6e1b" name="a64c5c5686629f104663dd3774e7a6e1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64c5c5686629f104663dd3774e7a6e1b">&#9670;&#160;</a></span>findPeaks()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int CVector::findPeaks </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> *</td>          <td class="paramname"><span class="paramname"><em>pbisLocalMax</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>fThresh</em></span><span class="paramdefsep"> = </span><span class="paramdefval">-std::numeric_limits&lt;T&gt;::max()</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>finds the local maxima in the buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pbisLocalMax</td><td>result buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
    <tr><td class="paramname">fThresh</td><td>only detect maxima above this threshold </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int number of local maxima </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00640">640</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  641</span>    {</div>
<div class="line"><span class="lineno">  642</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  643</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  644</span>        assert(pbisLocalMax);</div>
<div class="line"><span class="lineno">  645</span> </div>
<div class="line"><span class="lineno">  646</span>        <span class="keywordtype">int</span> iNumPeaks = 0;</div>
<div class="line"><span class="lineno">  647</span> </div>
<div class="line"><span class="lineno">  648</span>        <a class="code hl_function" href="#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a>(pbisLocalMax, <span class="keyword">false</span>, iLength);</div>
<div class="line"><span class="lineno">  649</span> </div>
<div class="line"><span class="lineno">  650</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> k = 1; k &lt; iLength - 1; k++)</div>
<div class="line"><span class="lineno">  651</span>        {</div>
<div class="line"><span class="lineno">  652</span>            <span class="comment">// search for local maxima</span></div>
<div class="line"><span class="lineno">  653</span>            <span class="keywordflow">if</span> (ptSrc[k] &lt;= ptSrc[k - 1] || ptSrc[k] &lt;= ptSrc[k + 1] || ptSrc[k] &lt;= fThresh)</div>
<div class="line"><span class="lineno">  654</span>                <span class="keywordflow">continue</span>;</div>
<div class="line"><span class="lineno">  655</span>            <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  656</span>            {</div>
<div class="line"><span class="lineno">  657</span>                pbisLocalMax[k] = <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  658</span>                iNumPeaks++;</div>
<div class="line"><span class="lineno">  659</span> </div>
<div class="line"><span class="lineno">  660</span>                <span class="comment">// increment because the next bin cannot be a local max</span></div>
<div class="line"><span class="lineno">  661</span>                k++;</div>
<div class="line"><span class="lineno">  662</span>            }</div>
<div class="line"><span class="lineno">  663</span>        }</div>
<div class="line"><span class="lineno">  664</span> </div>
<div class="line"><span class="lineno">  665</span>        <span class="keywordflow">return</span> iNumPeaks;</div>
<div class="line"><span class="lineno">  666</span>    }</div>
<div class="ttc" id="aa00505_xhtml_a4cf9544dd96801e3ee47fd1ef2049a1b"><div class="ttname"><a href="#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a></div><div class="ttdeci">static void setValue(T *ptDest, T tValue, long long iLength)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00100">Vector.h:100</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00100">setValue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a64c5c5686629f104663dd3774e7a6e1b_cgraph.svg" width="316" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a64c5c5686629f104663dd3774e7a6e1b_icgraph.svg" width="452" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a16455e414da1bc89417716b46b212ab9" name="a16455e414da1bc89417716b46b212ab9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16455e414da1bc89417716b46b212ab9">&#9670;&#160;</a></span>flip_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::flip_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>reverses buffer (last to first element) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>pointer to memory to be flipped </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00294">294</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  295</span>    {</div>
<div class="line"><span class="lineno">  296</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  297</span> </div>
<div class="line"><span class="lineno">  298</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><span class="lineno">  299</span>        {</div>
<div class="line"><span class="lineno">  300</span>            assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  301</span> </div>
<div class="line"><span class="lineno">  302</span>            <span class="keyword">auto</span> iLoopLength = iLength / 2; <span class="comment">// integer division!</span></div>
<div class="line"><span class="lineno">  303</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLoopLength; i++)</div>
<div class="line"><span class="lineno">  304</span>            {</div>
<div class="line"><span class="lineno">  305</span>                T Tmp = ptSrcDest[i];</div>
<div class="line"><span class="lineno">  306</span>                ptSrcDest[i] = ptSrcDest[iLength - 1 - i];</div>
<div class="line"><span class="lineno">  307</span>                ptSrcDest[iLength - 1 - i] = Tmp;</div>
<div class="line"><span class="lineno">  308</span>            }</div>
<div class="line"><span class="lineno">  309</span>        }</div>
<div class="line"><span class="lineno">  310</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00110_source.xhtml#l00114">CBeatHistoIf::compBeatHisto()</a>, and <a class="el" href="a00074_source.xhtml#l00039">CPitchSpectralAcf::compF0()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a16455e414da1bc89417716b46b212ab9_icgraph.svg" width="450" height="102"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="aa86bdb0c663d4d52f2765793756f8737" name="aa86bdb0c663d4d52f2765793756f8737"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa86bdb0c663d4d52f2765793756f8737">&#9670;&#160;</a></span>free()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::free </td>
          <td>(</td>
          <td class="paramtype">T *&amp;</td>          <td class="paramname"><span class="paramname"><em>ptVec</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>frees a T buffer and sets it to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptVec</td><td>(empty pointer, to be allocated) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00057">57</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   58</span>    {</div>
<div class="line"><span class="lineno">   59</span>        <span class="keyword">delete</span>[] ptVec;</div>
<div class="line"><span class="lineno">   60</span>        ptVec = 0;</div>
<div class="line"><span class="lineno">   61</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00197_source.xhtml#l00340">CButterLp::calcA()</a>, <a class="el" href="a00197_source.xhtml#l00300">CButterLp::calcCoeffs()</a>, <a class="el" href="a00032_source.xhtml#l00100">CPca::calcSVD()</a>, <a class="el" href="a00059_source.xhtml#l00196">CChordIf::compChords()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00197_source.xhtml#l00165">CFilter&lt; T &gt;::filtfilt()</a>, <a class="el" href="a00206_source.xhtml#l00232">CMovingAverage::filtfilt()</a>, <a class="el" href="a00188_source.xhtml#l00058">CMatrix::free()</a>, <a class="el" href="a00098_source.xhtml#l00270">CFft::freeMemory_()</a>, <a class="el" href="a00068_source.xhtml#l00025">CFingerprint::init()</a>, <a class="el" href="a00149_source.xhtml#l00102">CResample::process()</a>, <a class="el" href="a00188_source.xhtml#l00854">CMatrix::rearrangeRows()</a>, <a class="el" href="a00092_source.xhtml#l00044">CCcf::reset()</a>, <a class="el" href="a00050_source.xhtml#l00050">CDtw::reset()</a>, <a class="el" href="a00197_source.xhtml#l00065">CFilter&lt; T &gt;::reset()</a>, <a class="el" href="a00068_source.xhtml#l00169">CFingerprint::reset()</a>, <a class="el" href="a00071_source.xhtml#l00042">CGmm::reset()</a>, <a class="el" href="a00101_source.xhtml#l00092">CGmmClassifier::reset()</a>, <a class="el" href="a00071_source.xhtml#l00325">CGmmResult::reset()</a>, <a class="el" href="a00113_source.xhtml#l00036">CKmeans::reset()</a>, <a class="el" href="a00086_source.xhtml#l00044">CKnn::reset()</a>, <a class="el" href="a00107_source.xhtml#l00045">CLeaveOneOutCrossVal::reset()</a>, <a class="el" href="a00032_source.xhtml#l00027">CPca::reset()</a>, <a class="el" href="a00029_source.xhtml#l00119">CSeqFeatureSel::reset()</a>, <a class="el" href="a00053_source.xhtml#l00050">CViterbi::reset()</a>, <a class="el" href="a00110_source.xhtml#l00207">CBeatHistoIf::reset_()</a>, <a class="el" href="a00059_source.xhtml#l00372">CChordIf::reset_()</a>, <a class="el" href="a00062_source.xhtml#l00325">CFeatureIf::reset_()</a>, <a class="el" href="a00041_source.xhtml#l00479">CGammaToneFbIf::reset_()</a>, <a class="el" href="a00116_source.xhtml#l00298">CNoveltyIf::reset_()</a>, <a class="el" href="a00077_source.xhtml#l00273">CPitchIf::reset_()</a>, <a class="el" href="a00035_source.xhtml#l00238">CSpectrogramIf::reset_()</a>, <a class="el" href="a00197_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>, <a class="el" href="a00086_source.xhtml#l00089">CKnn::setParamK()</a>, <a class="el" href="a00101_source.xhtml#l00032">CGmmClassifier::train()</a>, <a class="el" href="a00065_source.xhtml#l00144">CBlockAudioBuffer::~CBlockAudioBuffer()</a>, <a class="el" href="a00065_source.xhtml#l00044">CBlockAudioFile::~CBlockAudioFile()</a>, <a class="el" href="a00056_source.xhtml#l00064">CChordFromBlockIf::~CChordFromBlockIf()</a>, <a class="el" href="a00059_source.xhtml#l00027">CChordFromFile::~CChordFromFile()</a>, <a class="el" href="a00239_source.xhtml#l00050">CClassifierBase::~CClassifierBase()</a>, <a class="el" href="a00062_source.xhtml#l00020">CFeatureFromFile::~CFeatureFromFile()</a>, <a class="el" href="a00047_source.xhtml#l00352">CFeatureSpectralFlux::~CFeatureSpectralFlux()</a>, <a class="el" href="a00047_source.xhtml#l00393">CFeatureSpectralMfccs::~CFeatureSpectralMfccs()</a>, <a class="el" href="a00047_source.xhtml#l00764">CFeatureTimeMaxAcf::~CFeatureTimeMaxAcf()</a>, <a class="el" href="a00068_source.xhtml#l00017">CFingerprint::~CFingerprint()</a>, <a class="el" href="a00212_source.xhtml#l00042">CInstFreq::~CInstFreq()</a>, <a class="el" href="a00104_source.xhtml#l00079">CNoveltyFromBlockIf::~CNoveltyFromBlockIf()</a>, <a class="el" href="a00116_source.xhtml#l00022">CNoveltyFromFile::~CNoveltyFromFile()</a>, <a class="el" href="a00077_source.xhtml#l00023">CPitchFromFile::~CPitchFromFile()</a>, <a class="el" href="a00074_source.xhtml#l00030">CPitchSpectralAcf::~CPitchSpectralAcf()</a>, <a class="el" href="a00074_source.xhtml#l00101">CPitchSpectralHps::~CPitchSpectralHps()</a>, <a class="el" href="a00074_source.xhtml#l00156">CPitchTimeAcf::~CPitchTimeAcf()</a>, <a class="el" href="a00074_source.xhtml#l00248">CPitchTimeAuditory::~CPitchTimeAuditory()</a>, <a class="el" href="a00035_source.xhtml#l00022">CSpectrogramFromFile::~CSpectrogramFromFile()</a>, and <a class="el" href="a00038_source.xhtml#l00027">CSubFingerprint::~CSubFingerprint()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_aa86bdb0c663d4d52f2765793756f8737_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a9f5be871090bc5a64a7732cebfb4f8ec" name="a9f5be871090bc5a64a7732cebfb4f8ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f5be871090bc5a64a7732cebfb4f8ec">&#9670;&#160;</a></span>getMax()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::getMax </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a></td>          <td class="paramname"><span class="paramname"><em>bAbs</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>finds the maximum (absolute) value in the buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
    <tr><td class="paramname">bAbs</td><td>bool to specify whether we search absolute values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00444">444</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  445</span>    {</div>
<div class="line"><span class="lineno">  446</span>        T fMax = 0;</div>
<div class="line"><span class="lineno">  447</span>        <span class="keywordtype">long</span> <span class="keywordtype">long</span> iMax = -1;</div>
<div class="line"><span class="lineno">  448</span> </div>
<div class="line"><span class="lineno">  449</span>        <a class="code hl_function" href="#a34a5c0abd80cd982df8a8bae7cbcea19">findMax</a>(ptSrc, fMax, iMax, iLength, bAbs);</div>
<div class="line"><span class="lineno">  450</span> </div>
<div class="line"><span class="lineno">  451</span>        <span class="keywordflow">return</span> fMax;</div>
<div class="line"><span class="lineno">  452</span>    }</div>
<div class="ttc" id="aa00505_xhtml_a34a5c0abd80cd982df8a8bae7cbcea19"><div class="ttname"><a href="#a34a5c0abd80cd982df8a8bae7cbcea19">CVector::findMax</a></div><div class="ttdeci">static void findMax(const T *ptSrc, T &amp;fMax, long long &amp;iMax, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00585">Vector.h:585</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00585">findMax()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00086_source.xhtml#l00148">CKnn::buildHistogram_()</a>, <a class="el" href="a00230_source.xhtml#l00049">CNormalizeAudio::CNormalizeAudio()</a>, <a class="el" href="a00230_source.xhtml#l00099">CNormalizeAudio::CNormalizeAudio()</a>, <a class="el" href="a00074_source.xhtml#l00039">CPitchSpectralAcf::compF0()</a>, <a class="el" href="a00047_source.xhtml#l00772">CFeatureTimeMaxAcf::compFeature()</a>, <a class="el" href="a00047_source.xhtml#l00039">CFeatureFromBlockIf::compFeatureSpectralCrestFactor()</a>, <a class="el" href="a00047_source.xhtml#l00292">CFeatureFromBlockIf::compFeatureTimePeakEnvelope()</a>, <a class="el" href="a00239_source.xhtml#l00062">CClassifierBase::compNormConstants()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00092_source.xhtml#l00124">CCcf::getCcfMax()</a>, <a class="el" href="a00188_source.xhtml#l00270">CMatrix::getMax()</a>, and <a class="el" href="a00230_source.xhtml#l00128">CNormalizeAudio::normalizeSignal()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a9f5be871090bc5a64a7732cebfb4f8ec_cgraph.svg" width="294" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a9f5be871090bc5a64a7732cebfb4f8ec_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ae6e3545cf196c5e2409365bc62b7c1de" name="ae6e3545cf196c5e2409365bc62b7c1de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6e3545cf196c5e2409365bc62b7c1de">&#9670;&#160;</a></span>getMean()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::getMean </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>extracts the mean value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00460">460</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  461</span>    {</div>
<div class="line"><span class="lineno">  462</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  463</span> </div>
<div class="line"><span class="lineno">  464</span>        T fMean = <a class="code hl_function" href="#abdbcc3898121387f3694f74491b7331e">getSum</a>(ptSrc, iLength);</div>
<div class="line"><span class="lineno">  465</span> </div>
<div class="line"><span class="lineno">  466</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><span class="lineno">  467</span>        {</div>
<div class="line"><span class="lineno">  468</span>            fMean /= iLength;</div>
<div class="line"><span class="lineno">  469</span>        }</div>
<div class="line"><span class="lineno">  470</span> </div>
<div class="line"><span class="lineno">  471</span>        <span class="keywordflow">return</span> fMean;</div>
<div class="line"><span class="lineno">  472</span>    }</div>
<div class="ttc" id="aa00505_xhtml_abdbcc3898121387f3694f74491b7331e"><div class="ttname"><a href="#abdbcc3898121387f3694f74491b7331e">CVector::getSum</a></div><div class="ttdeci">static T getSum(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00556">Vector.h:556</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00556">getSum()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00032_source.xhtml#l00072">CPca::compCov()</a>, <a class="el" href="a00047_source.xhtml#l00074">CFeatureFromBlockIf::compFeatureSpectralFlatness()</a>, <a class="el" href="a00083_source.xhtml#l00082">CKey::compKey()</a>, <a class="el" href="a00239_source.xhtml#l00062">CClassifierBase::compNormConstants()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00185_source.xhtml#l00524">getStd()</a>, and <a class="el" href="a00071_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_ae6e3545cf196c5e2409365bc62b7c1de_cgraph.svg" width="303" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_ae6e3545cf196c5e2409365bc62b7c1de_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a1f7f307c20239cfd2007393e2b3b26df" name="a1f7f307c20239cfd2007393e2b3b26df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f7f307c20239cfd2007393e2b3b26df">&#9670;&#160;</a></span>getMin()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::getMin </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a></td>          <td class="paramname"><span class="paramname"><em>bAbs</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>finds the minimum (absolute) value in the buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
    <tr><td class="paramname">bAbs</td><td>bool to specify whether we search absolute values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00481">481</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  482</span>    {</div>
<div class="line"><span class="lineno">  483</span>        T fMin = 0;</div>
<div class="line"><span class="lineno">  484</span>        <span class="keywordtype">long</span> <span class="keywordtype">long</span> iMin = -1;</div>
<div class="line"><span class="lineno">  485</span> </div>
<div class="line"><span class="lineno">  486</span>        <a class="code hl_function" href="#ad475dff5686f7f82472071000a542806">findMin</a>(ptSrc, fMin, iMin, iLength, bAbs);</div>
<div class="line"><span class="lineno">  487</span> </div>
<div class="line"><span class="lineno">  488</span>        <span class="keywordflow">return</span> fMin;</div>
<div class="line"><span class="lineno">  489</span>    }</div>
<div class="ttc" id="aa00505_xhtml_ad475dff5686f7f82472071000a542806"><div class="ttname"><a href="#ad475dff5686f7f82472071000a542806">CVector::findMin</a></div><div class="ttdeci">static void findMin(const T *ptSrc, T &amp;fMin, long long &amp;iMin, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00613">Vector.h:613</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00613">findMin()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00047_source.xhtml#l00074">CFeatureFromBlockIf::compFeatureSpectralFlatness()</a>, <a class="el" href="a00239_source.xhtml#l00062">CClassifierBase::compNormConstants()</a>, and <a class="el" href="a00113_source.xhtml#l00092">CKmeans::reinitClusterMeans_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a1f7f307c20239cfd2007393e2b3b26df_cgraph.svg" width="288" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a1f7f307c20239cfd2007393e2b3b26df_icgraph.svg" width="586" height="167"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="acba4c4298832abaf6ae306cef5990653" name="acba4c4298832abaf6ae306cef5990653"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba4c4298832abaf6ae306cef5990653">&#9670;&#160;</a></span>getRms()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::getRms </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>extracts the root mean square from a buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00497">497</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  498</span>    {</div>
<div class="line"><span class="lineno">  499</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  500</span> </div>
<div class="line"><span class="lineno">  501</span>        T fRms = 0;</div>
<div class="line"><span class="lineno">  502</span> </div>
<div class="line"><span class="lineno">  503</span> </div>
<div class="line"><span class="lineno">  504</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  505</span>        {</div>
<div class="line"><span class="lineno">  506</span>            fRms += ptSrc[i] * ptSrc[i];</div>
<div class="line"><span class="lineno">  507</span>        }</div>
<div class="line"><span class="lineno">  508</span> </div>
<div class="line"><span class="lineno">  509</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><span class="lineno">  510</span>        {</div>
<div class="line"><span class="lineno">  511</span>            fRms /= iLength;</div>
<div class="line"><span class="lineno">  512</span>        }</div>
<div class="line"><span class="lineno">  513</span> </div>
<div class="line"><span class="lineno">  514</span>        <span class="keywordflow">return</span> std::sqrt(fRms);</div>
<div class="line"><span class="lineno">  515</span>    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="ae2ed42101e3d7075f5dec265a23f3424" name="ae2ed42101e3d7075f5dec265a23f3424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae2ed42101e3d7075f5dec265a23f3424">&#9670;&#160;</a></span>getStd()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::getStd </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>fMean</em></span><span class="paramdefsep"> = </span><span class="paramdefval">std::numeric_limits&lt;T&gt;::max()</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>extracts the standard deviation (biased) from a buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements in buffer </td></tr>
    <tr><td class="paramname">fMean</td><td>mean value if it has already been computed, otherwise it will be extracted in function </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00524">524</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  525</span>    {</div>
<div class="line"><span class="lineno">  526</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  527</span> </div>
<div class="line"><span class="lineno">  528</span>        T  fStd = 0;</div>
<div class="line"><span class="lineno">  529</span> </div>
<div class="line"><span class="lineno">  530</span>        <span class="keywordflow">if</span> (fMean == std::numeric_limits&lt;T&gt;::max())</div>
<div class="line"><span class="lineno">  531</span>        {</div>
<div class="line"><span class="lineno">  532</span>            fMean = <a class="code hl_function" href="#ae6e3545cf196c5e2409365bc62b7c1de">getMean</a>(ptSrc, iLength);</div>
<div class="line"><span class="lineno">  533</span>        }</div>
<div class="line"><span class="lineno">  534</span> </div>
<div class="line"><span class="lineno">  535</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  536</span>        {</div>
<div class="line"><span class="lineno">  537</span>            fStd += (ptSrc[i] - fMean) * (ptSrc[i] - fMean);</div>
<div class="line"><span class="lineno">  538</span>        }</div>
<div class="line"><span class="lineno">  539</span> </div>
<div class="line"><span class="lineno">  540</span>        <span class="keywordflow">if</span> (iLength &gt; 1)</div>
<div class="line"><span class="lineno">  541</span>        {</div>
<div class="line"><span class="lineno">  542</span>            <span class="comment">//dStd   /= (iLength - 1);</span></div>
<div class="line"><span class="lineno">  543</span>            fStd /= iLength;</div>
<div class="line"><span class="lineno">  544</span>        }</div>
<div class="line"><span class="lineno">  545</span> </div>
<div class="line"><span class="lineno">  546</span>        <span class="keywordflow">return</span> std::sqrt(fStd);</div>
<div class="line"><span class="lineno">  547</span>    }</div>
<div class="ttc" id="aa00505_xhtml_ae6e3545cf196c5e2409365bc62b7c1de"><div class="ttname"><a href="#ae6e3545cf196c5e2409365bc62b7c1de">CVector::getMean</a></div><div class="ttdeci">static T getMean(const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00460">Vector.h:460</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00460">getMean()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00047_source.xhtml#l00308">CFeatureFromBlockIf::compFeatureTimeRms()</a>, <a class="el" href="a00047_source.xhtml#l00300">CFeatureFromBlockIf::compFeatureTimeStd()</a>, and <a class="el" href="a00239_source.xhtml#l00062">CClassifierBase::compNormConstants()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_ae2ed42101e3d7075f5dec265a23f3424_cgraph.svg" width="463" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_ae2ed42101e3d7075f5dec265a23f3424_icgraph.svg" width="615" height="199"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="abdbcc3898121387f3694f74491b7331e" name="abdbcc3898121387f3694f74491b7331e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdbcc3898121387f3694f74491b7331e">&#9670;&#160;</a></span>getSum()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::getSum </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a></td>          <td class="paramname"><span class="paramname"><em>bAbs</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="a00263.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>computes the sum of a vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc</td><td>vector </td></tr>
    <tr><td class="paramname">iLength</td><td>length of vector </td></tr>
    <tr><td class="paramname">bAbs</td><td>specifies whether it is the sum of absolute values or not </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00556">556</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  557</span>    {</div>
<div class="line"><span class="lineno">  558</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  559</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  560</span> </div>
<div class="line"><span class="lineno">  561</span>        T fResult = 0;</div>
<div class="line"><span class="lineno">  562</span>        <span class="keywordflow">if</span> (bAbs)</div>
<div class="line"><span class="lineno">  563</span>        {</div>
<div class="line"><span class="lineno">  564</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  565</span>                fResult += std::abs(ptSrc[i]);</div>
<div class="line"><span class="lineno">  566</span>        }</div>
<div class="line"><span class="lineno">  567</span>        <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  568</span>        {</div>
<div class="line"><span class="lineno">  569</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  570</span>                fResult += ptSrc[i];</div>
<div class="line"><span class="lineno">  571</span>        }</div>
<div class="line"><span class="lineno">  572</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><span class="lineno">  573</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00144">CKmeans::checkConverged_()</a>, <a class="el" href="a00044_source.xhtml#l00011">CKeyFromChroma::CKeyFromChroma()</a>, <a class="el" href="a00056_source.xhtml#l00030">CChordFromBlockIf::compChordProb()</a>, <a class="el" href="a00074_source.xhtml#l00355">CPitchTimeAmdf::compF0()</a>, <a class="el" href="a00047_source.xhtml#l00546">CFeatureSpectralPitchChroma::compFeature()</a>, <a class="el" href="a00047_source.xhtml#l00039">CFeatureFromBlockIf::compFeatureSpectralCrestFactor()</a>, <a class="el" href="a00047_source.xhtml#l00164">CFeatureFromBlockIf::compFeatureSpectralRolloff()</a>, <a class="el" href="a00044_source.xhtml#l00031">CKeyFromChroma::getKey()</a>, <a class="el" href="a00185_source.xhtml#l00460">getMean()</a>, <a class="el" href="a00188_source.xhtml#l00324">CMatrix::getSum()</a>, <a class="el" href="a00059_source.xhtml#l00419">CChordIf::initViterbi_()</a>, and <a class="el" href="a00071_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_abdbcc3898121387f3694f74491b7331e_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="ad1bfa2e2a6fc6da52c05ad9e0e1dea66" name="ad1bfa2e2a6fc6da52c05ad9e0e1dea66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1bfa2e2a6fc6da52c05ad9e0e1dea66">&#9670;&#160;</a></span>isEqual()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> CVector::isEqual </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>checks to buffer for equality (no floating point tolerance) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc1</td><td>buffer 1 </td></tr>
    <tr><td class="paramname">ptSrc2</td><td>buffer 2 </td></tr>
    <tr><td class="paramname">iLength</td><td>number of dimensions </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00676">676</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  677</span>    {</div>
<div class="line"><span class="lineno">  678</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  679</span>        assert(ptSrc1);</div>
<div class="line"><span class="lineno">  680</span>        assert(ptSrc2);</div>
<div class="line"><span class="lineno">  681</span> </div>
<div class="line"><span class="lineno">  682</span>        <span class="keywordflow">return</span> (memcmp(ptSrc1, ptSrc2, iLength * <span class="keyword">sizeof</span>(T)) == 0);</div>
<div class="line"><span class="lineno">  683</span>    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a7d2a655aca5f949e4c5909ec35b8c63c" name="a7d2a655aca5f949e4c5909ec35b8c63c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d2a655aca5f949e4c5909ec35b8c63c">&#9670;&#160;</a></span>moveInMem()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::moveInMem </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>iDestIdx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>isrcIdx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>moves a subset of the current buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>source and destination </td></tr>
    <tr><td class="paramname">iDestIdx</td><td>destination index </td></tr>
    <tr><td class="paramname">isrcIdx</td><td>source index </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements to be moved </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00070">70</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   71</span>    {</div>
<div class="line"><span class="lineno">   72</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">   73</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">   74</span> </div>
<div class="line"><span class="lineno">   75</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><span class="lineno">   76</span>            memmove(&amp;ptSrcDest[iDestIdx], &amp;ptSrcDest[isrcIdx], <span class="keyword">sizeof</span>(T) * iLength);</div>
<div class="line"><span class="lineno">   77</span>    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a5fb59528a3f5d3968f988d550b270898" name="a5fb59528a3f5d3968f988d550b270898"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fb59528a3f5d3968f988d550b270898">&#9670;&#160;</a></span>mul_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::mul_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>element-wise vector multiplication </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>one input and output buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>second input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be multiplied </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00229">229</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  230</span>    {</div>
<div class="line"><span class="lineno">  231</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  232</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  233</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  234</span> </div>
<div class="line"><span class="lineno">  235</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  236</span>            ptSrcDest[i] *= ptSrc[i];</div>
<div class="line"><span class="lineno">  237</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00091">CFft::compFft()</a>, <a class="el" href="a00098_source.xhtml#l00115">CFft::compInvFft()</a>, and <a class="el" href="a00239_source.xhtml#l00099">CClassifierBase::normalizeVector()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a5fb59528a3f5d3968f988d550b270898_icgraph.svg" width="100%" height="478"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a9811f50434dd058d201290b2dc98bfcd" name="a9811f50434dd058d201290b2dc98bfcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9811f50434dd058d201290b2dc98bfcd">&#9670;&#160;</a></span>mulC_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::mulC_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>fScale</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>multiplies a buffer with a scalar </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>buffer to be multiplied </td></tr>
    <tr><td class="paramname">fScale</td><td>scalar </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be multiplied </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00214">214</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  215</span>    {</div>
<div class="line"><span class="lineno">  216</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  217</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  218</span> </div>
<div class="line"><span class="lineno">  219</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  220</span>            ptSrcDest[i] *= fScale;</div>
<div class="line"><span class="lineno">  221</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00086_source.xhtml#l00148">CKnn::buildHistogram_()</a>, <a class="el" href="a00041_source.xhtml#l00205">CGammatone::calcFilterCoeffs_()</a>, <a class="el" href="a00092_source.xhtml#l00062">CCcf::compCcf()</a>, <a class="el" href="a00056_source.xhtml#l00030">CChordFromBlockIf::compChordProb()</a>, <a class="el" href="a00113_source.xhtml#l00125">CKmeans::compClusterMeans_()</a>, <a class="el" href="a00047_source.xhtml#l00546">CFeatureSpectralPitchChroma::compFeature()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00071_source.xhtml#l00117">CGmm::compProbabilities_()</a>, <a class="el" href="a00059_source.xhtml#l00360">CChordIf::computeMagSpectrum_()</a>, <a class="el" href="a00062_source.xhtml#l00313">CFeatureIf::computeMagSpectrum_()</a>, <a class="el" href="a00068_source.xhtml#l00207">CFingerprint::computeMagSpectrum_()</a>, <a class="el" href="a00116_source.xhtml#l00286">CNoveltyIf::computeMagSpectrum_()</a>, <a class="el" href="a00077_source.xhtml#l00261">CPitchIf::computeMagSpectrum_()</a>, <a class="el" href="a00035_source.xhtml#l00217">CSpectrogramIf::computeMagSpectrum_()</a>, <a class="el" href="a00098_source.xhtml#l00226">CFft::conjugate_I()</a>, <a class="el" href="a00188_source.xhtml#l00659">CMatrix::det()</a>, <a class="el" href="a00230_source.xhtml#l00018">CPreProc::downmix()</a>, <a class="el" href="a00047_source.xhtml#l00492">CFeatureSpectralMfccs::genDctMat_()</a>, <a class="el" href="a00044_source.xhtml#l00031">CKeyFromChroma::getKey()</a>, <a class="el" href="a00113_source.xhtml#l00111">CKmeans::initClusterMeans_()</a>, <a class="el" href="a00071_source.xhtml#l00093">CGmm::initState_()</a>, <a class="el" href="a00059_source.xhtml#l00419">CChordIf::initViterbi_()</a>, <a class="el" href="a00188_source.xhtml#l00751">CMatrix::inv_I()</a>, <a class="el" href="a00188_source.xhtml#l00498">CMatrix::mulC_I()</a>, <a class="el" href="a00230_source.xhtml#l00116">CNormalizeAudio::normalizeBlock()</a>, <a class="el" href="a00230_source.xhtml#l00128">CNormalizeAudio::normalizeSignal()</a>, <a class="el" href="a00212_source.xhtml#l00056">CInstFreq::process()</a>, and <a class="el" href="a00113_source.xhtml#l00092">CKmeans::reinitClusterMeans_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a9811f50434dd058d201290b2dc98bfcd_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a269d316eeb6000aac4f57ade32c83127" name="a269d316eeb6000aac4f57ade32c83127"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a269d316eeb6000aac4f57ade32c83127">&#9670;&#160;</a></span>mulScalar()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CVector::mulScalar </td>
          <td>(</td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc2</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>computes the scalar product between two vectors </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrc1</td><td>vector one </td></tr>
    <tr><td class="paramname">ptSrc2</td><td>vector two </td></tr>
    <tr><td class="paramname">iLength</td><td>number of dimenions </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>T </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00246">246</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  247</span>    {</div>
<div class="line"><span class="lineno">  248</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  249</span>        assert(ptSrc1);</div>
<div class="line"><span class="lineno">  250</span>        assert(ptSrc2);</div>
<div class="line"><span class="lineno">  251</span>        T  fResult = 0;</div>
<div class="line"><span class="lineno">  252</span> </div>
<div class="line"><span class="lineno">  253</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  254</span>            fResult += ptSrc1[i] * ptSrc2[i];</div>
<div class="line"><span class="lineno">  255</span> </div>
<div class="line"><span class="lineno">  256</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><span class="lineno">  257</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00092_source.xhtml#l00062">CCcf::compCcf()</a>, <a class="el" href="a00047_source.xhtml#l00402">CFeatureSpectralMfccs::compFeature()</a>, <a class="el" href="a00047_source.xhtml#l00283">CFeatureFromBlockIf::compFeatureTimeAcfCoeff()</a>, <a class="el" href="a00035_source.xhtml#l00333">CSpectrogramIf::compMelSpectrogram()</a>, <a class="el" href="a00071_source.xhtml#l00117">CGmm::compProbabilities_()</a>, <a class="el" href="a00185_source.xhtml#l00381">distCosine()</a>, <a class="el" href="a00185_source.xhtml#l00402">distEuclidean()</a>, <a class="el" href="a00071_source.xhtml#l00222">CGmmResult::getProb()</a>, <a class="el" href="a00188_source.xhtml#l00560">CMatrix::mulMatColvec()</a>, and <a class="el" href="a00071_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a269d316eeb6000aac4f57ade32c83127_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="af7cbe6ef61f8d3acc5d853af9ad58d48" name="af7cbe6ef61f8d3acc5d853af9ad58d48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7cbe6ef61f8d3acc5d853af9ad58d48">&#9670;&#160;</a></span>setRand()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::setRand </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>initializes the buffer with random noise </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>pointer to memory to be initialized </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements to be set </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00086">86</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   87</span>    {</div>
<div class="line"><span class="lineno">   88</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">   89</span>        assert(ptDest);</div>
<div class="line"><span class="lineno">   90</span> </div>
<div class="line"><span class="lineno">   91</span>        <a class="code hl_function" href="a00497.xhtml#a15807589621c539725afa2e8e6ea8ffc">CSynthesis::genNoise</a>(ptDest, iLength);</div>
<div class="line"><span class="lineno">   92</span>    }</div>
<div class="ttc" id="aa00497_xhtml_a15807589621c539725afa2e8e6ea8ffc"><div class="ttname"><a href="a00497.xhtml#a15807589621c539725afa2e8e6ea8ffc">CSynthesis::genNoise</a></div><div class="ttdeci">static Error_t genNoise(T *pfOutBuff, long long iLen, T fAmplitude=1., bool bOnlyPositive=true)</div><div class="ttdef"><b>Definition</b> <a href="a00194_source.xhtml#l00122">Synthesis.h:122</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00194_source.xhtml#l00122">CSynthesis::genNoise()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00188_source.xhtml#l00116">CMatrix::setRand()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_af7cbe6ef61f8d3acc5d853af9ad58d48_cgraph.svg" width="330" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_af7cbe6ef61f8d3acc5d853af9ad58d48_icgraph.svg" width="591" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4cf9544dd96801e3ee47fd1ef2049a1b" name="a4cf9544dd96801e3ee47fd1ef2049a1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cf9544dd96801e3ee47fd1ef2049a1b">&#9670;&#160;</a></span>setValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::setValue </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>tValue</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>initializes the buffer to a specific value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">tValue</td><td>value to use </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements to be set </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00100">100</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  101</span>    {</div>
<div class="line"><span class="lineno">  102</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  103</span>        assert(ptDest);</div>
<div class="line"><span class="lineno">  104</span> </div>
<div class="line"><span class="lineno">  105</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  106</span>            ptDest[i] = tValue;</div>
<div class="line"><span class="lineno">  107</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00086_source.xhtml#l00148">CKnn::buildHistogram_()</a>, <a class="el" href="a00239_source.xhtml#l00062">CClassifierBase::compNormConstants()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00053_source.xhtml#l00102">CViterbi::compProbability_()</a>, <a class="el" href="a00185_source.xhtml#l00640">findPeaks()</a>, <a class="el" href="a00038_source.xhtml#l00072">CSubFingerprint::genBands_()</a>, <a class="el" href="a00047_source.xhtml#l00596">CFeatureSpectralPitchChroma::genPcFilters_()</a>, <a class="el" href="a00059_source.xhtml#l00419">CChordIf::initViterbi_()</a>, <a class="el" href="a00029_source.xhtml#l00035">CSeqFeatureSel::process()</a>, and <a class="el" href="a00188_source.xhtml#l00151">CMatrix::setValue()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a4cf9544dd96801e3ee47fd1ef2049a1b_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a6dbb3f9f480568b60f7fe50090d20003" name="a6dbb3f9f480568b60f7fe50090d20003"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dbb3f9f480568b60f7fe50090d20003">&#9670;&#160;</a></span>setZero()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::setZero </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>sets a buffer to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>pointer to memory to be modified </td></tr>
    <tr><td class="paramname">iLength</td><td>buffer length </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00114">114</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  115</span>    {</div>
<div class="line"><span class="lineno">  116</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  117</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  118</span> </div>
<div class="line"><span class="lineno">  119</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><span class="lineno">  120</span>            memset(ptSrcDest, 0, <span class="keyword">sizeof</span>(T) * iLength);</div>
<div class="line"><span class="lineno">  121</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00185_source.xhtml#l00025">alloc()</a>, <a class="el" href="a00113_source.xhtml#l00162">CKmeans::assignClusterLabels_()</a>, <a class="el" href="a00086_source.xhtml#l00148">CKnn::buildHistogram_()</a>, <a class="el" href="a00197_source.xhtml#l00300">CButterLp::calcCoeffs()</a>, <a class="el" href="a00050_source.xhtml#l00015">CDtw::CDtw()</a>, <a class="el" href="a00047_source.xhtml#l00346">CFeatureSpectralFlux::CFeatureSpectralFlux()</a>, <a class="el" href="a00110_source.xhtml#l00114">CBeatHistoIf::compBeatHisto()</a>, <a class="el" href="a00056_source.xhtml#l00030">CChordFromBlockIf::compChordProb()</a>, <a class="el" href="a00050_source.xhtml#l00068">CDtw::compDtw()</a>, <a class="el" href="a00074_source.xhtml#l00106">CPitchSpectralHps::compF0()</a>, <a class="el" href="a00074_source.xhtml#l00263">CPitchTimeAuditory::compF0()</a>, <a class="el" href="a00047_source.xhtml#l00402">CFeatureSpectralMfccs::compFeature()</a>, <a class="el" href="a00047_source.xhtml#l00546">CFeatureSpectralPitchChroma::compFeature()</a>, <a class="el" href="a00098_source.xhtml#l00091">CFft::compFft()</a>, <a class="el" href="a00239_source.xhtml#l00062">CClassifierBase::compNormConstants()</a>, <a class="el" href="a00071_source.xhtml#l00117">CGmm::compProbabilities_()</a>, <a class="el" href="a00038_source.xhtml#l00035">CSubFingerprint::compSubFingerprint()</a>, <a class="el" href="a00065_source.xhtml#l00157">CBlockAudioBuffer::getNextBlock()</a>, <a class="el" href="a00065_source.xhtml#l00056">CBlockAudioFile::getNextBlock()</a>, <a class="el" href="a00197_source.xhtml#l00032">CFilter&lt; T &gt;::init()</a>, <a class="el" href="a00107_source.xhtml#l00010">CLeaveOneOutCrossVal::init()</a>, <a class="el" href="a00188_source.xhtml#l00618">CMatrix::mulRowvecMat()</a>, <a class="el" href="a00065_source.xhtml#l00091">CBlockAudioFile::readFile2RingBuff()</a>, <a class="el" href="a00197_source.xhtml#l00065">CFilter&lt; T &gt;::reset()</a>, <a class="el" href="a00095_source.xhtml#l00210">CNmfResult::reset()</a>, <a class="el" href="a00038_source.xhtml#l00061">CSubFingerprint::reset()</a>, <a class="el" href="a00188_source.xhtml#l00096">CMatrix::setEye()</a>, and <a class="el" href="a00188_source.xhtml#l00168">CMatrix::setZero()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a6dbb3f9f480568b60f7fe50090d20003_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="aba07261926b4c10ed7fdbe38edf6d16d" name="aba07261926b4c10ed7fdbe38edf6d16d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba07261926b4c10ed7fdbe38edf6d16d">&#9670;&#160;</a></span>setZeroBelowThresh()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::setZeroBelowThresh </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>tThresh</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>sets all values smaller than a threshold to 0 </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>pointer to memory to be modified </td></tr>
    <tr><td class="paramname">iLength</td><td>buffer length </td></tr>
    <tr><td class="paramname">tThresh</td><td>threshold value </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00129">129</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  130</span>    {</div>
<div class="line"><span class="lineno">  131</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  132</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  133</span> </div>
<div class="line"><span class="lineno">  134</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  135</span>            <span class="keywordflow">if</span> (ptSrcDest[i] &lt; tThresh)</div>
<div class="line"><span class="lineno">  136</span>                ptSrcDest[i] = 0;</div>
<div class="line"><span class="lineno">  137</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, and <a class="el" href="a00188_source.xhtml#l00186">CMatrix::setZeroBelowThresh()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_aba07261926b4c10ed7fdbe38edf6d16d_icgraph.svg" width="100%" height="364"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<a id="a63b8f3254518a67c10b7a5b2b3e0381f" name="a63b8f3254518a67c10b7a5b2b3e0381f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63b8f3254518a67c10b7a5b2b3e0381f">&#9670;&#160;</a></span>sort_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::sort_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *</td>          <td class="paramname"><span class="paramname"><em>piIndices</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00263.xhtml#abb452686968e48b67397da5f97445f5b">bool</a></td>          <td class="paramname"><span class="paramname"><em>bAscending</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="a00263.xhtml#a41f9c5fb8b08eb5dc3edce4dcb37fee7">true</a></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>sorts values in a buffer </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>buffer to be sorted </td></tr>
    <tr><td class="paramname">piIndices</td><td>new indices (optional, can be left 0) </td></tr>
    <tr><td class="paramname">iLength</td><td>number of elements to be sorted </td></tr>
    <tr><td class="paramname">bAscending</td><td>sort order (descending -&gt; false) </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00319">319</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  320</span>    {</div>
<div class="line"><span class="lineno">  321</span>        <span class="comment">// go bubble sort! ( should be replaced some time with something faster)</span></div>
<div class="line"><span class="lineno">  322</span> </div>
<div class="line"><span class="lineno">  323</span>        <span class="keywordtype">bool</span> bDone = <span class="keyword">false</span>; <span class="comment">// this flag will be used to check whether we have to continue the algorithm</span></div>
<div class="line"><span class="lineno">  324</span> </div>
<div class="line"><span class="lineno">  325</span>        <span class="comment">// initialize</span></div>
<div class="line"><span class="lineno">  326</span>        <span class="keywordflow">if</span> (piIndices)</div>
<div class="line"><span class="lineno">  327</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  328</span>                piIndices[i] = i;</div>
<div class="line"><span class="lineno">  329</span> </div>
<div class="line"><span class="lineno">  330</span>        <span class="keywordflow">if</span> (bAscending)</div>
<div class="line"><span class="lineno">  331</span>        {</div>
<div class="line"><span class="lineno">  332</span>            <span class="keywordflow">while</span> (!bDone)</div>
<div class="line"><span class="lineno">  333</span>            {</div>
<div class="line"><span class="lineno">  334</span>                bDone = <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  335</span> </div>
<div class="line"><span class="lineno">  336</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength - 1; i++)</div>
<div class="line"><span class="lineno">  337</span>                {</div>
<div class="line"><span class="lineno">  338</span>                    <span class="keywordflow">if</span> (ptSrcDest[i] &gt; ptSrcDest[i + 1]) <span class="comment">// compare the current element with the following one</span></div>
<div class="line"><span class="lineno">  339</span>                    {</div>
<div class="line"><span class="lineno">  340</span>                        <span class="comment">//swap them</span></div>
<div class="line"><span class="lineno">  341</span>                        <a class="code hl_function" href="a00501.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(ptSrcDest[i], ptSrcDest[i + 1]);</div>
<div class="line"><span class="lineno">  342</span>                        <span class="keywordflow">if</span> (piIndices)</div>
<div class="line"><span class="lineno">  343</span>                            <a class="code hl_function" href="a00501.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(piIndices[i], piIndices[i + 1]);</div>
<div class="line"><span class="lineno">  344</span> </div>
<div class="line"><span class="lineno">  345</span>                        bDone = <span class="keyword">false</span>; <span class="comment">// let&#39;s recheck the array</span></div>
<div class="line"><span class="lineno">  346</span>                    }</div>
<div class="line"><span class="lineno">  347</span>                }</div>
<div class="line"><span class="lineno">  348</span>            }</div>
<div class="line"><span class="lineno">  349</span>        }</div>
<div class="line"><span class="lineno">  350</span>        <span class="keywordflow">else</span> <span class="comment">// descending</span></div>
<div class="line"><span class="lineno">  351</span>        {</div>
<div class="line"><span class="lineno">  352</span>            <span class="keywordflow">while</span> (!bDone)</div>
<div class="line"><span class="lineno">  353</span>            {</div>
<div class="line"><span class="lineno">  354</span>                bDone = <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  355</span> </div>
<div class="line"><span class="lineno">  356</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength - 1; i++)</div>
<div class="line"><span class="lineno">  357</span>                {</div>
<div class="line"><span class="lineno">  358</span>                    <span class="keywordflow">if</span> (ptSrcDest[i] &lt; ptSrcDest[i + 1]) <span class="comment">// compare the current element with the following one</span></div>
<div class="line"><span class="lineno">  359</span>                    {</div>
<div class="line"><span class="lineno">  360</span>                        <span class="comment">//swap them</span></div>
<div class="line"><span class="lineno">  361</span>                        <a class="code hl_function" href="a00501.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(ptSrcDest[i], ptSrcDest[i + 1]);</div>
<div class="line"><span class="lineno">  362</span>                        <span class="keywordflow">if</span> (piIndices)</div>
<div class="line"><span class="lineno">  363</span>                            <a class="code hl_function" href="a00501.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(piIndices[i], piIndices[i + 1]);</div>
<div class="line"><span class="lineno">  364</span> </div>
<div class="line"><span class="lineno">  365</span>                        bDone = <span class="keyword">false</span>; <span class="comment">// let&#39;s recheck the array</span></div>
<div class="line"><span class="lineno">  366</span>                    }</div>
<div class="line"><span class="lineno">  367</span>                }</div>
<div class="line"><span class="lineno">  368</span>            }</div>
<div class="line"><span class="lineno">  369</span>        }</div>
<div class="line"><span class="lineno">  370</span>    }</div>
<div class="ttc" id="aa00501_xhtml_a4518cf65aacb5732281b35ee427d0fc2"><div class="ttname"><a href="a00501.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a></div><div class="ttdeci">static void swap(T &amp;tValue1, T &amp;tValue2)</div><div class="ttdef"><b>Definition</b> <a href="a00191_source.xhtml#l00072">Util.h:72</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00191_source.xhtml#l00072">CUtil::swap()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00086_source.xhtml#l00113">CKnn::classify()</a>, and <a class="el" href="a00032_source.xhtml#l00039">CPca::compPca()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a63b8f3254518a67c10b7a5b2b3e0381f_cgraph.svg" width="254" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a63b8f3254518a67c10b7a5b2b3e0381f_icgraph.svg" width="280" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a39329371d828db80c2f0ad037074c998" name="a39329371d828db80c2f0ad037074c998"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39329371d828db80c2f0ad037074c998">&#9670;&#160;</a></span>sub_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::sub_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>element-wise vector subtraction </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>one input and output buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>second input buffer </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be subtracted </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00265">265</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  266</span>    {</div>
<div class="line"><span class="lineno">  267</span>        assert(iLength &gt;= 0);</div>
<div class="line"><span class="lineno">  268</span>        assert(ptSrcDest);</div>
<div class="line"><span class="lineno">  269</span>        assert(ptSrc);</div>
<div class="line"><span class="lineno">  270</span> </div>
<div class="line"><span class="lineno">  271</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><span class="lineno">  272</span>            ptSrcDest[i] -= ptSrc[i];</div>
<div class="line"><span class="lineno">  273</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00144">CKmeans::checkConverged_()</a>, <a class="el" href="a00116_source.xhtml#l00186">CNoveltyIf::compNovelty()</a>, <a class="el" href="a00071_source.xhtml#l00222">CGmmResult::getProb()</a>, <a class="el" href="a00239_source.xhtml#l00099">CClassifierBase::normalizeVector()</a>, and <a class="el" href="a00212_source.xhtml#l00056">CInstFreq::process()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a39329371d828db80c2f0ad037074c998_icgraph.svg" width="567" height="287"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

</div>
</div>
<a id="a4e5b5163bb46b8de5ac4013bde1ded00" name="a4e5b5163bb46b8de5ac4013bde1ded00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e5b5163bb46b8de5ac4013bde1ded00">&#9670;&#160;</a></span>subW_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CVector::subW_I </td>
          <td>(</td>
          <td class="paramtype">T *</td>          <td class="paramname"><span class="paramname"><em>ptSrcDest</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *</td>          <td class="paramname"><span class="paramname"><em>ptSrc</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T</td>          <td class="paramname"><span class="paramname"><em>fWeight</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long int</td>          <td class="paramname"><span class="paramname"><em>iLength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel inline">inline</span><span class="mlabel static">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>weighted element-wise vector subtraction </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptSrcDest</td><td>one input and output buffer </td></tr>
    <tr><td class="paramname">ptSrc</td><td>second input buffer </td></tr>
    <tr><td class="paramname">fWeight</td><td>weight to be applied to ptSrc entries </td></tr>
    <tr><td class="paramname">iLength</td><td>number of element to be subtracted </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00185_source.xhtml#l00282">282</a> of file <a class="el" href="a00185_source.xhtml">Vector.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  283</span>    {</div>
<div class="line"><span class="lineno">  284</span>        <a class="code hl_function" href="#a2239b170d46ed3d0846d766a0634a0be">addW_I</a>(ptSrcDest, ptSrc, -fWeight, iLength);</div>
<div class="line"><span class="lineno">  285</span>    }</div>
<div class="ttc" id="aa00505_xhtml_a2239b170d46ed3d0846d766a0634a0be"><div class="ttname"><a href="#a2239b170d46ed3d0846d766a0634a0be">CVector::addW_I</a></div><div class="ttdeci">static void addW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition</b> <a href="a00185_source.xhtml#l00179">Vector.h:179</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00179">addW_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00188_source.xhtml#l00751">CMatrix::inv_I()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00505_a4e5b5163bb46b8de5ac4013bde1ded00_cgraph.svg" width="296" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00505_a4e5b5163bb46b8de5ac4013bde1ded00_icgraph.svg" width="100%" height="438"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="a00185_source.xhtml">Vector.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00505.xhtml">CVector</a></li>
    <li class="footer">Generated on Sat Jan 11 2025 18:25:09 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.13.1 </li>
  </ul>
</div>
</body>
</html>
