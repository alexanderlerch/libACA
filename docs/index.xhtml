<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: ACA</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.2.8</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('index.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div><div class="header">
  <div class="headertitle"><div class="title">ACA </div></div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p ><a class="anchor" id="md__github_workspace_README"></a> <img src="https://img.shields.io/github/languages/top/alexanderlerch/libACA" alt="GitHub top language" class="inline"/> <img src="https://img.shields.io/github/issues-raw/alexanderlerch/libACA" alt="GitHub issues" class="inline"/> <a href="https://github.com/alexanderlerch/libACA/actions/workflows/cmake.yml"><img src="https://github.com/alexanderlerch/libACA/actions/workflows/cmake.yml/badge.svg" alt="Tests" style="pointer-events: none;" class="inline"/></a> <img src="https://img.shields.io/github/last-commit/alexanderlerch/libACA" alt="GitHub last commit" class="inline"/> <img src="https://img.shields.io/github/license/alexanderlerch/libACA" alt="GitHub" class="inline"/></p>
<h1><a class="anchor" id="autotoc_md0"></a>
libACA</h1>
<p >C++ code accompanying the book <a href="https://www.AudioContentAnalysis.org">"An Introduction to Audio Content Analysis"</a>. The source code shows example implementations of basic approaches, features, and algorithms for music audio content analysis.</p>
<p >All implementations are also available in:</p><ul>
<li><a href="https://github.com/alexanderlerch/ACA-Code">Matlab: ACA-Code</a></li>
<li><a href="https://github.com/alexanderlerch/pyACA">Python: pyACA</a></li>
</ul>
<h1><a class="anchor" id="autotoc_md1"></a>
overview</h1>
<h2><a class="anchor" id="autotoc_md2"></a>
directory structure</h2>
<div class="fragment"><div class="line">|_ 3rdparty: 3rd party dependencies</div>
<div class="line">  |_ Fft: simple Fft source code (Toth Laszlo)</div>
<div class="line">  |_ sndlib: sndfile library (c library for file IO: https://ccrma.stanford.edu/software/snd/sndlib/)</div>
<div class="line">  |_ chat2: catch2 testing header (https://github.com/catchorg/Catch2)</div>
<div class="line">|_ cmake.modules: cmake scripts</div>
<div class="line">|_ inc: headers</div>
<div class="line">  |_ helpers: more headers for internal use</div>
<div class="line">|_ src: source code</div>
<div class="line">  |_ ACA: core library </div>
<div class="line">  |_ AudioFileIO: library wrapping sndfile (3rdparty)</div>
<div class="line">  |_ ComputeBeatHisto: demo executable for beat histogram extraction </div>
<div class="line">  |_ ComputeChords: demo executable for chord extraction </div>
<div class="line">  |_ ComputeFeature: demo executable for feature extraction </div>
<div class="line">  |_ ComputeFingerprint: demo executable for audio fingerprint extraction </div>
<div class="line">  |_ ComputeKey: demo executable for key detection </div>
<div class="line">  |_ ComputeMelSpectrogram: demo executable for mel spectrogram extraction </div>
<div class="line">  |_ ComputeNoveltyFunction: demo executable for novelty function and onset extraction </div>
<div class="line">  |_ ComputePitch: demo executable for monophonic f0 extraction </div>
<div class="line">  |_ ComputeSpectrogram: demo executable for spectrogram extraction </div>
<div class="line">  |_ Tests: all code related to tests</div>
<div class="line">      |_ TestData: data for specific tests possibly requiring data</div>
<div class="line">      |_ TestExec: test executable</div>
<div class="line">      |_ Tests: individual test implementations </div>
</div><!-- fragment --> <h2><a class="anchor" id="autotoc_md3"></a>
functionality</h2>
<p >The library libACA offers simple implementations of basic audio content analysis algorithms, including low level audio features, different f0 extractors, as well as simple approaches to chord, musical key detection, and onset detection. It also offers implementations of multiple generic algorithms useful in audio content analysis such as , Dynamic Time Warping (DTW), K Nearest Neighbor classification, Gaussian Mixture Model, Sequential Forward Feature Selection, Viterbi algorithm, Principal Component Analysis, Non negative Matrix Factorization, various conversion functions.</p>
<p >As the implementation aims at providing an accessible code base to foster understanding of algorithms presented in the text book, there are necessarily compromises to be made between readability, performance, memory efficiency, and structure.</p>
<h1><a class="anchor" id="autotoc_md4"></a>
getting started</h1>
<p >If this is your first glance at this project, it might be helpful to visit the <a href="https://github.com/alexanderlerch/ACA-Code">Matlab: ACA-Code</a> or <a href="https://github.com/alexanderlerch/pyACA">Python: pyACA</a> repositories of the same algorithms first. Projects and source code in these languages are often more compact and thus more easily accessible.</p>
<p >Each folder in the src directory is a build target. All algorithmic implementations which compile into the actualy libACA library can be found in the source directory <a href="https://github.com/alexanderlerch/libACA/tree/main/src/ACA">./src/ACA</a> with the corresponding header files in <a href="https://github.com/alexanderlerch/libACA/tree/main/inc">./inc</a>. All folders starting with 'Compute' are executable targets that can be run from the command line. The 'Test' folder contains the test executable.</p>
<h2><a class="anchor" id="autotoc_md5"></a>
creating the project files with CMake</h2>
<p >The project files are generated through <a href="https://www.cmake.org">CMake</a>. Using the latest CMake GUI,</p><ul>
<li>point the source code directory to the top-level project directly, then</li>
<li>set the build directory to some directory you like (suggestion: sourcedir/bld),</li>
<li>hit 'Configure' button until nothing is red, then</li>
<li>'Generate' the project and open it with your IDE. In case there are any problems, try clearing the cache first.</li>
</ul>
<p >On the command line, try from the sourcedir</p>
<div class="fragment"><div class="line">cmake -B ./bld/ </div>
<div class="line">cmake --build ./bld/ </div>
</div><!-- fragment --><p> Enable <code>WITH_TESTS</code> to build with Catch2 support and <code>WITH_DOXYGENTARGET</code> to add a target for creating a doxygen documentation for your project.</p>
<p >If new files are added, clear the cache and rerun configuration and generation.</p>
<h2><a class="anchor" id="autotoc_md6"></a>
running the tests with CTest</h2>
<p >Enable <code>WITH_TESTS</code> (enabled by default) to build with Catch2 support.</p>
<p >On the command line, try from the sourcedir </p><div class="fragment"><div class="line">cd bld/ </div>
<div class="line">ctest</div>
</div><!-- fragment --><p> In the IDE, you can either build the <code>RUN_TESTS</code> or execute <code>TestExec</code>.</p>
<h2><a class="anchor" id="autotoc_md7"></a>
documentation</h2>
<p >The latest automatically generated <a href="https://www.doxygen.nl">Doxygen</a> documentation of this package can be found at <a href="https://alexanderlerch.github.io/libACA">https://alexanderlerch.github.io/libACA</a>.</p>
<h2><a class="anchor" id="autotoc_md8"></a>
code examples</h2>
<p >While the code is intended for reading or as easy-to-understand reference implementation, the executables showcase some simple entry points for the core functionality offered.</p>
<h3><a class="anchor" id="autotoc_md9"></a>
feature extraction: spectral centroid</h3>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="a00242.xhtml">Feature.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// declarations</span></div>
<div class="line"><a class="code hl_class" href="a00466.xhtml">CFeatureIf</a>* pCInstance = 0; <span class="comment">//!&lt; new instance of the Feature Interface class</span></div>
<div class="line"><a class="code hl_enumeration" href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3">CFeatureIf::Feature_t</a> eFeatureIdx = <a class="code hl_enumvalue" href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3af835ba1196c45135d5b2c14bd71765fe">CFeatureIf::kFeatureSpectralCentroid</a>; <span class="comment">//!&lt; specifies feature to extract</span></div>
<div class="line">std::string sInputFilePath = <span class="stringliteral">&quot;testname.wav&quot;</span>; <span class="comment">//!&lt; input file path</span></div>
<div class="line"><span class="keywordtype">int</span> aiFeatureDimensions[2] = { 0,0 }; <span class="comment">//!&lt; resulting feature matrix dimension</span></div>
<div class="line"><span class="keywordtype">float</span>* pfFeature = 0; <span class="comment">//!&lt; feature result</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// create instance</span></div>
<div class="line"><a class="code hl_function" href="a00466.xhtml#af448569c0950f36034d84326d564cce9">CFeatureIf::create</a>(pCInstance, eFeatureIdx, sInputFilePath);</div>
<div class="line">pCInstance-&gt;<a class="code hl_function" href="a00466.xhtml#ad7e4c2c40aa96ea2d91eafffcde0608a">getFeatureDimensions</a>(aiFeatureDimensions[0], aiFeatureDimensions[1]);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// allocate memory</span></div>
<div class="line">ppfFeature = <span class="keyword">new</span> <span class="keywordtype">float</span> [aiFeatureDimensions[1]];</div>
<div class="line">    </div>
<div class="line"><span class="comment">// extract feature</span></div>
<div class="line">pCInstance-&gt;<a class="code hl_function" href="a00466.xhtml#a30248aa1fb336095d4d86d0bd3d2bdb8">compFeature1Dim</a>(ppfFeature[0]);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// clean-up </span></div>
<div class="line"><a class="code hl_function" href="a00466.xhtml#ab0b833a2f828e941e08f84a47dcfcda8">CFeatureIf::destroy</a>(pCInstance);</div>
<div class="line"><span class="keyword">delete</span>[] pfFeature;</div>
<div class="ttc" id="aa00242_xhtml"><div class="ttname"><a href="a00242.xhtml">Feature.h</a></div></div>
<div class="ttc" id="aa00466_xhtml"><div class="ttname"><a href="a00466.xhtml">CFeatureIf</a></div><div class="ttdoc">class for computation of a magnitude Feature from either a file or a vector</div><div class="ttdef"><b>Definition:</b> <a href="a00242_source.xhtml#l00017">Feature.h:18</a></div></div>
<div class="ttc" id="aa00466_xhtml_a30248aa1fb336095d4d86d0bd3d2bdb8"><div class="ttname"><a href="a00466.xhtml#a30248aa1fb336095d4d86d0bd3d2bdb8">CFeatureIf::compFeature1Dim</a></div><div class="ttdeci">Error_t compFeature1Dim(float *pfFeature)</div><div class="ttdef"><b>Definition:</b> <a href="a00053_source.xhtml#l00179">Feature.cpp:179</a></div></div>
<div class="ttc" id="aa00466_xhtml_a47ca14941c604beb42d60164b3e5e6b3"><div class="ttname"><a href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3">CFeatureIf::Feature_t</a></div><div class="ttdeci">Feature_t</div><div class="ttdoc">enum to index all features note: update CFeatureIf::isFeatureSpectral_() when modifying</div><div class="ttdef"><b>Definition:</b> <a href="a00242_source.xhtml#l00023">Feature.h:24</a></div></div>
<div class="ttc" id="aa00466_xhtml_a47ca14941c604beb42d60164b3e5e6b3af835ba1196c45135d5b2c14bd71765fe"><div class="ttname"><a href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3af835ba1196c45135d5b2c14bd71765fe">CFeatureIf::kFeatureSpectralCentroid</a></div><div class="ttdeci">@ kFeatureSpectralCentroid</div><div class="ttdef"><b>Definition:</b> <a href="a00242_source.xhtml#l00025">Feature.h:25</a></div></div>
<div class="ttc" id="aa00466_xhtml_ab0b833a2f828e941e08f84a47dcfcda8"><div class="ttname"><a href="a00466.xhtml#ab0b833a2f828e941e08f84a47dcfcda8">CFeatureIf::destroy</a></div><div class="ttdeci">static Error_t destroy(CFeatureIf *&amp;pCInstance)</div><div class="ttdef"><b>Definition:</b> <a href="a00053_source.xhtml#l00130">Feature.cpp:130</a></div></div>
<div class="ttc" id="aa00466_xhtml_ad7e4c2c40aa96ea2d91eafffcde0608a"><div class="ttname"><a href="a00466.xhtml#ad7e4c2c40aa96ea2d91eafffcde0608a">CFeatureIf::getFeatureDimensions</a></div><div class="ttdeci">Error_t getFeatureDimensions(int &amp;iNumRows, int &amp;iNumCols) const</div><div class="ttdef"><b>Definition:</b> <a href="a00053_source.xhtml#l00138">Feature.cpp:138</a></div></div>
<div class="ttc" id="aa00466_xhtml_af448569c0950f36034d84326d564cce9"><div class="ttname"><a href="a00466.xhtml#af448569c0950f36034d84326d564cce9">CFeatureIf::create</a></div><div class="ttdeci">static Error_t create(CFeatureIf *&amp;pCInstance, Feature_t eFeatureIdx, const std::string &amp;strAudioFilePath, int iBlockLength=2048, int iHopLength=1024)</div><div class="ttdef"><b>Definition:</b> <a href="a00053_source.xhtml#l00097">Feature.cpp:97</a></div></div>
</div><!-- fragment --> <h3><a class="anchor" id="autotoc_md10"></a>
feature extraction: pitch chroma</h3>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="a00242.xhtml">Feature.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// declarations</span></div>
<div class="line"><a class="code hl_class" href="a00466.xhtml">CFeatureIf</a>* pCInstance = 0; <span class="comment">//!&lt; new instance of the Feature Interface class</span></div>
<div class="line"><a class="code hl_enumeration" href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3">CFeatureIf::Feature_t</a> eFeatureIdx = <a class="code hl_enumvalue" href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3a6cca75d6d116b2284ae19d2b75093198">CFeatureIf::kFeatureSpectralPitchChroma</a>; <span class="comment">//!&lt; specifies feature to extract</span></div>
<div class="line">std::string sInputFilePath = <span class="stringliteral">&quot;testname.wav&quot;</span>; <span class="comment">//!&lt; input file path</span></div>
<div class="line"><span class="keywordtype">int</span> aiFeatureDimensions[2] = { 0,0 }; <span class="comment">//!&lt; resulting feature matrix dimension</span></div>
<div class="line"><span class="keywordtype">float</span>** ppfFeature = 0; <span class="comment">//!&lt; feature result</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// create instance</span></div>
<div class="line"><a class="code hl_function" href="a00466.xhtml#af448569c0950f36034d84326d564cce9">CFeatureIf::create</a>(pCInstance, eFeatureIdx, sInputFilePath);</div>
<div class="line">pCInstance-&gt;<a class="code hl_function" href="a00466.xhtml#ad7e4c2c40aa96ea2d91eafffcde0608a">getFeatureDimensions</a>(aiFeatureDimensions[0], aiFeatureDimensions[1]);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// allocate memory</span></div>
<div class="line">ppfFeature = <span class="keyword">new</span> <span class="keywordtype">float</span>* [aiFeatureDimensions[0]];</div>
<div class="line"><span class="keywordflow">for</span> (<span class="keyword">auto</span> k = 0; k &lt; aiFeatureDimensions[0]; k++)</div>
<div class="line">    ppfFeature[k] = <span class="keyword">new</span> <span class="keywordtype">float</span>[aiFeatureDimensions[1]];</div>
<div class="line">    </div>
<div class="line"><span class="comment">// extract feature</span></div>
<div class="line">pCInstance-&gt;<a class="code hl_function" href="a00466.xhtml#ad734d1e300583449f51e6ca80aa3e7b8">compFeatureNDim</a>(ppfFeature);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// clean-up </span></div>
<div class="line"><a class="code hl_function" href="a00466.xhtml#ab0b833a2f828e941e08f84a47dcfcda8">CFeatureIf::destroy</a>(pCInstance);</div>
<div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 0; k &lt; aiFeatureDimensions[0]; k++)</div>
<div class="line">    <span class="keyword">delete</span>[] ppfFeature[k];</div>
<div class="line"><span class="keyword">delete</span>[] ppfFeature;</div>
<div class="ttc" id="aa00466_xhtml_a47ca14941c604beb42d60164b3e5e6b3a6cca75d6d116b2284ae19d2b75093198"><div class="ttname"><a href="a00466.xhtml#a47ca14941c604beb42d60164b3e5e6b3a6cca75d6d116b2284ae19d2b75093198">CFeatureIf::kFeatureSpectralPitchChroma</a></div><div class="ttdeci">@ kFeatureSpectralPitchChroma</div><div class="ttdef"><b>Definition:</b> <a href="a00242_source.xhtml#l00032">Feature.h:32</a></div></div>
<div class="ttc" id="aa00466_xhtml_ad734d1e300583449f51e6ca80aa3e7b8"><div class="ttname"><a href="a00466.xhtml#ad734d1e300583449f51e6ca80aa3e7b8">CFeatureIf::compFeatureNDim</a></div><div class="ttdeci">Error_t compFeatureNDim(float **ppfFeature)</div><div class="ttdef"><b>Definition:</b> <a href="a00053_source.xhtml#l00213">Feature.cpp:213</a></div></div>
</div><!-- fragment --> <h3><a class="anchor" id="autotoc_md11"></a>
key detection</h3>
<div class="fragment"><div class="line"><span class="preprocessor">#include &quot;<a class="code" href="a00161.xhtml">Key.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// declarations</span></div>
<div class="line"><a class="code hl_class" href="a00506.xhtml">CKey</a>* pCInstance = <span class="keyword">new</span> <a class="code hl_class" href="a00506.xhtml">CKey</a>(); <span class="comment">//!&lt; new instance of the Feature Interface class</span></div>
<div class="line">std::string sInputFilePath = <span class="stringliteral">&quot;testname.wav&quot;</span>; <span class="comment">//!&lt; input file path</span></div>
<div class="line"><span class="keywordtype">int</span> iKeyRes = -1; <span class="comment">//!&lt; index of the resulting key</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// init instance</span></div>
<div class="line">pCInstance-&gt;<a class="code hl_function" href="a00506.xhtml#af59151b6c619ef658f01e80dc47d6946">init</a>(sInputFilePath);</div>
<div class="line"> </div>
<div class="line"><span class="comment">// compute key</span></div>
<div class="line">iKeyRes = pCInstance-&gt;<a class="code hl_function" href="a00506.xhtml#a343e6b52e9696244dd57d4db0f91d056">compKey</a>();</div>
<div class="line"> </div>
<div class="line"><span class="comment">// print result</span></div>
<div class="line">cout &lt;&lt; <span class="stringliteral">&quot;detected key: &quot;</span> &lt;&lt; pCInstance-&gt;<a class="code hl_function" href="a00506.xhtml#a37ae803d82401e3f0b7d6c5944a014f1">getKeyString</a>(<span class="keyword">static_cast&lt;</span><a class="code hl_enumeration" href="a00506.xhtml#a3b1e9102e9dc61abfc81f9d6d4717736">CKey::Keys_t</a><span class="keyword">&gt;</span>(iKeyRes))&lt;&lt; endl;</div>
<div class="line">    </div>
<div class="line"><span class="comment">// clean-up </span></div>
<div class="line">CKey::destroy(pCInstance);</div>
<div class="ttc" id="aa00161_xhtml"><div class="ttname"><a href="a00161.xhtml">Key.h</a></div></div>
<div class="ttc" id="aa00506_xhtml"><div class="ttname"><a href="a00506.xhtml">CKey</a></div><div class="ttdoc">class for computation of the key from either a file or a vector</div><div class="ttdef"><b>Definition:</b> <a href="a00161_source.xhtml#l00014">Key.h:15</a></div></div>
<div class="ttc" id="aa00506_xhtml_a343e6b52e9696244dd57d4db0f91d056"><div class="ttname"><a href="a00506.xhtml#a343e6b52e9696244dd57d4db0f91d056">CKey::compKey</a></div><div class="ttdeci">int compKey()</div><div class="ttdef"><b>Definition:</b> <a href="a00062_source.xhtml#l00081">Key.cpp:81</a></div></div>
<div class="ttc" id="aa00506_xhtml_a37ae803d82401e3f0b7d6c5944a014f1"><div class="ttname"><a href="a00506.xhtml#a37ae803d82401e3f0b7d6c5944a014f1">CKey::getKeyString</a></div><div class="ttdeci">static std::string getKeyString(Keys_t eKeyIdx)</div><div class="ttdef"><b>Definition:</b> <a href="a00062_source.xhtml#l00104">Key.cpp:104</a></div></div>
<div class="ttc" id="aa00506_xhtml_a3b1e9102e9dc61abfc81f9d6d4717736"><div class="ttname"><a href="a00506.xhtml#a3b1e9102e9dc61abfc81f9d6d4717736">CKey::Keys_t</a></div><div class="ttdeci">Keys_t</div><div class="ttdef"><b>Definition:</b> <a href="a00161_source.xhtml#l00020">Key.h:21</a></div></div>
<div class="ttc" id="aa00506_xhtml_af59151b6c619ef658f01e80dc47d6946"><div class="ttname"><a href="a00506.xhtml#af59151b6c619ef658f01e80dc47d6946">CKey::init</a></div><div class="ttdeci">Error_t init(const std::string &amp;strAudioFilePath, int iBlockLength=4096, int iHopLength=2048)</div><div class="ttdef"><b>Definition:</b> <a href="a00062_source.xhtml#l00022">Key.cpp:22</a></div></div>
</div><!-- fragment --> <h1><a class="anchor" id="autotoc_md12"></a>
design principles</h1>
<p >C++ is not the most convenient language for explaining algorithmic concepts. Other languages such as Python or Matlab are better suited for this taks. Audio applications and especially applications capable of real-time processing, however, often require implementation in a language such as C++, as do many embedded applications. The source code of a C++ implementation often gives the reader a better estimate of algorithmic complexity and required memory than with a high-level language, as long as too many 3rd Party dependencies are avoided.</p>
<h2><a class="anchor" id="autotoc_md13"></a>
accessibility</h2>
<p >readability, flat class hierarchies, descriptive variable names</p>
<h2><a class="anchor" id="autotoc_md14"></a>
C++11 compatibility</h2>
<h2><a class="anchor" id="autotoc_md15"></a>
optimization vs. memory allocation vs. readability</h2>
<h1><a class="anchor" id="autotoc_md16"></a>
other information</h1>
<h2><a class="anchor" id="autotoc_md17"></a>
text book</h2>
<p >The textbook "An Introduction to Audio Content Analysis" might be available free of charge to you if your library has subscribed to the <a href="https://ieeexplore.ieee.org/book/6266785">IEEE</a> library. It introduces the field and applications of audio content analysis, explains basic principles, describes a superset of the algorithms in this repository, and provides numerous references that allow the reader to quickly dig deeper into each topic if required.</p>
<h2><a class="anchor" id="autotoc_md18"></a>
slides</h2>
<p >Lecture slides linked to the text book content, accompanied by the latex source files can be found in (this repository}[<a href="https:://www.github.com/alexanderlerch/ACA-Slides">https:://www.github.com/alexanderlerch/ACA-Slides</a>].</p>
<h2><a class="anchor" id="autotoc_md19"></a>
video lectures</h2>
<p >Video lectures, albeit a somewhat outdated and accompanying a previous edition, can be found on <a href="https://www.audiocontentanalysis.org/class">audiocontentanalysis.org</a>.</p>
<h2><a class="anchor" id="autotoc_md20"></a>
datasets</h2>
<p >A list of useful datasets for audio content analysis focused on music and music information retrieval in general can be found on <a href="https://www.audiocontentanalysis.org/data-sets">audiocontentanalysis.org</a>.</p>
<h2><a class="anchor" id="autotoc_md21"></a>
license</h2>
<p >libACA is licensed under an <a href="https://github.com/alexanderlerch/libACA/blob/main/LICENSE">MIT license</a>. </p>
</div></div><!-- PageDoc -->
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Thu Jun 16 2022 21:11:13 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
