<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.5"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: CNoveltyIf Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.3.1</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.5 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search/",'.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a00514.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="a00511.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">CNoveltyIf Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>class for computation of a magnitude Novelty from either a file or a vector  
 <a href="a00514.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00206_source.xhtml">Novelty.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for CNoveltyIf:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00513.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div class="dynheader">
Collaboration diagram for CNoveltyIf:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00512.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aaaa808da8acb1f5df095f6178faeb4f4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a> { <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38">kNoveltyFlux</a>
, <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e">kNoveltyHainsworth</a>
, <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c">kNoveltyLaroche</a>
, <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c">kNumNoveltyFunctions</a>
 }</td></tr>
<tr class="memdesc:aaaa808da8acb1f5df095f6178faeb4f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">enum to index all Noveltys note: update CNoveltyIf::isNoveltySpectral_() when modifying  <a href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">More...</a><br /></td></tr>
<tr class="separator:aaaa808da8acb1f5df095f6178faeb4f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa4193070cac8cac64ad8dc222fb612e8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#aa4193070cac8cac64ad8dc222fb612e8">getNumBlocks</a> (int &amp;iNumBlocks) const</td></tr>
<tr class="separator:aa4193070cac8cac64ad8dc222fb612e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2957fc23663fb6b67fabb6ecda9ae0bd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a2957fc23663fb6b67fabb6ecda9ae0bd">getNumBlocks</a> () const</td></tr>
<tr class="separator:a2957fc23663fb6b67fabb6ecda9ae0bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97fd24dca5d494d038486b7c6cb74cce"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a97fd24dca5d494d038486b7c6cb74cce">getTimeStamp</a> (int iBlockIdx) const</td></tr>
<tr class="separator:a97fd24dca5d494d038486b7c6cb74cce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeb1d21ee59d7f745fca0e22ab33a65b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#afeb1d21ee59d7f745fca0e22ab33a65b">getTimeStamps</a> (float *pfAxisTicks) const</td></tr>
<tr class="separator:afeb1d21ee59d7f745fca0e22ab33a65b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f110985f86064fa24aa3157bfd5cab0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a9f110985f86064fa24aa3157bfd5cab0">compNovelty</a> (float *pfNovelty, <a class="el" href="a00269.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> *pbisOnset=0)</td></tr>
<tr class="separator:a9f110985f86064fa24aa3157bfd5cab0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:abae299cfe8e8806685cab18f59db8f72"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#abae299cfe8e8806685cab18f59db8f72">create</a> (<a class="el" href="a00514.xhtml">CNoveltyIf</a> *&amp;pCInstance, <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a> eNoveltyIdx, const std::string &amp;strAudioFilePath, int iBlockLength=4096, int iHopLength=512)</td></tr>
<tr class="separator:abae299cfe8e8806685cab18f59db8f72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7460e2359d7ab321ef8517ac93466fb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#aa7460e2359d7ab321ef8517ac93466fb">create</a> (<a class="el" href="a00514.xhtml">CNoveltyIf</a> *&amp;pCInstance, <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a> eNoveltyIdx, const float *pfAudio, long long iNumSamples, float fSampleRate, int iBlockLength=4096, int iHopLength=512)</td></tr>
<tr class="separator:aa7460e2359d7ab321ef8517ac93466fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa078a8242089a58179280c824f8ca4f9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#aa078a8242089a58179280c824f8ca4f9">destroy</a> (<a class="el" href="a00514.xhtml">CNoveltyIf</a> *&amp;pCInstance)</td></tr>
<tr class="separator:aa078a8242089a58179280c824f8ca4f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c2bdc36b4e569dcf3a229d5bb931e12"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a2c2bdc36b4e569dcf3a229d5bb931e12">getNoveltyString</a> (<a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a> eNoveltyIdx)</td></tr>
<tr class="separator:a2c2bdc36b4e569dcf3a229d5bb931e12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8d7e7b4f827b2c4e675c252cee9ca14"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#ad8d7e7b4f827b2c4e675c252cee9ca14">getNoveltyIdxFromString</a> (std::string sNoveltyString)</td></tr>
<tr class="separator:ad8d7e7b4f827b2c4e675c252cee9ca14"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a120b69bf1f92d3f00ef515518a9dc604"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a120b69bf1f92d3f00ef515518a9dc604">CNoveltyIf</a> ()</td></tr>
<tr class="separator:a120b69bf1f92d3f00ef515518a9dc604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ef9568b2492898ee428c60ae4d5ca5"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#ad5ef9568b2492898ee428c60ae4d5ca5">~CNoveltyIf</a> ()</td></tr>
<tr class="separator:ad5ef9568b2492898ee428c60ae4d5ca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3cac32c63a59914907f3480ee93981c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#ad3cac32c63a59914907f3480ee93981c">CNoveltyIf</a> (const <a class="el" href="a00514.xhtml">CNoveltyIf</a> &amp;that)</td></tr>
<tr class="separator:ad3cac32c63a59914907f3480ee93981c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a4ce4da9378a136cb2d98dceb79f398"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00514.xhtml">CNoveltyIf</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a4a4ce4da9378a136cb2d98dceb79f398">operator=</a> (const <a class="el" href="a00514.xhtml">CNoveltyIf</a> &amp;c)</td></tr>
<tr class="separator:a4a4ce4da9378a136cb2d98dceb79f398"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a119fc32e085bb978525ea9596ee2e9c1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a119fc32e085bb978525ea9596ee2e9c1">reset_</a> ()</td></tr>
<tr class="memdesc:a119fc32e085bb978525ea9596ee2e9c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">reset configuration  <a href="a00514.xhtml#a119fc32e085bb978525ea9596ee2e9c1">More...</a><br /></td></tr>
<tr class="separator:a119fc32e085bb978525ea9596ee2e9c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4beb226d8e7dd927c253667647e837ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a4beb226d8e7dd927c253667647e837ec">init_</a> (<a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a> eNoveltyIdx)</td></tr>
<tr class="memdesc:a4beb226d8e7dd927c253667647e837ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">init configuration  <a href="a00514.xhtml#a4beb226d8e7dd927c253667647e837ec">More...</a><br /></td></tr>
<tr class="separator:a4beb226d8e7dd927c253667647e837ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9018f2beabd03a9b41d90bde402aa227"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a9018f2beabd03a9b41d90bde402aa227">computeMagSpectrum_</a> ()</td></tr>
<tr class="separator:a9018f2beabd03a9b41d90bde402aa227"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a57a60a36f228fc6de54ce33417b61b10"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00606.xhtml">CNormalizeAudio</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">m_pCNormalize</a> = 0</td></tr>
<tr class="memdesc:a57a60a36f228fc6de54ce33417b61b10"><td class="mdescLeft">&#160;</td><td class="mdescRight">instantiate if audio file normalization is wanted  <a href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">More...</a><br /></td></tr>
<tr class="separator:a57a60a36f228fc6de54ce33417b61b10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84efaf39d353e332e0f99eddb06ba39e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00542.xhtml">CBlockAudioIf</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a> = 0</td></tr>
<tr class="memdesc:a84efaf39d353e332e0f99eddb06ba39e"><td class="mdescLeft">&#160;</td><td class="mdescRight">instantiate for blocking time domain signal  <a href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">More...</a><br /></td></tr>
<tr class="separator:a84efaf39d353e332e0f99eddb06ba39e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62dccceea81ced7995f41efb4a3195a7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00518.xhtml">CNoveltyFromBlockIf</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">m_pCNovelty</a> = 0</td></tr>
<tr class="memdesc:a62dccceea81ced7995f41efb4a3195a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">instance for instantaneous novelty extraction  <a href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">More...</a><br /></td></tr>
<tr class="separator:a62dccceea81ced7995f41efb4a3195a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04ad767c4bbb8eceb60b5f3faf5c5e23"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00474.xhtml">CFft</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a> = 0</td></tr>
<tr class="memdesc:a04ad767c4bbb8eceb60b5f3faf5c5e23"><td class="mdescLeft">&#160;</td><td class="mdescRight">fft instance  <a href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">More...</a><br /></td></tr>
<tr class="separator:a04ad767c4bbb8eceb60b5f3faf5c5e23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7263705b4af451ba7f6f7d40efd8f82"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00586.xhtml">CMovingAverage</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a> = 0</td></tr>
<tr class="memdesc:af7263705b4af451ba7f6f7d40efd8f82"><td class="mdescLeft">&#160;</td><td class="mdescRight">smoothing filter handle  <a href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">More...</a><br /></td></tr>
<tr class="separator:af7263705b4af451ba7f6f7d40efd8f82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f24b97fe49f8cfd88eb339464765c9b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">m_iBlockLength</a> = 0</td></tr>
<tr class="memdesc:a5f24b97fe49f8cfd88eb339464765c9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">fft length  <a href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">More...</a><br /></td></tr>
<tr class="separator:a5f24b97fe49f8cfd88eb339464765c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8856282e4ff8634a849e189e6fea73bf"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">m_iHopLength</a> = 0</td></tr>
<tr class="memdesc:a8856282e4ff8634a849e189e6fea73bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">hop length  <a href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">More...</a><br /></td></tr>
<tr class="separator:a8856282e4ff8634a849e189e6fea73bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a278e55c0f750f8732c432dce067aa8"><td class="memItemLeft" align="right" valign="top">float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">m_fSampleRate</a> = 0</td></tr>
<tr class="memdesc:a6a278e55c0f750f8732c432dce067aa8"><td class="mdescLeft">&#160;</td><td class="mdescRight">sample rate  <a href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">More...</a><br /></td></tr>
<tr class="separator:a6a278e55c0f750f8732c432dce067aa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa53c5f9c95a5de6bf0129786562860f8"><td class="memItemLeft" align="right" valign="top">float *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">m_pfProcBuff2</a> = 0</td></tr>
<tr class="memdesc:aa53c5f9c95a5de6bf0129786562860f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">temporary buffer for current spectrum  <a href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">More...</a><br /></td></tr>
<tr class="separator:aa53c5f9c95a5de6bf0129786562860f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b1fb5d381cb1f47ac2409a3955d0a78"><td class="memItemLeft" align="right" valign="top">float *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a> = 0</td></tr>
<tr class="memdesc:a0b1fb5d381cb1f47ac2409a3955d0a78"><td class="mdescLeft">&#160;</td><td class="mdescRight">temporary buffer  <a href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">More...</a><br /></td></tr>
<tr class="separator:a0b1fb5d381cb1f47ac2409a3955d0a78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdfa2c2dc127e43260ea8455b969052c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="a00269.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a> = <a class="el" href="a00269.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></td></tr>
<tr class="memdesc:abdfa2c2dc127e43260ea8455b969052c"><td class="mdescLeft">&#160;</td><td class="mdescRight">true if initialized  <a href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">More...</a><br /></td></tr>
<tr class="separator:abdfa2c2dc127e43260ea8455b969052c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >class for computation of a magnitude Novelty from either a file or a vector </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00018">18</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="aaaa808da8acb1f5df095f6178faeb4f4" name="aaaa808da8acb1f5df095f6178faeb4f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaa808da8acb1f5df095f6178faeb4f4">&#9670;&#160;</a></span>Novelty_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">CNoveltyIf::Novelty_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>enum to index all Noveltys note: update CNoveltyIf::isNoveltySpectral_() when modifying </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38" name="aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38"></a>kNoveltyFlux&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e" name="aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e"></a>kNoveltyHainsworth&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c" name="aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c"></a>kNoveltyLaroche&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c" name="aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c"></a>kNumNoveltyFunctions&#160;</td><td class="fielddoc"></td></tr>
</table>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00024">24</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   25</span>    {</div>
<div class="line"><span class="lineno">   26</span>        <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38">kNoveltyFlux</a>,</div>
<div class="line"><span class="lineno">   27</span>        <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e">kNoveltyHainsworth</a>,</div>
<div class="line"><span class="lineno">   28</span>        <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c">kNoveltyLaroche</a>,</div>
<div class="line"><span class="lineno">   29</span> </div>
<div class="line"><span class="lineno">   30</span>        <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c">kNumNoveltyFunctions</a></div>
<div class="line"><span class="lineno">   31</span>    };</div>
<div class="ttc" id="aa00514_xhtml_aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e"><div class="ttname"><a href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e">CNoveltyIf::kNoveltyHainsworth</a></div><div class="ttdeci">@ kNoveltyHainsworth</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00027">Novelty.h:27</a></div></div>
<div class="ttc" id="aa00514_xhtml_aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c"><div class="ttname"><a href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c">CNoveltyIf::kNoveltyLaroche</a></div><div class="ttdeci">@ kNoveltyLaroche</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00028">Novelty.h:28</a></div></div>
<div class="ttc" id="aa00514_xhtml_aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38"><div class="ttname"><a href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38">CNoveltyIf::kNoveltyFlux</a></div><div class="ttdeci">@ kNoveltyFlux</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00026">Novelty.h:26</a></div></div>
<div class="ttc" id="aa00514_xhtml_aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c"><div class="ttname"><a href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c">CNoveltyIf::kNumNoveltyFunctions</a></div><div class="ttdeci">@ kNumNoveltyFunctions</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00031">Novelty.h:30</a></div></div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a120b69bf1f92d3f00ef515518a9dc604" name="a120b69bf1f92d3f00ef515518a9dc604"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a120b69bf1f92d3f00ef515518a9dc604">&#9670;&#160;</a></span>CNoveltyIf() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">CNoveltyIf::CNoveltyIf </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00088">88</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   89</span>{</div>
<div class="line"><span class="lineno">   90</span>    <a class="code hl_function" href="a00514.xhtml#a119fc32e085bb978525ea9596ee2e9c1">reset_</a>();</div>
<div class="line"><span class="lineno">   91</span>}</div>
<div class="ttc" id="aa00514_xhtml_a119fc32e085bb978525ea9596ee2e9c1"><div class="ttname"><a href="a00514.xhtml#a119fc32e085bb978525ea9596ee2e9c1">CNoveltyIf::reset_</a></div><div class="ttdeci">Error_t reset_()</div><div class="ttdoc">reset configuration</div><div class="ttdef"><b>Definition:</b> <a href="a00113_source.xhtml#l00298">Novelty.cpp:298</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a120b69bf1f92d3f00ef515518a9dc604_cgraph.svg" width="552" height="200"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad5ef9568b2492898ee428c60ae4d5ca5" name="ad5ef9568b2492898ee428c60ae4d5ca5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5ef9568b2492898ee428c60ae4d5ca5">&#9670;&#160;</a></span>~CNoveltyIf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">CNoveltyIf::~CNoveltyIf </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00093">93</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   94</span>{</div>
<div class="line"><span class="lineno">   95</span>    <a class="code hl_function" href="a00514.xhtml#a119fc32e085bb978525ea9596ee2e9c1">reset_</a>();</div>
<div class="line"><span class="lineno">   96</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_ad5ef9568b2492898ee428c60ae4d5ca5_cgraph.svg" width="559" height="200"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad3cac32c63a59914907f3480ee93981c" name="ad3cac32c63a59914907f3480ee93981c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3cac32c63a59914907f3480ee93981c">&#9670;&#160;</a></span>CNoveltyIf() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">CNoveltyIf::CNoveltyIf </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00514.xhtml">CNoveltyIf</a> &amp;&#160;</td>
          <td class="paramname"><em>that</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9f110985f86064fa24aa3157bfd5cab0" name="a9f110985f86064fa24aa3157bfd5cab0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f110985f86064fa24aa3157bfd5cab0">&#9670;&#160;</a></span>compNovelty()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::compNovelty </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>pfNovelty</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00269.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> *&#160;</td>
          <td class="paramname"><em>pbisOnset</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p >performs the Novelty computation for 1 dimensional Noveltys and writes the result </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pfNovelty</td><td>(user-allocated, to be written, dimensions from <a class="el" href="a00514.xhtml#aa4193070cac8cac64ad8dc222fb612e8">CNoveltyIf::getNumBlocks</a>) </td></tr>
    <tr><td class="paramname">pbisOnset</td><td>(user-allocated, to be written, true if onset) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error_t </dd></dl>
<p >&lt; adaptive threshold - memory allocation is ok since we compDtw the whole signal at once anyway</p>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00186">186</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  187</span>{</div>
<div class="line"><span class="lineno">  188</span>    <span class="keywordflow">if</span> (!<a class="code hl_variable" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a>)</div>
<div class="line"><span class="lineno">  189</span>        <span class="keywordflow">return</span> Error_t::kFunctionIllegalCallError;</div>
<div class="line"><span class="lineno">  190</span>    <span class="keywordflow">if</span> (!pfNovelty)</div>
<div class="line"><span class="lineno">  191</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  192</span> </div>
<div class="line"><span class="lineno">  193</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>);</div>
<div class="line"><span class="lineno">  194</span>    assert(<a class="code hl_variable" href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">m_pfProcBuff2</a>);</div>
<div class="line"><span class="lineno">  195</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>);</div>
<div class="line"><span class="lineno">  196</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>);</div>
<div class="line"><span class="lineno">  197</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">m_pCNormalize</a>);</div>
<div class="line"><span class="lineno">  198</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">m_pCNovelty</a>);</div>
<div class="line"><span class="lineno">  199</span> </div>
<div class="line"><span class="lineno">  200</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fSmoothLpLenInS = 0.07F;</div>
<div class="line"><span class="lineno">  201</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fThreshLpLenInS = 0.14F;</div>
<div class="line"><span class="lineno">  202</span>    <span class="keyword">auto</span> iNumBlocks = <a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>-&gt;<a class="code hl_function" href="a00542.xhtml#a595b3a391e2540a1dc9e53edf8634494">getNumBlocks</a>();</div>
<div class="line"><span class="lineno">  203</span> </div>
<div class="line"><span class="lineno">  204</span>    <span class="keywordtype">float</span> *pfThreshold = 0; <span class="comment">//!&lt; adaptive threshold - memory allocation is ok since we compDtw the whole signal at once anyway</span></div>
<div class="line"><span class="lineno">  205</span>    <a class="code hl_function" href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(pfThreshold, iNumBlocks);</div>
<div class="line"><span class="lineno">  206</span> </div>
<div class="line"><span class="lineno">  207</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumBlocks; n++)</div>
<div class="line"><span class="lineno">  208</span>    {</div>
<div class="line"><span class="lineno">  209</span>        <span class="comment">// retrieve the next audio block</span></div>
<div class="line"><span class="lineno">  210</span>        <a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>-&gt;<a class="code hl_function" href="a00542.xhtml#a531920b36b04ecdb562bfbb09dd2e856">getNextBlock</a>(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>);</div>
<div class="line"><span class="lineno">  211</span> </div>
<div class="line"><span class="lineno">  212</span>        <span class="comment">// normalize if specified</span></div>
<div class="line"><span class="lineno">  213</span>        <span class="keywordflow">if</span> (<a class="code hl_variable" href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">m_pCNormalize</a>)</div>
<div class="line"><span class="lineno">  214</span>            <a class="code hl_variable" href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">m_pCNormalize</a>-&gt;<a class="code hl_function" href="a00606.xhtml#aa8a561b4133585586c5b595116a9217f">normalizeBlock</a>(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>, <a class="code hl_variable" href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">m_iBlockLength</a>);</div>
<div class="line"><span class="lineno">  215</span> </div>
<div class="line"><span class="lineno">  216</span>        <span class="comment">// compute spectrum</span></div>
<div class="line"><span class="lineno">  217</span>        <a class="code hl_function" href="a00514.xhtml#a9018f2beabd03a9b41d90bde402aa227">computeMagSpectrum_</a>();</div>
<div class="line"><span class="lineno">  218</span> </div>
<div class="line"><span class="lineno">  219</span>        <span class="comment">// extract novelty for this block</span></div>
<div class="line"><span class="lineno">  220</span>        <a class="code hl_variable" href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">m_pCNovelty</a>-&gt;<a class="code hl_function" href="a00518.xhtml#afd8a1e8ba7f26e0d1982c49f7fef7951">compNovelty</a>(&amp;pfNovelty[n], <a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>);</div>
<div class="line"><span class="lineno">  221</span>    }</div>
<div class="line"><span class="lineno">  222</span> </div>
<div class="line"><span class="lineno">  223</span>    <span class="comment">// normalize</span></div>
<div class="line"><span class="lineno">  224</span>    <span class="keywordtype">float</span> fMax = <a class="code hl_function" href="a00502.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a>(pfNovelty, iNumBlocks, <span class="keyword">true</span>);</div>
<div class="line"><span class="lineno">  225</span>    <span class="keywordflow">if</span> (fMax &gt; 0)</div>
<div class="line"><span class="lineno">  226</span>        <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pfNovelty, 1 / fMax, iNumBlocks);</div>
<div class="line"><span class="lineno">  227</span> </div>
<div class="line"><span class="lineno">  228</span>    <span class="comment">// smoothing with moving average</span></div>
<div class="line"><span class="lineno">  229</span>    <a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#a9681799055b5a4622d25a70901a65af3">reset</a>();</div>
<div class="line"><span class="lineno">  230</span>    <a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#a1a014af5490675e140d6069561b00eb1">setFilterParam</a>(<a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#ac37c3eae6a41a393219aa4cbd39db211">calcFilterLength</a>(fSmoothLpLenInS, <a class="code hl_variable" href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">m_fSampleRate</a> / <a class="code hl_variable" href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">m_iHopLength</a>));</div>
<div class="line"><span class="lineno">  231</span>    <a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#afaf126206b3993e9caeb989c2bab8ef4">filtfilt</a>(pfNovelty, pfNovelty, iNumBlocks);</div>
<div class="line"><span class="lineno">  232</span> </div>
<div class="line"><span class="lineno">  233</span>    <span class="comment">// HWR</span></div>
<div class="line"><span class="lineno">  234</span>    <a class="code hl_function" href="a00502.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a>(pfNovelty, iNumBlocks, 0.F);</div>
<div class="line"><span class="lineno">  235</span> </div>
<div class="line"><span class="lineno">  236</span>    <span class="comment">// threshold computation</span></div>
<div class="line"><span class="lineno">  237</span>    <a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#a9681799055b5a4622d25a70901a65af3">reset</a>();</div>
<div class="line"><span class="lineno">  238</span>    <a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#a1a014af5490675e140d6069561b00eb1">setFilterParam</a>(<a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#ac37c3eae6a41a393219aa4cbd39db211">calcFilterLength</a>(fThreshLpLenInS, <a class="code hl_variable" href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">m_fSampleRate</a> / <a class="code hl_variable" href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">m_iHopLength</a>));</div>
<div class="line"><span class="lineno">  239</span>    <a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>-&gt;<a class="code hl_function" href="a00586.xhtml#afaf126206b3993e9caeb989c2bab8ef4">filtfilt</a>(pfThreshold, pfNovelty, iNumBlocks);</div>
<div class="line"><span class="lineno">  240</span>    <a class="code hl_function" href="a00502.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a>(pfThreshold, .4F * <a class="code hl_function" href="a00502.xhtml#ae6e3545cf196c5e2409365bc62b7c1de">CVector::getMean</a>(&amp;pfNovelty[1], iNumBlocks - 1), iNumBlocks);</div>
<div class="line"><span class="lineno">  241</span>    <a class="code hl_function" href="a00502.xhtml#a39329371d828db80c2f0ad037074c998">CVector::sub_I</a>(pfThreshold, pfNovelty, iNumBlocks);</div>
<div class="line"><span class="lineno">  242</span>    <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pfThreshold, -1.F, iNumBlocks);</div>
<div class="line"><span class="lineno">  243</span>    <a class="code hl_function" href="a00502.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a>(pfThreshold, iNumBlocks, 0.F);</div>
<div class="line"><span class="lineno">  244</span> </div>
<div class="line"><span class="lineno">  245</span>    <span class="comment">// peak picking</span></div>
<div class="line"><span class="lineno">  246</span>    <span class="keywordflow">if</span> (pbIsOnset)</div>
<div class="line"><span class="lineno">  247</span>    {</div>
<div class="line"><span class="lineno">  248</span>        <a class="code hl_function" href="a00502.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a>(pbIsOnset, <span class="keyword">false</span>, iNumBlocks);</div>
<div class="line"><span class="lineno">  249</span>        <a class="code hl_function" href="a00502.xhtml#a64c5c5686629f104663dd3774e7a6e1b">CVector::findPeaks</a>(pbIsOnset, pfThreshold, iNumBlocks, 0.F);</div>
<div class="line"><span class="lineno">  250</span>    }</div>
<div class="line"><span class="lineno">  251</span> </div>
<div class="line"><span class="lineno">  252</span>    <span class="comment">// clean up memory</span></div>
<div class="line"><span class="lineno">  253</span>    <a class="code hl_function" href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(pfThreshold);</div>
<div class="line"><span class="lineno">  254</span> </div>
<div class="line"><span class="lineno">  255</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  256</span>}</div>
<div class="ttc" id="aa00502_xhtml_a22ff86e4fc2f8d5042159d9c84a7ff14"><div class="ttname"><a href="a00502.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a></div><div class="ttdeci">static void addC_I(T *ptSrcDest, T fConst, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00163">Vector.h:163</a></div></div>
<div class="ttc" id="aa00502_xhtml_a39329371d828db80c2f0ad037074c998"><div class="ttname"><a href="a00502.xhtml#a39329371d828db80c2f0ad037074c998">CVector::sub_I</a></div><div class="ttdeci">static void sub_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00265">Vector.h:265</a></div></div>
<div class="ttc" id="aa00502_xhtml_a4cf9544dd96801e3ee47fd1ef2049a1b"><div class="ttname"><a href="a00502.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a></div><div class="ttdeci">static void setValue(T *ptDest, T tValue, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00100">Vector.h:100</a></div></div>
<div class="ttc" id="aa00502_xhtml_a64c5c5686629f104663dd3774e7a6e1b"><div class="ttname"><a href="a00502.xhtml#a64c5c5686629f104663dd3774e7a6e1b">CVector::findPeaks</a></div><div class="ttdeci">static int findPeaks(bool *pbisLocalMax, const T *ptSrc, long long int iLength, T fThresh=-std::numeric_limits&lt; T &gt;::max())</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00640">Vector.h:640</a></div></div>
<div class="ttc" id="aa00502_xhtml_a9811f50434dd058d201290b2dc98bfcd"><div class="ttname"><a href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a></div><div class="ttdeci">static void mulC_I(T *ptSrcDest, T fScale, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00214">Vector.h:214</a></div></div>
<div class="ttc" id="aa00502_xhtml_a9f5be871090bc5a64a7732cebfb4f8ec"><div class="ttname"><a href="a00502.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a></div><div class="ttdeci">static T getMax(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00444">Vector.h:444</a></div></div>
<div class="ttc" id="aa00502_xhtml_aa86bdb0c663d4d52f2765793756f8737"><div class="ttname"><a href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a></div><div class="ttdeci">static void free(T *&amp;ptVec)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00057">Vector.h:57</a></div></div>
<div class="ttc" id="aa00502_xhtml_aba07261926b4c10ed7fdbe38edf6d16d"><div class="ttname"><a href="a00502.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a></div><div class="ttdeci">static void setZeroBelowThresh(T *ptSrcDest, long long int iLength, T tThresh)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00129">Vector.h:129</a></div></div>
<div class="ttc" id="aa00502_xhtml_abaadac98b1cad18b7b568852bc951696"><div class="ttname"><a href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a></div><div class="ttdeci">static void alloc(T *&amp;ptVec, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00025">Vector.h:25</a></div></div>
<div class="ttc" id="aa00502_xhtml_ae6e3545cf196c5e2409365bc62b7c1de"><div class="ttname"><a href="a00502.xhtml#ae6e3545cf196c5e2409365bc62b7c1de">CVector::getMean</a></div><div class="ttdeci">static T getMean(const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00194_source.xhtml#l00460">Vector.h:460</a></div></div>
<div class="ttc" id="aa00514_xhtml_a04ad767c4bbb8eceb60b5f3faf5c5e23"><div class="ttname"><a href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">CNoveltyIf::m_pCFft</a></div><div class="ttdeci">CFft * m_pCFft</div><div class="ttdoc">fft instance</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00119">Novelty.h:119</a></div></div>
<div class="ttc" id="aa00514_xhtml_a0b1fb5d381cb1f47ac2409a3955d0a78"><div class="ttname"><a href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">CNoveltyIf::m_pfProcBuff1</a></div><div class="ttdeci">float * m_pfProcBuff1</div><div class="ttdoc">temporary buffer</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00129">Novelty.h:129</a></div></div>
<div class="ttc" id="aa00514_xhtml_a57a60a36f228fc6de54ce33417b61b10"><div class="ttname"><a href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">CNoveltyIf::m_pCNormalize</a></div><div class="ttdeci">CNormalizeAudio * m_pCNormalize</div><div class="ttdoc">instantiate if audio file normalization is wanted</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00113">Novelty.h:113</a></div></div>
<div class="ttc" id="aa00514_xhtml_a5f24b97fe49f8cfd88eb339464765c9b"><div class="ttname"><a href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">CNoveltyIf::m_iBlockLength</a></div><div class="ttdeci">int m_iBlockLength</div><div class="ttdoc">fft length</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00123">Novelty.h:123</a></div></div>
<div class="ttc" id="aa00514_xhtml_a62dccceea81ced7995f41efb4a3195a7"><div class="ttname"><a href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">CNoveltyIf::m_pCNovelty</a></div><div class="ttdeci">CNoveltyFromBlockIf * m_pCNovelty</div><div class="ttdoc">instance for instantaneous novelty extraction</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00117">Novelty.h:117</a></div></div>
<div class="ttc" id="aa00514_xhtml_a6a278e55c0f750f8732c432dce067aa8"><div class="ttname"><a href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">CNoveltyIf::m_fSampleRate</a></div><div class="ttdeci">float m_fSampleRate</div><div class="ttdoc">sample rate</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00126">Novelty.h:126</a></div></div>
<div class="ttc" id="aa00514_xhtml_a84efaf39d353e332e0f99eddb06ba39e"><div class="ttname"><a href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">CNoveltyIf::m_pCBlockAudio</a></div><div class="ttdeci">CBlockAudioIf * m_pCBlockAudio</div><div class="ttdoc">instantiate for blocking time domain signal</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00115">Novelty.h:115</a></div></div>
<div class="ttc" id="aa00514_xhtml_a8856282e4ff8634a849e189e6fea73bf"><div class="ttname"><a href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">CNoveltyIf::m_iHopLength</a></div><div class="ttdeci">int m_iHopLength</div><div class="ttdoc">hop length</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00124">Novelty.h:124</a></div></div>
<div class="ttc" id="aa00514_xhtml_a9018f2beabd03a9b41d90bde402aa227"><div class="ttname"><a href="a00514.xhtml#a9018f2beabd03a9b41d90bde402aa227">CNoveltyIf::computeMagSpectrum_</a></div><div class="ttdeci">void computeMagSpectrum_()</div><div class="ttdef"><b>Definition:</b> <a href="a00113_source.xhtml#l00286">Novelty.cpp:286</a></div></div>
<div class="ttc" id="aa00514_xhtml_aa53c5f9c95a5de6bf0129786562860f8"><div class="ttname"><a href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">CNoveltyIf::m_pfProcBuff2</a></div><div class="ttdeci">float * m_pfProcBuff2</div><div class="ttdoc">temporary buffer for current spectrum</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00128">Novelty.h:128</a></div></div>
<div class="ttc" id="aa00514_xhtml_abdfa2c2dc127e43260ea8455b969052c"><div class="ttname"><a href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">CNoveltyIf::m_bIsInitialized</a></div><div class="ttdeci">bool m_bIsInitialized</div><div class="ttdoc">true if initialized</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00131">Novelty.h:131</a></div></div>
<div class="ttc" id="aa00514_xhtml_af7263705b4af451ba7f6f7d40efd8f82"><div class="ttname"><a href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">CNoveltyIf::m_pCLpFilter</a></div><div class="ttdeci">CMovingAverage * m_pCLpFilter</div><div class="ttdoc">smoothing filter handle</div><div class="ttdef"><b>Definition:</b> <a href="a00206_source.xhtml#l00121">Novelty.h:121</a></div></div>
<div class="ttc" id="aa00518_xhtml_afd8a1e8ba7f26e0d1982c49f7fef7951"><div class="ttname"><a href="a00518.xhtml#afd8a1e8ba7f26e0d1982c49f7fef7951">CNoveltyFromBlockIf::compNovelty</a></div><div class="ttdeci">virtual Error_t compNovelty(float *pfNovelty, const float *pfIn)</div><div class="ttdef"><b>Definition:</b> <a href="a00092_source.xhtml#l00109">NoveltyFromBlock.cpp:109</a></div></div>
<div class="ttc" id="aa00542_xhtml_a531920b36b04ecdb562bfbb09dd2e856"><div class="ttname"><a href="a00542.xhtml#a531920b36b04ecdb562bfbb09dd2e856">CBlockAudioIf::getNextBlock</a></div><div class="ttdeci">virtual int getNextBlock(float *pfBlock, float *pfTimeStampInS=0)=0</div></div>
<div class="ttc" id="aa00542_xhtml_a595b3a391e2540a1dc9e53edf8634494"><div class="ttname"><a href="a00542.xhtml#a595b3a391e2540a1dc9e53edf8634494">CBlockAudioIf::getNumBlocks</a></div><div class="ttdeci">long long getNumBlocks() const</div><div class="ttdef"><b>Definition:</b> <a href="a00161_source.xhtml#l00049">ToolBlockAudio.h:49</a></div></div>
<div class="ttc" id="aa00586_xhtml_a1a014af5490675e140d6069561b00eb1"><div class="ttname"><a href="a00586.xhtml#a1a014af5490675e140d6069561b00eb1">CMovingAverage::setFilterParam</a></div><div class="ttdeci">Error_t setFilterParam(int iFilterLength=64)</div><div class="ttdef"><b>Definition:</b> <a href="a00233_source.xhtml#l00153">ToolLowPass.h:153</a></div></div>
<div class="ttc" id="aa00586_xhtml_a9681799055b5a4622d25a70901a65af3"><div class="ttname"><a href="a00586.xhtml#a9681799055b5a4622d25a70901a65af3">CMovingAverage::reset</a></div><div class="ttdeci">Error_t reset()</div><div class="ttdef"><b>Definition:</b> <a href="a00233_source.xhtml#l00218">ToolLowPass.h:218</a></div></div>
<div class="ttc" id="aa00586_xhtml_ac37c3eae6a41a393219aa4cbd39db211"><div class="ttname"><a href="a00586.xhtml#ac37c3eae6a41a393219aa4cbd39db211">CMovingAverage::calcFilterLength</a></div><div class="ttdeci">static int calcFilterLength(float fIntegrationTimeInS, float fSampleRate)</div><div class="ttdef"><b>Definition:</b> <a href="a00233_source.xhtml#l00181">ToolLowPass.h:181</a></div></div>
<div class="ttc" id="aa00586_xhtml_afaf126206b3993e9caeb989c2bab8ef4"><div class="ttname"><a href="a00586.xhtml#afaf126206b3993e9caeb989c2bab8ef4">CMovingAverage::filtfilt</a></div><div class="ttdeci">void filtfilt(float *pfOut, const float *pfIn, long long iLenBuff)</div><div class="ttdef"><b>Definition:</b> <a href="a00233_source.xhtml#l00232">ToolLowPass.h:232</a></div></div>
<div class="ttc" id="aa00606_xhtml_aa8a561b4133585586c5b595116a9217f"><div class="ttname"><a href="a00606.xhtml#aa8a561b4133585586c5b595116a9217f">CNormalizeAudio::normalizeBlock</a></div><div class="ttdeci">void normalizeBlock(float *pfAudioBlock, long long iNumSamples)</div><div class="ttdef"><b>Definition:</b> <a href="a00137_source.xhtml#l00116">ToolPreProc.h:116</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00194_source.xhtml#l00163">CVector::addC_I()</a>, <a class="el" href="a00194_source.xhtml#l00025">CVector::alloc()</a>, <a class="el" href="a00233_source.xhtml#l00181">CMovingAverage::calcFilterLength()</a>, <a class="el" href="a00092_source.xhtml#l00109">CNoveltyFromBlockIf::compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00286">computeMagSpectrum_()</a>, <a class="el" href="a00233_source.xhtml#l00232">CMovingAverage::filtfilt()</a>, <a class="el" href="a00194_source.xhtml#l00640">CVector::findPeaks()</a>, <a class="el" href="a00194_source.xhtml#l00057">CVector::free()</a>, <a class="el" href="a00194_source.xhtml#l00444">CVector::getMax()</a>, <a class="el" href="a00194_source.xhtml#l00460">CVector::getMean()</a>, <a class="el" href="a00542.xhtml#a531920b36b04ecdb562bfbb09dd2e856">CBlockAudioIf::getNextBlock()</a>, <a class="el" href="a00161_source.xhtml#l00049">CBlockAudioIf::getNumBlocks()</a>, <a class="el" href="a00206_source.xhtml#l00131">m_bIsInitialized</a>, <a class="el" href="a00206_source.xhtml#l00126">m_fSampleRate</a>, <a class="el" href="a00206_source.xhtml#l00123">m_iBlockLength</a>, <a class="el" href="a00206_source.xhtml#l00124">m_iHopLength</a>, <a class="el" href="a00206_source.xhtml#l00115">m_pCBlockAudio</a>, <a class="el" href="a00206_source.xhtml#l00119">m_pCFft</a>, <a class="el" href="a00206_source.xhtml#l00121">m_pCLpFilter</a>, <a class="el" href="a00206_source.xhtml#l00113">m_pCNormalize</a>, <a class="el" href="a00206_source.xhtml#l00117">m_pCNovelty</a>, <a class="el" href="a00206_source.xhtml#l00129">m_pfProcBuff1</a>, <a class="el" href="a00206_source.xhtml#l00128">m_pfProcBuff2</a>, <a class="el" href="a00194_source.xhtml#l00214">CVector::mulC_I()</a>, <a class="el" href="a00137_source.xhtml#l00116">CNormalizeAudio::normalizeBlock()</a>, <a class="el" href="a00233_source.xhtml#l00218">CMovingAverage::reset()</a>, <a class="el" href="a00233_source.xhtml#l00153">CMovingAverage::setFilterParam()</a>, <a class="el" href="a00194_source.xhtml#l00100">CVector::setValue()</a>, <a class="el" href="a00194_source.xhtml#l00129">CVector::setZeroBelowThresh()</a>, and <a class="el" href="a00194_source.xhtml#l00265">CVector::sub_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00041_source.xhtml#l00114">CBeatHistoIf::compBeatHisto()</a>, and <a class="el" href="a00023_source.xhtml#l00017">main()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00514_a9f110985f86064fa24aa3157bfd5cab0_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a9f110985f86064fa24aa3157bfd5cab0_icgraph.svg" width="516" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a9018f2beabd03a9b41d90bde402aa227" name="a9018f2beabd03a9b41d90bde402aa227"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9018f2beabd03a9b41d90bde402aa227">&#9670;&#160;</a></span>computeMagSpectrum_()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CNoveltyIf::computeMagSpectrum_ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00286">286</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  287</span>{</div>
<div class="line"><span class="lineno">  288</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>);</div>
<div class="line"><span class="lineno">  289</span> </div>
<div class="line"><span class="lineno">  290</span>    <span class="comment">// compute magnitude spectrum</span></div>
<div class="line"><span class="lineno">  291</span>    <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#ab5c17fe5c368048a3393818735dc9b8a">compFft</a>(<a class="code hl_variable" href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">m_pfProcBuff2</a>, <a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>);</div>
<div class="line"><span class="lineno">  292</span>    <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#a48428f0ac37a3c112c9598c784771d4a">getMagnitude</a>(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>, <a class="code hl_variable" href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">m_pfProcBuff2</a>);</div>
<div class="line"><span class="lineno">  293</span> </div>
<div class="line"><span class="lineno">  294</span>    <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>, 2.F, <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#a9cb162394031e8b496f7a39b51c31d20">getLength</a>(<a class="code hl_enumvalue" href="a00474.xhtml#aaeae67c99cd6e689243892e429a66e33a280c54c7da09951bd33a05dfb5dd4f8e">CFft::kLengthMagnitude</a>));</div>
<div class="line"><span class="lineno">  295</span>}</div>
<div class="ttc" id="aa00474_xhtml_a48428f0ac37a3c112c9598c784771d4a"><div class="ttname"><a href="a00474.xhtml#a48428f0ac37a3c112c9598c784771d4a">CFft::getMagnitude</a></div><div class="ttdeci">Error_t getMagnitude(float *pfMag, const complex_t *pfSpectrum) const</div><div class="ttdef"><b>Definition:</b> <a href="a00077_source.xhtml#l00136">Fft.cpp:136</a></div></div>
<div class="ttc" id="aa00474_xhtml_a9cb162394031e8b496f7a39b51c31d20"><div class="ttname"><a href="a00474.xhtml#a9cb162394031e8b496f7a39b51c31d20">CFft::getLength</a></div><div class="ttdeci">int getLength(Length_t eLengthIdx) const</div><div class="ttdef"><b>Definition:</b> <a href="a00077_source.xhtml#l00322">Fft.cpp:322</a></div></div>
<div class="ttc" id="aa00474_xhtml_aaeae67c99cd6e689243892e429a66e33a280c54c7da09951bd33a05dfb5dd4f8e"><div class="ttname"><a href="a00474.xhtml#aaeae67c99cd6e689243892e429a66e33a280c54c7da09951bd33a05dfb5dd4f8e">CFft::kLengthMagnitude</a></div><div class="ttdeci">@ kLengthMagnitude</div><div class="ttdoc">length of the magnitude spectrum</div><div class="ttdef"><b>Definition:</b> <a href="a00182_source.xhtml#l00107">Fft.h:107</a></div></div>
<div class="ttc" id="aa00474_xhtml_ab5c17fe5c368048a3393818735dc9b8a"><div class="ttname"><a href="a00474.xhtml#ab5c17fe5c368048a3393818735dc9b8a">CFft::compFft</a></div><div class="ttdeci">Error_t compFft(complex_t *pfSpectrum, const float *pfIn)</div><div class="ttdef"><b>Definition:</b> <a href="a00077_source.xhtml#l00091">Fft.cpp:91</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00077_source.xhtml#l00091">CFft::compFft()</a>, <a class="el" href="a00077_source.xhtml#l00322">CFft::getLength()</a>, <a class="el" href="a00077_source.xhtml#l00136">CFft::getMagnitude()</a>, <a class="el" href="a00182_source.xhtml#l00107">CFft::kLengthMagnitude</a>, <a class="el" href="a00206_source.xhtml#l00119">m_pCFft</a>, <a class="el" href="a00206_source.xhtml#l00129">m_pfProcBuff1</a>, <a class="el" href="a00206_source.xhtml#l00128">m_pfProcBuff2</a>, and <a class="el" href="a00194_source.xhtml#l00214">CVector::mulC_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a9018f2beabd03a9b41d90bde402aa227_cgraph.svg" width="583" height="263"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00514_a9018f2beabd03a9b41d90bde402aa227_icgraph.svg" width="100%" height="364"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa7460e2359d7ab321ef8517ac93466fb" name="aa7460e2359d7ab321ef8517ac93466fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7460e2359d7ab321ef8517ac93466fb">&#9670;&#160;</a></span>create() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00514.xhtml">CNoveltyIf</a> *&amp;&#160;</td>
          <td class="paramname"><em>pCInstance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a>&#160;</td>
          <td class="paramname"><em>eNoveltyIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>pfAudio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long long&#160;</td>
          <td class="paramname"><em>iNumSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fSampleRate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iBlockLength</em> = <code>4096</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iHopLength</em> = <code>512</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >initializes a Novelty instance from audio data </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pCInstance</td><td>pointer to instance to be written </td></tr>
    <tr><td class="paramname">eNoveltyIdx</td><td>as defined in Novelty_t </td></tr>
    <tr><td class="paramname">pfAudio</td><td>complete audio data </td></tr>
    <tr><td class="paramname">iNumSamples</td><td>length of pfAudio </td></tr>
    <tr><td class="paramname">fSampleRate</td><td>sample rate in Hz </td></tr>
    <tr><td class="paramname">iBlockLength</td><td>FFT block length in samples </td></tr>
    <tr><td class="paramname">iHopLength</td><td>hop length in samples </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00113">113</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  114</span>{</div>
<div class="line"><span class="lineno">  115</span>    <span class="keywordflow">if</span> (!pfAudio)</div>
<div class="line"><span class="lineno">  116</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  117</span>    <span class="keywordflow">if</span> (iNumSamples &lt;= 0)</div>
<div class="line"><span class="lineno">  118</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  119</span>    <span class="keywordflow">if</span> (fSampleRate &lt;= 0)</div>
<div class="line"><span class="lineno">  120</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  121</span>    <span class="keywordflow">if</span> (iBlockLength &lt;= 2)</div>
<div class="line"><span class="lineno">  122</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  123</span>    <span class="keywordflow">if</span> (iHopLength &lt;= 0 || iHopLength &gt; iBlockLength)</div>
<div class="line"><span class="lineno">  124</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  125</span> </div>
<div class="line"><span class="lineno">  126</span>    pCInstance = <span class="keyword">new</span> <a class="code hl_class" href="a00366.xhtml">CNoveltyFromVector</a>(eNoveltyIdx, pfAudio, iNumSamples, fSampleRate, iBlockLength, iHopLength);</div>
<div class="line"><span class="lineno">  127</span> </div>
<div class="line"><span class="lineno">  128</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  129</span>}</div>
<div class="ttc" id="aa00366_xhtml"><div class="ttname"><a href="a00366.xhtml">CNoveltyFromVector</a></div><div class="ttdoc">class for computation of the novelty function from a vector of audio data</div><div class="ttdef"><b>Definition:</b> <a href="a00113_source.xhtml#l00062">Novelty.cpp:63</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a id="abae299cfe8e8806685cab18f59db8f72" name="abae299cfe8e8806685cab18f59db8f72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abae299cfe8e8806685cab18f59db8f72">&#9670;&#160;</a></span>create() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::create </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00514.xhtml">CNoveltyIf</a> *&amp;&#160;</td>
          <td class="paramname"><em>pCInstance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a>&#160;</td>
          <td class="paramname"><em>eNoveltyIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>strAudioFilePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iBlockLength</em> = <code>4096</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iHopLength</em> = <code>512</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >initializes a Novelty instance with file reading </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pCInstance</td><td>pointer to instance to be written </td></tr>
    <tr><td class="paramname">eNoveltyIdx</td><td>as defined in Novelty_t </td></tr>
    <tr><td class="paramname">strAudioFilePath</td><td>complete path to audio file </td></tr>
    <tr><td class="paramname">iBlockLength</td><td>FFT block length in samples </td></tr>
    <tr><td class="paramname">iHopLength</td><td>hop length in samples </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00098">98</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   99</span>{</div>
<div class="line"><span class="lineno">  100</span>    <span class="keywordflow">if</span> (strAudioFilePath.empty())</div>
<div class="line"><span class="lineno">  101</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  102</span>    <span class="keywordflow">if</span> (iBlockLength &lt;= 2 || !<a class="code hl_function" href="a00498.xhtml#a6d0e75b0bcbbb243b7141cfc0126e443">CUtil::isPowOf2</a>(iBlockLength))</div>
<div class="line"><span class="lineno">  103</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  104</span>    <span class="keywordflow">if</span> (iHopLength &lt;= 0 || iHopLength &gt; iBlockLength)</div>
<div class="line"><span class="lineno">  105</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  106</span> </div>
<div class="line"><span class="lineno">  107</span>    pCInstance = <span class="keyword">new</span> <a class="code hl_class" href="a00362.xhtml">CNoveltyFromFile</a>(eNoveltyIdx, strAudioFilePath, iBlockLength, iHopLength);</div>
<div class="line"><span class="lineno">  108</span> </div>
<div class="line"><span class="lineno">  109</span> </div>
<div class="line"><span class="lineno">  110</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  111</span>}</div>
<div class="ttc" id="aa00362_xhtml"><div class="ttname"><a href="a00362.xhtml">CNoveltyFromFile</a></div><div class="ttdoc">class for computation of the novelty function from a file</div><div class="ttdef"><b>Definition:</b> <a href="a00113_source.xhtml#l00017">Novelty.cpp:18</a></div></div>
<div class="ttc" id="aa00498_xhtml_a6d0e75b0bcbbb243b7141cfc0126e443"><div class="ttname"><a href="a00498.xhtml#a6d0e75b0bcbbb243b7141cfc0126e443">CUtil::isPowOf2</a></div><div class="ttdeci">static bool isPowOf2(int n)</div><div class="ttdef"><b>Definition:</b> <a href="a00185_source.xhtml#l00042">Util.h:42</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00185_source.xhtml#l00042">CUtil::isPowOf2()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00041_source.xhtml#l00224">CBeatHistoIf::init_()</a>, and <a class="el" href="a00023_source.xhtml#l00017">main()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_abae299cfe8e8806685cab18f59db8f72_cgraph.svg" width="299" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_abae299cfe8e8806685cab18f59db8f72_icgraph.svg" width="596" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa078a8242089a58179280c824f8ca4f9" name="aa078a8242089a58179280c824f8ca4f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa078a8242089a58179280c824f8ca4f9">&#9670;&#160;</a></span>destroy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00514.xhtml">CNoveltyIf</a> *&amp;&#160;</td>
          <td class="paramname"><em>pCInstance</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >destroys a Novelty instance </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pCInstance</td><td>pointer to instance to be destroyed </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00131">131</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  132</span>{</div>
<div class="line"><span class="lineno">  133</span>    <span class="keyword">delete</span> pCInstance;</div>
<div class="line"><span class="lineno">  134</span>    pCInstance = 0;</div>
<div class="line"><span class="lineno">  135</span> </div>
<div class="line"><span class="lineno">  136</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  137</span>}</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00023_source.xhtml#l00017">main()</a>, and <a class="el" href="a00041_source.xhtml#l00207">CBeatHistoIf::reset_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_aa078a8242089a58179280c824f8ca4f9_icgraph.svg" width="562" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad8d7e7b4f827b2c4e675c252cee9ca14" name="ad8d7e7b4f827b2c4e675c252cee9ca14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8d7e7b4f827b2c4e675c252cee9ca14">&#9670;&#160;</a></span>getNoveltyIdxFromString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">CNoveltyIf::Novelty_t</a> CNoveltyIf::getNoveltyIdxFromString </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>sNoveltyString</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >returns Novelty index from string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sNoveltyString</td><td>string describing the Novelty </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Novelty_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00271">271</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  272</span>{</div>
<div class="line"><span class="lineno">  273</span>    <span class="keyword">const</span> std::map&lt;std::string, CNoveltyIf::Novelty_t&gt; NoveltyMap</div>
<div class="line"><span class="lineno">  274</span>    {</div>
<div class="line"><span class="lineno">  275</span>            {<span class="stringliteral">&quot;Flux&quot;</span>, <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38">kNoveltyFlux</a>},</div>
<div class="line"><span class="lineno">  276</span>            {<span class="stringliteral">&quot;Hainsworth&quot;</span>, <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e">kNoveltyHainsworth</a>},</div>
<div class="line"><span class="lineno">  277</span>            {<span class="stringliteral">&quot;Laroche&quot;</span>, <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c">kNoveltyLaroche</a>}</div>
<div class="line"><span class="lineno">  278</span>    };</div>
<div class="line"><span class="lineno">  279</span>    <span class="keyword">auto</span> search = NoveltyMap.find(sNoveltyString);</div>
<div class="line"><span class="lineno">  280</span>    <span class="keywordflow">if</span> (search != NoveltyMap.end())</div>
<div class="line"><span class="lineno">  281</span>        <span class="keywordflow">return</span> NoveltyMap.at(sNoveltyString);</div>
<div class="line"><span class="lineno">  282</span>    <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  283</span>        <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ad3488ba679c6c6545742152b45e3df0c">kNumNoveltyFunctions</a>;</div>
<div class="line"><span class="lineno">  284</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00206_source.xhtml#l00026">kNoveltyFlux</a>, <a class="el" href="a00206_source.xhtml#l00027">kNoveltyHainsworth</a>, <a class="el" href="a00206_source.xhtml#l00028">kNoveltyLaroche</a>, and <a class="el" href="a00206_source.xhtml#l00030">kNumNoveltyFunctions</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00023_source.xhtml#l00017">main()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_ad8d7e7b4f827b2c4e675c252cee9ca14_icgraph.svg" width="278" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a2c2bdc36b4e569dcf3a229d5bb931e12" name="a2c2bdc36b4e569dcf3a229d5bb931e12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c2bdc36b4e569dcf3a229d5bb931e12">&#9670;&#160;</a></span>getNoveltyString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string CNoveltyIf::getNoveltyString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a>&#160;</td>
          <td class="paramname"><em>eNoveltyIdx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >returns Novelty name as string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">eNoveltyIdx</td><td>Novelty index </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>std::string </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00259">259</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  260</span>{</div>
<div class="line"><span class="lineno">  261</span>    <span class="keyword">const</span> std::map&lt;CNoveltyIf::Novelty_t, std::string&gt; NoveltyMap</div>
<div class="line"><span class="lineno">  262</span>    {</div>
<div class="line"><span class="lineno">  263</span>            {<a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4ab54085095907f70fca3bee22d3bc5d38">kNoveltyFlux</a>, <span class="stringliteral">&quot;Flux&quot;</span>},</div>
<div class="line"><span class="lineno">  264</span>            {<a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a792ea51409c928b6fa36da69498c725e">kNoveltyHainsworth</a>, <span class="stringliteral">&quot;Hainsworth&quot;</span>},</div>
<div class="line"><span class="lineno">  265</span>            {<a class="code hl_enumvalue" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4a8aa84a1abfabedffd2c7477607a1501c">kNoveltyLaroche</a>, <span class="stringliteral">&quot;Laroche&quot;</span>}</div>
<div class="line"><span class="lineno">  266</span>    };</div>
<div class="line"><span class="lineno">  267</span> </div>
<div class="line"><span class="lineno">  268</span>    <span class="keywordflow">return</span> NoveltyMap.at(eNoveltyIdx);</div>
<div class="line"><span class="lineno">  269</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00206_source.xhtml#l00026">kNoveltyFlux</a>, <a class="el" href="a00206_source.xhtml#l00027">kNoveltyHainsworth</a>, and <a class="el" href="a00206_source.xhtml#l00028">kNoveltyLaroche</a>.</p>

</div>
</div>
<a id="a2957fc23663fb6b67fabb6ecda9ae0bd" name="a2957fc23663fb6b67fabb6ecda9ae0bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2957fc23663fb6b67fabb6ecda9ae0bd">&#9670;&#160;</a></span>getNumBlocks() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int CNoveltyIf::getNumBlocks </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >returns size of matrix to be allocated by user </p><dl class="section return"><dt>Returns</dt><dd>int </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00152">152</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  153</span>{</div>
<div class="line"><span class="lineno">  154</span>    assert(<a class="code hl_variable" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a>);</div>
<div class="line"><span class="lineno">  155</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>);</div>
<div class="line"><span class="lineno">  156</span> </div>
<div class="line"><span class="lineno">  157</span>    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(<a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>-&gt;<a class="code hl_function" href="a00542.xhtml#a595b3a391e2540a1dc9e53edf8634494">getNumBlocks</a>());</div>
<div class="line"><span class="lineno">  158</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00161_source.xhtml#l00049">CBlockAudioIf::getNumBlocks()</a>, <a class="el" href="a00206_source.xhtml#l00131">m_bIsInitialized</a>, and <a class="el" href="a00206_source.xhtml#l00115">m_pCBlockAudio</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00139">getNumBlocks()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a2957fc23663fb6b67fabb6ecda9ae0bd_cgraph.svg" width="431" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00514_a2957fc23663fb6b67fabb6ecda9ae0bd_icgraph.svg" width="100%" height="401"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa4193070cac8cac64ad8dc222fb612e8" name="aa4193070cac8cac64ad8dc222fb612e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4193070cac8cac64ad8dc222fb612e8">&#9670;&#160;</a></span>getNumBlocks() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::getNumBlocks </td>
          <td>(</td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>iNumBlocks</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >returns size of matrix to be allocated by user </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">iNumBlocks</td><td>(number of blocks, to be written) equals number of hops </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00139">139</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  140</span>{</div>
<div class="line"><span class="lineno">  141</span>    <span class="keywordflow">if</span> (!<a class="code hl_variable" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a>)</div>
<div class="line"><span class="lineno">  142</span>    {</div>
<div class="line"><span class="lineno">  143</span>        iNumBlocks = 0;</div>
<div class="line"><span class="lineno">  144</span>        <span class="keywordflow">return</span> Error_t::kFunctionIllegalCallError;</div>
<div class="line"><span class="lineno">  145</span>    }</div>
<div class="line"><span class="lineno">  146</span> </div>
<div class="line"><span class="lineno">  147</span>    iNumBlocks = this-&gt;<a class="code hl_function" href="a00514.xhtml#a2957fc23663fb6b67fabb6ecda9ae0bd">getNumBlocks</a>();</div>
<div class="line"><span class="lineno">  148</span> </div>
<div class="line"><span class="lineno">  149</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  150</span>}</div>
<div class="ttc" id="aa00514_xhtml_a2957fc23663fb6b67fabb6ecda9ae0bd"><div class="ttname"><a href="a00514.xhtml#a2957fc23663fb6b67fabb6ecda9ae0bd">CNoveltyIf::getNumBlocks</a></div><div class="ttdeci">int getNumBlocks() const</div><div class="ttdef"><b>Definition:</b> <a href="a00113_source.xhtml#l00152">Novelty.cpp:152</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00113_source.xhtml#l00152">getNumBlocks()</a>, and <a class="el" href="a00206_source.xhtml#l00131">m_bIsInitialized</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00041_source.xhtml#l00114">CBeatHistoIf::compBeatHisto()</a>, <a class="el" href="a00041_source.xhtml#l00224">CBeatHistoIf::init_()</a>, and <a class="el" href="a00023_source.xhtml#l00017">main()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_aa4193070cac8cac64ad8dc222fb612e8_cgraph.svg" width="654" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00514_aa4193070cac8cac64ad8dc222fb612e8_icgraph.svg" width="100%" height="401"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a97fd24dca5d494d038486b7c6cb74cce" name="a97fd24dca5d494d038486b7c6cb74cce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a97fd24dca5d494d038486b7c6cb74cce">&#9670;&#160;</a></span>getTimeStamp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float CNoveltyIf::getTimeStamp </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iBlockIdx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >returns time stamps </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">iBlockIdx</td><td>index of block </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>float time stamp </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00160">160</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  161</span>{</div>
<div class="line"><span class="lineno">  162</span>    <span class="keywordflow">return</span> <a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>-&gt;<a class="code hl_function" href="a00542.xhtml#a95d0310c888433e7e45806538dc0d347">getTimeStamp</a>(iBlockIdx);</div>
<div class="line"><span class="lineno">  163</span>}</div>
<div class="ttc" id="aa00542_xhtml_a95d0310c888433e7e45806538dc0d347"><div class="ttname"><a href="a00542.xhtml#a95d0310c888433e7e45806538dc0d347">CBlockAudioIf::getTimeStamp</a></div><div class="ttdeci">float getTimeStamp(long long iBlockIdx)</div><div class="ttdef"><b>Definition:</b> <a href="a00161_source.xhtml#l00066">ToolBlockAudio.h:66</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00161_source.xhtml#l00066">CBlockAudioIf::getTimeStamp()</a>, and <a class="el" href="a00206_source.xhtml#l00115">m_pCBlockAudio</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00023_source.xhtml#l00017">main()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a97fd24dca5d494d038486b7c6cb74cce_cgraph.svg" width="430" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a97fd24dca5d494d038486b7c6cb74cce_icgraph.svg" width="284" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="afeb1d21ee59d7f745fca0e22ab33a65b" name="afeb1d21ee59d7f745fca0e22ab33a65b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afeb1d21ee59d7f745fca0e22ab33a65b">&#9670;&#160;</a></span>getTimeStamps()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::getTimeStamps </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>pfAxisTicks</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p >returns time stamps </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pfAxisTicks</td><td>(user- allocated, to be written) length iNumBlocks </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Error_t </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00165">165</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  166</span>{</div>
<div class="line"><span class="lineno">  167</span>    <span class="keywordflow">if</span> (!<a class="code hl_variable" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a>)</div>
<div class="line"><span class="lineno">  168</span>    {</div>
<div class="line"><span class="lineno">  169</span>        <span class="keywordflow">return</span> Error_t::kFunctionIllegalCallError;</div>
<div class="line"><span class="lineno">  170</span>    }</div>
<div class="line"><span class="lineno">  171</span> </div>
<div class="line"><span class="lineno">  172</span>    <span class="keywordflow">if</span> (!pfAxisTicks)</div>
<div class="line"><span class="lineno">  173</span>        <span class="keywordflow">return</span> Error_t::kFunctionInvalidArgsError;</div>
<div class="line"><span class="lineno">  174</span> </div>
<div class="line"><span class="lineno">  175</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">m_iBlockLength</a> &gt; 0);</div>
<div class="line"><span class="lineno">  176</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">m_iHopLength</a> &gt; 0);</div>
<div class="line"><span class="lineno">  177</span>    assert(<a class="code hl_variable" href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">m_fSampleRate</a> &gt; 0);</div>
<div class="line"><span class="lineno">  178</span> </div>
<div class="line"><span class="lineno">  179</span>    <span class="keywordtype">long</span> <span class="keywordtype">long</span> iNumBlocks = <a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>-&gt;<a class="code hl_function" href="a00542.xhtml#a595b3a391e2540a1dc9e53edf8634494">getNumBlocks</a>();</div>
<div class="line"><span class="lineno">  180</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumBlocks; n++)</div>
<div class="line"><span class="lineno">  181</span>        pfAxisTicks[n] = <a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>-&gt;<a class="code hl_function" href="a00542.xhtml#a95d0310c888433e7e45806538dc0d347">getTimeStamp</a>(n);</div>
<div class="line"><span class="lineno">  182</span> </div>
<div class="line"><span class="lineno">  183</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  184</span>}</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00161_source.xhtml#l00049">CBlockAudioIf::getNumBlocks()</a>, <a class="el" href="a00161_source.xhtml#l00066">CBlockAudioIf::getTimeStamp()</a>, <a class="el" href="a00206_source.xhtml#l00131">m_bIsInitialized</a>, <a class="el" href="a00206_source.xhtml#l00126">m_fSampleRate</a>, <a class="el" href="a00206_source.xhtml#l00123">m_iBlockLength</a>, <a class="el" href="a00206_source.xhtml#l00124">m_iHopLength</a>, and <a class="el" href="a00206_source.xhtml#l00115">m_pCBlockAudio</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00041_source.xhtml#l00224">CBeatHistoIf::init_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_afeb1d21ee59d7f745fca0e22ab33a65b_cgraph.svg" width="438" height="86"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_afeb1d21ee59d7f745fca0e22ab33a65b_icgraph.svg" width="652" height="36"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a4beb226d8e7dd927c253667647e837ec" name="a4beb226d8e7dd927c253667647e837ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4beb226d8e7dd927c253667647e837ec">&#9670;&#160;</a></span>init_()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::init_ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="a00514.xhtml#aaaa808da8acb1f5df095f6178faeb4f4">Novelty_t</a>&#160;</td>
          <td class="paramname"><em>eNoveltyIdx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>init configuration </p>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00323">323</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  324</span>{</div>
<div class="line"><span class="lineno">  325</span>    <span class="comment">// initialize FFT and fft  buffer</span></div>
<div class="line"><span class="lineno">  326</span>    <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a> = <span class="keyword">new</span> <a class="code hl_class" href="a00474.xhtml">CFft</a>();</div>
<div class="line"><span class="lineno">  327</span>    <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#adea9b0cecccfdb5a3da3218da6f683dd">init</a>(<a class="code hl_variable" href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">m_iBlockLength</a>);</div>
<div class="line"><span class="lineno">  328</span> </div>
<div class="line"><span class="lineno">  329</span>    <span class="comment">// allocate processing memory</span></div>
<div class="line"><span class="lineno">  330</span>    <a class="code hl_function" href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>, <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#a9cb162394031e8b496f7a39b51c31d20">getLength</a>(<a class="code hl_enumvalue" href="a00474.xhtml#aaeae67c99cd6e689243892e429a66e33aae7f8e9cc1d7b43fa0239ce2122d4d6a">CFft::kLengthFft</a>));</div>
<div class="line"><span class="lineno">  331</span>    <a class="code hl_function" href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(<a class="code hl_variable" href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">m_pfProcBuff2</a>, <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#a9cb162394031e8b496f7a39b51c31d20">getLength</a>(<a class="code hl_enumvalue" href="a00474.xhtml#aaeae67c99cd6e689243892e429a66e33aae7f8e9cc1d7b43fa0239ce2122d4d6a">CFft::kLengthFft</a>));</div>
<div class="line"><span class="lineno">  332</span> </div>
<div class="line"><span class="lineno">  333</span>    <a class="code hl_function" href="a00518.xhtml#ad4c0e04f9ae0eaa7ccf48509125cab1a">CNoveltyFromBlockIf::create</a>(<a class="code hl_variable" href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">m_pCNovelty</a>, eNoveltyIdx, <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>-&gt;<a class="code hl_function" href="a00474.xhtml#a9cb162394031e8b496f7a39b51c31d20">getLength</a>(<a class="code hl_enumvalue" href="a00474.xhtml#aaeae67c99cd6e689243892e429a66e33a280c54c7da09951bd33a05dfb5dd4f8e">CFft::kLengthMagnitude</a>), <a class="code hl_variable" href="a00514.xhtml#a6a278e55c0f750f8732c432dce067aa8">m_fSampleRate</a>);</div>
<div class="line"><span class="lineno">  334</span>    <a class="code hl_function" href="a00586.xhtml#a9008feaaece203a6bf1220ab81e1b983">CMovingAverage::create</a>(<a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>);</div>
<div class="line"><span class="lineno">  335</span> </div>
<div class="line"><span class="lineno">  336</span>    <a class="code hl_variable" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a> = <span class="keyword">true</span>;</div>
<div class="line"><span class="lineno">  337</span> </div>
<div class="line"><span class="lineno">  338</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  339</span>}</div>
<div class="ttc" id="aa00474_xhtml"><div class="ttname"><a href="a00474.xhtml">CFft</a></div><div class="ttdoc">class for FFT computation with windowing</div><div class="ttdef"><b>Definition:</b> <a href="a00182_source.xhtml#l00008">Fft.h:9</a></div></div>
<div class="ttc" id="aa00474_xhtml_aaeae67c99cd6e689243892e429a66e33aae7f8e9cc1d7b43fa0239ce2122d4d6a"><div class="ttname"><a href="a00474.xhtml#aaeae67c99cd6e689243892e429a66e33aae7f8e9cc1d7b43fa0239ce2122d4d6a">CFft::kLengthFft</a></div><div class="ttdeci">@ kLengthFft</div><div class="ttdoc">length of the FFT</div><div class="ttdef"><b>Definition:</b> <a href="a00182_source.xhtml#l00105">Fft.h:105</a></div></div>
<div class="ttc" id="aa00474_xhtml_adea9b0cecccfdb5a3da3218da6f683dd"><div class="ttname"><a href="a00474.xhtml#adea9b0cecccfdb5a3da3218da6f683dd">CFft::init</a></div><div class="ttdeci">Error_t init(int iBlockLength, int iZeroPadFactor=1, WindowFunction_t eWindow=kWindowHann, Windowing_t eWindowing=kPreWindow)</div><div class="ttdef"><b>Definition:</b> <a href="a00077_source.xhtml#l00024">Fft.cpp:24</a></div></div>
<div class="ttc" id="aa00518_xhtml_ad4c0e04f9ae0eaa7ccf48509125cab1a"><div class="ttname"><a href="a00518.xhtml#ad4c0e04f9ae0eaa7ccf48509125cab1a">CNoveltyFromBlockIf::create</a></div><div class="ttdeci">static Error_t create(CNoveltyFromBlockIf *&amp;pCInstance, CNoveltyIf::Novelty_t eNoveltyIdx, int iDataLength, float fSampleRate=1.F)</div><div class="ttdef"><b>Definition:</b> <a href="a00092_source.xhtml#l00084">NoveltyFromBlock.cpp:84</a></div></div>
<div class="ttc" id="aa00586_xhtml_a9008feaaece203a6bf1220ab81e1b983"><div class="ttname"><a href="a00586.xhtml#a9008feaaece203a6bf1220ab81e1b983">CMovingAverage::create</a></div><div class="ttdeci">static Error_t create(CMovingAverage *&amp;pCInstance)</div><div class="ttdef"><b>Definition:</b> <a href="a00233_source.xhtml#l00129">ToolLowPass.h:129</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00194_source.xhtml#l00025">CVector::alloc()</a>, <a class="el" href="a00233_source.xhtml#l00129">CMovingAverage::create()</a>, <a class="el" href="a00092_source.xhtml#l00084">CNoveltyFromBlockIf::create()</a>, <a class="el" href="a00077_source.xhtml#l00322">CFft::getLength()</a>, <a class="el" href="a00077_source.xhtml#l00024">CFft::init()</a>, <a class="el" href="a00182_source.xhtml#l00105">CFft::kLengthFft</a>, <a class="el" href="a00182_source.xhtml#l00107">CFft::kLengthMagnitude</a>, <a class="el" href="a00206_source.xhtml#l00131">m_bIsInitialized</a>, <a class="el" href="a00206_source.xhtml#l00126">m_fSampleRate</a>, <a class="el" href="a00206_source.xhtml#l00123">m_iBlockLength</a>, <a class="el" href="a00206_source.xhtml#l00119">m_pCFft</a>, <a class="el" href="a00206_source.xhtml#l00121">m_pCLpFilter</a>, <a class="el" href="a00206_source.xhtml#l00117">m_pCNovelty</a>, <a class="el" href="a00206_source.xhtml#l00129">m_pfProcBuff1</a>, and <a class="el" href="a00206_source.xhtml#l00128">m_pfProcBuff2</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, and <a class="el" href="a00113_source.xhtml#l00069">CNoveltyFromVector::CNoveltyFromVector()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00514_a4beb226d8e7dd927c253667647e837ec_cgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a4beb226d8e7dd927c253667647e837ec_icgraph.svg" width="358" height="115"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a4a4ce4da9378a136cb2d98dceb79f398" name="a4a4ce4da9378a136cb2d98dceb79f398"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a4ce4da9378a136cb2d98dceb79f398">&#9670;&#160;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00514.xhtml">CNoveltyIf</a> &amp; CNoveltyIf::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="a00514.xhtml">CNoveltyIf</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a119fc32e085bb978525ea9596ee2e9c1" name="a119fc32e085bb978525ea9596ee2e9c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a119fc32e085bb978525ea9596ee2e9c1">&#9670;&#160;</a></span>reset_()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00158.xhtml#a4e8c0d09726859e3d3369c0da5a1aa7f">Error_t</a> CNoveltyIf::reset_ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>reset configuration </p>

<p class="definition">Definition at line <a class="el" href="a00113_source.xhtml#l00298">298</a> of file <a class="el" href="a00113_source.xhtml">Novelty.cpp</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  299</span>{</div>
<div class="line"><span class="lineno">  300</span>    <a class="code hl_function" href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(<a class="code hl_variable" href="a00514.xhtml#a0b1fb5d381cb1f47ac2409a3955d0a78">m_pfProcBuff1</a>);</div>
<div class="line"><span class="lineno">  301</span> </div>
<div class="line"><span class="lineno">  302</span>    <a class="code hl_function" href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(<a class="code hl_variable" href="a00514.xhtml#aa53c5f9c95a5de6bf0129786562860f8">m_pfProcBuff2</a>);</div>
<div class="line"><span class="lineno">  303</span> </div>
<div class="line"><span class="lineno">  304</span>    <span class="keyword">delete</span> <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a>;</div>
<div class="line"><span class="lineno">  305</span>    <a class="code hl_variable" href="a00514.xhtml#a04ad767c4bbb8eceb60b5f3faf5c5e23">m_pCFft</a> = 0;</div>
<div class="line"><span class="lineno">  306</span> </div>
<div class="line"><span class="lineno">  307</span>    <span class="keyword">delete</span> <a class="code hl_variable" href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">m_pCNormalize</a>;</div>
<div class="line"><span class="lineno">  308</span>    <a class="code hl_variable" href="a00514.xhtml#a57a60a36f228fc6de54ce33417b61b10">m_pCNormalize</a> = 0;</div>
<div class="line"><span class="lineno">  309</span> </div>
<div class="line"><span class="lineno">  310</span>    <a class="code hl_function" href="a00542.xhtml#a13d2bd6e36210dde0c64d188c1266b88">CBlockAudioIf::destroy</a>(<a class="code hl_variable" href="a00514.xhtml#a84efaf39d353e332e0f99eddb06ba39e">m_pCBlockAudio</a>);</div>
<div class="line"><span class="lineno">  311</span>    <a class="code hl_function" href="a00518.xhtml#a2066599bb659fd90d13bc8a57dec005e">CNoveltyFromBlockIf::destroy</a>(<a class="code hl_variable" href="a00514.xhtml#a62dccceea81ced7995f41efb4a3195a7">m_pCNovelty</a>);</div>
<div class="line"><span class="lineno">  312</span> </div>
<div class="line"><span class="lineno">  313</span>    <a class="code hl_variable" href="a00514.xhtml#a5f24b97fe49f8cfd88eb339464765c9b">m_iBlockLength</a> = 0;</div>
<div class="line"><span class="lineno">  314</span>    <a class="code hl_variable" href="a00514.xhtml#a8856282e4ff8634a849e189e6fea73bf">m_iHopLength</a> = 0;</div>
<div class="line"><span class="lineno">  315</span> </div>
<div class="line"><span class="lineno">  316</span>    <a class="code hl_function" href="a00586.xhtml#a5a6b1921f58c43d9daa618a97e62754f">CMovingAverage::destroy</a>(<a class="code hl_variable" href="a00514.xhtml#af7263705b4af451ba7f6f7d40efd8f82">m_pCLpFilter</a>);</div>
<div class="line"><span class="lineno">  317</span> </div>
<div class="line"><span class="lineno">  318</span>    <a class="code hl_variable" href="a00514.xhtml#abdfa2c2dc127e43260ea8455b969052c">m_bIsInitialized</a> = <span class="keyword">false</span>;</div>
<div class="line"><span class="lineno">  319</span> </div>
<div class="line"><span class="lineno">  320</span>    <span class="keywordflow">return</span> Error_t::kNoError;</div>
<div class="line"><span class="lineno">  321</span>}</div>
<div class="ttc" id="aa00518_xhtml_a2066599bb659fd90d13bc8a57dec005e"><div class="ttname"><a href="a00518.xhtml#a2066599bb659fd90d13bc8a57dec005e">CNoveltyFromBlockIf::destroy</a></div><div class="ttdeci">static Error_t destroy(CNoveltyFromBlockIf *&amp;pCInstance)</div><div class="ttdef"><b>Definition:</b> <a href="a00092_source.xhtml#l00094">NoveltyFromBlock.cpp:94</a></div></div>
<div class="ttc" id="aa00542_xhtml_a13d2bd6e36210dde0c64d188c1266b88"><div class="ttname"><a href="a00542.xhtml#a13d2bd6e36210dde0c64d188c1266b88">CBlockAudioIf::destroy</a></div><div class="ttdeci">static Error_t destroy(CBlockAudioIf *&amp;pCInstance)</div><div class="ttdef"><b>Definition:</b> <a href="a00161_source.xhtml#l00038">ToolBlockAudio.h:38</a></div></div>
<div class="ttc" id="aa00586_xhtml_a5a6b1921f58c43d9daa618a97e62754f"><div class="ttname"><a href="a00586.xhtml#a5a6b1921f58c43d9daa618a97e62754f">CMovingAverage::destroy</a></div><div class="ttdeci">static Error_t destroy(CMovingAverage *&amp;pCInstance)</div><div class="ttdef"><b>Definition:</b> <a href="a00233_source.xhtml#l00141">ToolLowPass.h:141</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00161_source.xhtml#l00038">CBlockAudioIf::destroy()</a>, <a class="el" href="a00233_source.xhtml#l00141">CMovingAverage::destroy()</a>, <a class="el" href="a00092_source.xhtml#l00094">CNoveltyFromBlockIf::destroy()</a>, <a class="el" href="a00194_source.xhtml#l00057">CVector::free()</a>, <a class="el" href="a00206_source.xhtml#l00131">m_bIsInitialized</a>, <a class="el" href="a00206_source.xhtml#l00123">m_iBlockLength</a>, <a class="el" href="a00206_source.xhtml#l00124">m_iHopLength</a>, <a class="el" href="a00206_source.xhtml#l00115">m_pCBlockAudio</a>, <a class="el" href="a00206_source.xhtml#l00119">m_pCFft</a>, <a class="el" href="a00206_source.xhtml#l00121">m_pCLpFilter</a>, <a class="el" href="a00206_source.xhtml#l00113">m_pCNormalize</a>, <a class="el" href="a00206_source.xhtml#l00117">m_pCNovelty</a>, <a class="el" href="a00206_source.xhtml#l00129">m_pfProcBuff1</a>, and <a class="el" href="a00206_source.xhtml#l00128">m_pfProcBuff2</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, <a class="el" href="a00113_source.xhtml#l00088">CNoveltyIf()</a>, and <a class="el" href="a00113_source.xhtml#l00093">~CNoveltyIf()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a119fc32e085bb978525ea9596ee2e9c1_cgraph.svg" width="354" height="200"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00514_a119fc32e085bb978525ea9596ee2e9c1_icgraph.svg" width="370" height="151"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="abdfa2c2dc127e43260ea8455b969052c" name="abdfa2c2dc127e43260ea8455b969052c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdfa2c2dc127e43260ea8455b969052c">&#9670;&#160;</a></span>m_bIsInitialized</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00269.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> CNoveltyIf::m_bIsInitialized = <a class="el" href="a00269.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>true if initialized </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00131">131</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00139">getNumBlocks()</a>, <a class="el" href="a00113_source.xhtml#l00165">getTimeStamps()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="a6a278e55c0f750f8732c432dce067aa8" name="a6a278e55c0f750f8732c432dce067aa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a278e55c0f750f8732c432dce067aa8">&#9670;&#160;</a></span>m_fSampleRate</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float CNoveltyIf::m_fSampleRate = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>sample rate </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00126">126</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, <a class="el" href="a00113_source.xhtml#l00069">CNoveltyFromVector::CNoveltyFromVector()</a>, <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00165">getTimeStamps()</a>, and <a class="el" href="a00113_source.xhtml#l00323">init_()</a>.</p>

</div>
</div>
<a id="a5f24b97fe49f8cfd88eb339464765c9b" name="a5f24b97fe49f8cfd88eb339464765c9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f24b97fe49f8cfd88eb339464765c9b">&#9670;&#160;</a></span>m_iBlockLength</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int CNoveltyIf::m_iBlockLength = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>fft length </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00123">123</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, <a class="el" href="a00113_source.xhtml#l00069">CNoveltyFromVector::CNoveltyFromVector()</a>, <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00165">getTimeStamps()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="a8856282e4ff8634a849e189e6fea73bf" name="a8856282e4ff8634a849e189e6fea73bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8856282e4ff8634a849e189e6fea73bf">&#9670;&#160;</a></span>m_iHopLength</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int CNoveltyIf::m_iHopLength = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>hop length </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00124">124</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, <a class="el" href="a00113_source.xhtml#l00069">CNoveltyFromVector::CNoveltyFromVector()</a>, <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00165">getTimeStamps()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="a84efaf39d353e332e0f99eddb06ba39e" name="a84efaf39d353e332e0f99eddb06ba39e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84efaf39d353e332e0f99eddb06ba39e">&#9670;&#160;</a></span>m_pCBlockAudio</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00542.xhtml">CBlockAudioIf</a>* CNoveltyIf::m_pCBlockAudio = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>instantiate for blocking time domain signal </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00115">115</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, <a class="el" href="a00113_source.xhtml#l00069">CNoveltyFromVector::CNoveltyFromVector()</a>, <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00152">getNumBlocks()</a>, <a class="el" href="a00113_source.xhtml#l00160">getTimeStamp()</a>, <a class="el" href="a00113_source.xhtml#l00165">getTimeStamps()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="a04ad767c4bbb8eceb60b5f3faf5c5e23" name="a04ad767c4bbb8eceb60b5f3faf5c5e23"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04ad767c4bbb8eceb60b5f3faf5c5e23">&#9670;&#160;</a></span>m_pCFft</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00474.xhtml">CFft</a>* CNoveltyIf::m_pCFft = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>fft instance </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00119">119</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00286">computeMagSpectrum_()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="af7263705b4af451ba7f6f7d40efd8f82" name="af7263705b4af451ba7f6f7d40efd8f82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7263705b4af451ba7f6f7d40efd8f82">&#9670;&#160;</a></span>m_pCLpFilter</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00586.xhtml">CMovingAverage</a>* CNoveltyIf::m_pCLpFilter = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>smoothing filter handle </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00121">121</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="a57a60a36f228fc6de54ce33417b61b10" name="a57a60a36f228fc6de54ce33417b61b10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a57a60a36f228fc6de54ce33417b61b10">&#9670;&#160;</a></span>m_pCNormalize</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00606.xhtml">CNormalizeAudio</a>* CNoveltyIf::m_pCNormalize = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>instantiate if audio file normalization is wanted </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00113">113</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00037">CNoveltyFromFile::CNoveltyFromFile()</a>, <a class="el" href="a00113_source.xhtml#l00069">CNoveltyFromVector::CNoveltyFromVector()</a>, <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>, and <a class="el" href="a00113_source.xhtml#l00022">CNoveltyFromFile::~CNoveltyFromFile()</a>.</p>

</div>
</div>
<a id="a62dccceea81ced7995f41efb4a3195a7" name="a62dccceea81ced7995f41efb4a3195a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62dccceea81ced7995f41efb4a3195a7">&#9670;&#160;</a></span>m_pCNovelty</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="a00518.xhtml">CNoveltyFromBlockIf</a>* CNoveltyIf::m_pCNovelty = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>instance for instantaneous novelty extraction </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00117">117</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<a id="a0b1fb5d381cb1f47ac2409a3955d0a78" name="a0b1fb5d381cb1f47ac2409a3955d0a78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b1fb5d381cb1f47ac2409a3955d0a78">&#9670;&#160;</a></span>m_pfProcBuff1</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float* CNoveltyIf::m_pfProcBuff1 = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>temporary buffer </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00129">129</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00286">computeMagSpectrum_()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>, and <a class="el" href="a00113_source.xhtml#l00022">CNoveltyFromFile::~CNoveltyFromFile()</a>.</p>

</div>
</div>
<a id="aa53c5f9c95a5de6bf0129786562860f8" name="aa53c5f9c95a5de6bf0129786562860f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa53c5f9c95a5de6bf0129786562860f8">&#9670;&#160;</a></span>m_pfProcBuff2</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float* CNoveltyIf::m_pfProcBuff2 = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>temporary buffer for current spectrum </p>

<p class="definition">Definition at line <a class="el" href="a00206_source.xhtml#l00128">128</a> of file <a class="el" href="a00206_source.xhtml">Novelty.h</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00113_source.xhtml#l00186">compNovelty()</a>, <a class="el" href="a00113_source.xhtml#l00286">computeMagSpectrum_()</a>, <a class="el" href="a00113_source.xhtml#l00323">init_()</a>, and <a class="el" href="a00113_source.xhtml#l00298">reset_()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="a00206_source.xhtml">Novelty.h</a></li>
<li><a class="el" href="a00113_source.xhtml">Novelty.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00514.xhtml">CNoveltyIf</a></li>
    <li class="footer">Generated on Mon Sep 12 2022 18:38:30 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.5 </li>
  </ul>
</div>
</body>
</html>
