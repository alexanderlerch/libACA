<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: Class Index</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.2.7</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classes.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Class Index</div></div>
</div><!--header-->
<div class="contents">
<div class="qindex"><a class="qindex" href="#letter_A">A</a>&#160;|&#160;<a class="qindex" href="#letter_B">B</a>&#160;|&#160;<a class="qindex" href="#letter_C">C</a>&#160;|&#160;<a class="qindex" href="#letter_D">D</a>&#160;|&#160;<a class="qindex" href="#letter_E">E</a>&#160;|&#160;<a class="qindex" href="#letter_F">F</a>&#160;|&#160;<a class="qindex" href="#letter_G">G</a>&#160;|&#160;<a class="qindex" href="#letter_I">I</a>&#160;|&#160;<a class="qindex" href="#letter_L">L</a>&#160;|&#160;<a class="qindex" href="#letter_M">M</a>&#160;|&#160;<a class="qindex" href="#letter_N">N</a>&#160;|&#160;<a class="qindex" href="#letter_O">O</a>&#160;|&#160;<a class="qindex" href="#letter_P">P</a>&#160;|&#160;<a class="qindex" href="#letter_R">R</a>&#160;|&#160;<a class="qindex" href="#letter_S">S</a>&#160;|&#160;<a class="qindex" href="#letter_T">T</a>&#160;|&#160;<a class="qindex" href="#letter_U">U</a>&#160;|&#160;<a class="qindex" href="#letter_V">V</a>&#160;|&#160;<a class="qindex" href="#letter_W">W</a></div>
<div class="classindex">
<dl class="classindex even">
<dt class="alphachar"><a id="letter_A" name="letter_A">A</a></dt>
<dd><a class="el" href="a00678.xhtml">always_false</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00974.xhtml">Approx</a> (<a class="el" href="a00304.xhtml">Catch::Detail</a>)</dd><dd><a class="el" href="a01070.xhtml">ApproxMatcher</a> (<a class="el" href="a00314.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01114.xhtml">as</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00902.xhtml">AssertionHandler</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00718.xhtml">AssertionInfo</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00898.xhtml">AssertionReaction</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00706.xhtml">AutoReg</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_B" name="letter_B">B</a></dt>
<dd><a class="el" href="a00870.xhtml">BinaryExpr</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_C" name="letter_C">C</a></dt>
<dd><a class="el" href="a00922.xhtml">Capturer</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01030.xhtml">CasedString</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00646.xhtml">CaseSensitive</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00642.xhtml">Catch_global_namespace_dummy</a></dd><dd><a class="el" href="a00454.xhtml">CAudioFileIf</a></dd><dd><a class="el" href="a00446.xhtml">CAudioFileRaw</a></dd><dd><a class="el" href="a00450.xhtml">CAudioFileSndLib</a></dd><dd><a class="el" href="a00462.xhtml">CBeatHistoIf</a></dd><dd><a class="el" href="a00426.xhtml">CBlockAudioBuffer</a></dd><dd><a class="el" href="a00422.xhtml">CBlockAudioFile</a></dd><dd><a class="el" href="a00554.xhtml">CBlockAudioIf</a></dd><dd><a class="el" href="a00494.xhtml">CButterLp</a></dd><dd><a class="el" href="a00558.xhtml">CCcf</a></dd><dd><a class="el" href="a00470.xhtml">CChordFromBlockIf</a></dd><dd><a class="el" href="a00322.xhtml">CChordFromFile</a></dd><dd><a class="el" href="a00326.xhtml">CChordFromVector</a></dd><dd><a class="el" href="a00466.xhtml">CChordIf</a></dd><dd><a class="el" href="a00474.xhtml">CClassifierBase</a></dd><dd><a class="el" href="a00562.xhtml">CConversion</a></dd><dd><a class="el" href="a00626.xhtml">CDtw</a></dd><dd><a class="el" href="a00482.xhtml">CFeatureFromBlockIf</a></dd><dd><a class="el" href="a00330.xhtml">CFeatureFromFile</a></dd><dd><a class="el" href="a00334.xhtml">CFeatureFromVector</a></dd><dd><a class="el" href="a00478.xhtml">CFeatureIf</a></dd><dd><a class="el" href="a00338.xhtml">CFeatureSpectralFlux</a></dd><dd><a class="el" href="a00342.xhtml">CFeatureSpectralMfccs</a></dd><dd><a class="el" href="a00346.xhtml">CFeatureSpectralPitchChroma</a></dd><dd><a class="el" href="a00350.xhtml">CFeatureSpectralRolloff</a></dd><dd><a class="el" href="a00354.xhtml">CFeatureSpectralTonalPowerRatio</a></dd><dd><a class="el" href="a00358.xhtml">CFeatureTimeAcfCoeff</a></dd><dd><a class="el" href="a00362.xhtml">CFeatureTimeMaxAcf</a></dd><dd><a class="el" href="a00366.xhtml">CFeatureTimePeakEnvelope</a></dd><dd><a class="el" href="a00370.xhtml">CFeatureTimeRms</a></dd><dd><a class="el" href="a00486.xhtml">CFft</a></dd><dd><a class="el" href="a00490.xhtml">CFilter</a></dd><dd><a class="el" href="a00566.xhtml">CFingerprint</a></dd><dd><a class="el" href="a00430.xhtml">CGammatone</a></dd><dd><a class="el" href="a00434.xhtml">CGammaToneFbFromFile</a></dd><dd><a class="el" href="a00438.xhtml">CGammaToneFbFromVector</a></dd><dd><a class="el" href="a00570.xhtml">CGammaToneFbIf</a></dd><dd><a class="el" href="a00442.xhtml">CGammaToneFbRealTime</a></dd><dd><a class="el" href="a00578.xhtml">CGmm</a></dd><dd><a class="el" href="a00582.xhtml">CGmmClassifier</a></dd><dd><a class="el" href="a00574.xhtml">CGmmResult</a></dd><dd><a class="el" href="a01134.xhtml">ChunkGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00586.xhtml">CInstFreq</a></dd><dd><a class="el" href="a00518.xhtml">CKey</a></dd><dd><a class="el" href="a00522.xhtml">CKeyFromChroma</a></dd><dd><a class="el" href="a00630.xhtml">CKmeans</a></dd><dd><a class="el" href="a00634.xhtml">CKnn</a></dd><dd><a class="el" href="a00590.xhtml">CLeaveOneOutCrossVal</a></dd><dd><a class="el" href="a00498.xhtml">CMatrix</a></dd><dd><a class="el" href="a00598.xhtml">CMovingAverage</a></dd><dd><a class="el" href="a00606.xhtml">CNmf</a></dd><dd><a class="el" href="a00602.xhtml">CNmfResult</a></dd><dd><a class="el" href="a00618.xhtml">CNormalizeAudio</a></dd><dd><a class="el" href="a00530.xhtml">CNoveltyFromBlockIf</a></dd><dd><a class="el" href="a00374.xhtml">CNoveltyFromFile</a></dd><dd><a class="el" href="a00378.xhtml">CNoveltyFromVector</a></dd><dd><a class="el" href="a00526.xhtml">CNoveltyIf</a></dd><dd><a class="el" href="a01058.xhtml">ContainsElementMatcher</a> (<a class="el" href="a00314.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01042.xhtml">ContainsMatcher</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a01062.xhtml">ContainsMatcher</a> (<a class="el" href="a00314.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a00926.xhtml">Counts</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00610.xhtml">CPca</a></dd><dd><a class="el" href="a00538.xhtml">CPitchFromBlockIf</a></dd><dd><a class="el" href="a00382.xhtml">CPitchFromFile</a></dd><dd><a class="el" href="a00386.xhtml">CPitchFromVector</a></dd><dd><a class="el" href="a00534.xhtml">CPitchIf</a></dd><dd><a class="el" href="a00390.xhtml">CPitchSpectralAcf</a></dd><dd><a class="el" href="a00394.xhtml">CPitchSpectralHps</a></dd><dd><a class="el" href="a00398.xhtml">CPitchTimeAcf</a></dd><dd><a class="el" href="a00406.xhtml">CPitchTimeAmdf</a></dd><dd><a class="el" href="a00402.xhtml">CPitchTimeAuditory</a></dd><dd><a class="el" href="a00410.xhtml">CPitchTimeZeroCrossings</a></dd><dd><a class="el" href="a00614.xhtml">CPreProc</a></dd><dd><a class="el" href="a00622.xhtml">CResample</a></dd><dd><a class="el" href="a00502.xhtml">CRingBuffer</a></dd><dd><a class="el" href="a00594.xhtml">CSinglePoleLp</a></dd><dd><a class="el" href="a00414.xhtml">CSpectrogramFromFile</a></dd><dd><a class="el" href="a00418.xhtml">CSpectrogramFromVector</a></dd><dd><a class="el" href="a00542.xhtml">CSpectrogramIf</a></dd><dd><a class="el" href="a00550.xhtml">CSubFingerprint</a></dd><dd><a class="el" href="a00506.xhtml">CSynthesis</a></dd><dd><a class="el" href="a00510.xhtml">CUtil</a></dd><dd><a class="el" href="a00514.xhtml">CVector</a></dd><dd><a class="el" href="a00638.xhtml">CViterbi</a></dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_D" name="letter_D">D</a></dt>
<dd><a class="el" href="a00882.xhtml">Decomposer</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_E" name="letter_E">E</a></dt>
<dd><a class="el" href="a01050.xhtml">EndsWithMatcher</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00730.xhtml">EnumInfo</a> (<a class="el" href="a00304.xhtml">Catch::Detail</a>)</dd><dd><a class="el" href="a01038.xhtml">EqualsMatcher</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a01066.xhtml">EqualsMatcher</a> (<a class="el" href="a00314.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01010.xhtml">ExceptionMessageMatcher</a> (<a class="el" href="a00309.xhtml">Catch::Matchers::Exception</a>)</dd><dd><a class="el" href="a00970.xhtml">ExceptionTranslatorRegistrar::ExceptionTranslator</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00966.xhtml">ExceptionTranslatorRegistrar</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00878.xhtml">ExprLhs</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_F" name="letter_F">F</a></dt>
<dd><a class="el" href="a00458.xhtml">CAudioFileIf::FileSpec_t</a></dd><dd><a class="el" href="a01122.xhtml">FilterGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01102.xhtml">FixedValuesGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_G" name="letter_G">G</a></dt>
<dd><a class="el" href="a01090.xhtml">GeneratorException</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01110.xhtml">Generators</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01082.xhtml">GeneratorUntypedBase</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01106.xhtml">GeneratorWrapper</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_I" name="letter_I">I</a></dt>
<dd><a class="el" href="a01170.xhtml">IConfig</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01138.xhtml">IContext</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00958.xhtml">IExceptionTranslator</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00962.xhtml">IExceptionTranslatorRegistry</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01094.xhtml">IGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01086.xhtml">IGeneratorTracker</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01142.xhtml">IMutableContext</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00734.xhtml">IMutableEnumValuesRegistry</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00954.xhtml">IMutableRegistryHub</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00950.xhtml">IRegistryHub</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00886.xhtml">IResultCapture</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01202.xhtml">IRunner</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00690.xhtml">is_callable</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00694.xhtml">is_callable&lt; Fun(Args...)&gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00686.xhtml">is_callable_tester</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00854.xhtml">is_range</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00846.xhtml">is_range_impl</a> (<a class="el" href="a00305.xhtml">Catch::detail</a>)</dd><dd><a class="el" href="a00850.xhtml">is_range_impl&lt; T, typename void_type&lt; decltype(begin(std::declval&lt; T &gt;()))&gt;::type &gt;</a> (<a class="el" href="a00305.xhtml">Catch::detail</a>)</dd><dd><a class="el" href="a00738.xhtml">IsStreamInsertable</a> (<a class="el" href="a00304.xhtml">Catch::Detail</a>)</dd><dd><a class="el" href="a00722.xhtml">IStream</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01190.xhtml">IteratorGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00670.xhtml">ITestCaseRegistry</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00666.xhtml">ITestInvoker</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00866.xhtml">ITransientExpression</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_L" name="letter_L">L</a></dt>
<dd><a class="el" href="a00894.xhtml">LazyExpression</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_M" name="letter_M">M</a></dt>
<dd><a class="el" href="a01130.xhtml">MapGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00986.xhtml">MatchAllOf</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00990.xhtml">MatchAnyOf</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a01006.xhtml">MatcherBase</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a01002.xhtml">MatcherMethod</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00998.xhtml">MatcherUntypedBase</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a01078.xhtml">MatchExpr</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00994.xhtml">MatchNotOf</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00546.xhtml">CSpectrogramIf::MelSpectrogramConfig_t</a></dd><dd><a class="el" href="a00914.xhtml">MessageBuilder</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00906.xhtml">MessageInfo</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00910.xhtml">MessageStream</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01206.xhtml">mus_any</a></dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_N" name="letter_N">N</a></dt>
<dd><a class="el" href="a00702.xhtml">NameAndTags</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00650.xhtml">NonCopyable</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_O" name="letter_O">O</a></dt>
<dd><a class="el" href="a01146.xhtml">Option</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_P" name="letter_P">P</a></dt>
<dd><a class="el" href="a00982.xhtml">pluralise</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01026.xhtml">PredicateMatcher</a> (<a class="el" href="a00311.xhtml">Catch::Matchers::Generic</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_R" name="letter_R">R</a></dt>
<dd><a class="el" href="a01178.xhtml">RandomFloatingGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01182.xhtml">RandomIntegerGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01186.xhtml">RangeGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01054.xhtml">RegexMatcher</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00662.xhtml">RegistrarForTagAliases</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01126.xhtml">RepeatGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00714.xhtml">ResultDisposition</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00710.xhtml">ResultWas</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00726.xhtml">ReusableStringStream</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01158.xhtml">RunTests</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_S" name="letter_S">S</a></dt>
<dd><a class="el" href="a01210.xhtml">s7_ex</a></dd><dd><a class="el" href="a00918.xhtml">ScopedMessage</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00946.xhtml">Section</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00938.xhtml">SectionEndInfo</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00934.xhtml">SectionInfo</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01154.xhtml">ShowDurations</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01174.xhtml">SimplePcg32</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01098.xhtml">SingleValueGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00654.xhtml">SourceLineInfo</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01046.xhtml">StartsWithMatcher</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00658.xhtml">StreamEndStop</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00742.xhtml">StringMaker</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00806.xhtml">StringMaker&lt; bool &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00978.xhtml">StringMaker&lt; Catch::Detail::Approx &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00754.xhtml">StringMaker&lt; char * &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00810.xhtml">StringMaker&lt; char &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00750.xhtml">StringMaker&lt; char const * &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00770.xhtml">StringMaker&lt; char[SZ]&gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00830.xhtml">StringMaker&lt; double &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00826.xhtml">StringMaker&lt; float &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00782.xhtml">StringMaker&lt; int &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00786.xhtml">StringMaker&lt; long &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00790.xhtml">StringMaker&lt; long long &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00838.xhtml">StringMaker&lt; R C::* &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00858.xhtml">StringMaker&lt; R, typename std::enable_if&lt; is_range&lt; R &gt;::value &amp;&amp;!::Catch::Detail::IsStreamInsertable&lt; R &gt;::value &gt;::type &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00814.xhtml">StringMaker&lt; signed char &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00774.xhtml">StringMaker&lt; signed char[SZ]&gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00822.xhtml">StringMaker&lt; std::nullptr_t &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00746.xhtml">StringMaker&lt; std::string &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00758.xhtml">StringMaker&lt; std::wstring &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00834.xhtml">StringMaker&lt; T * &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00862.xhtml">StringMaker&lt; T[SZ]&gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00818.xhtml">StringMaker&lt; unsigned char &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00778.xhtml">StringMaker&lt; unsigned char[SZ]&gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00794.xhtml">StringMaker&lt; unsigned int &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00798.xhtml">StringMaker&lt; unsigned long &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00802.xhtml">StringMaker&lt; unsigned long long &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00766.xhtml">StringMaker&lt; wchar_t * &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00762.xhtml">StringMaker&lt; wchar_t const * &gt;</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01034.xhtml">StringMatcherBase</a> (<a class="el" href="a00313.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00674.xhtml">StringRef</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_T" name="letter_T">T</a></dt>
<dd><a class="el" href="a01118.xhtml">TakeGenerator</a> (<a class="el" href="a00315.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01198.xhtml">TestCase</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01194.xhtml">TestCaseInfo</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00890.xhtml">TestFailureException</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00698.xhtml">TestInvokerAsMethod</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00942.xhtml">Timer</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00930.xhtml">Totals</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a00682.xhtml">true_given</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_U" name="letter_U">U</a></dt>
<dd><a class="el" href="a00874.xhtml">UnaryExpr</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01074.xhtml">UnorderedEqualsMatcher</a> (<a class="el" href="a00314.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01162.xhtml">UseColour</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_V" name="letter_V">V</a></dt>
<dd><a class="el" href="a00842.xhtml">void_type</a> (<a class="el" href="a00305.xhtml">Catch::detail</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_W" name="letter_W">W</a></dt>
<dd><a class="el" href="a01166.xhtml">WaitForKeypress</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01150.xhtml">WarnAbout</a> (<a class="el" href="a00302.xhtml">Catch</a>)</dd><dd><a class="el" href="a01014.xhtml">WithinAbsMatcher</a> (<a class="el" href="a00310.xhtml">Catch::Matchers::Floating</a>)</dd><dd><a class="el" href="a01022.xhtml">WithinRelMatcher</a> (<a class="el" href="a00310.xhtml">Catch::Matchers::Floating</a>)</dd><dd><a class="el" href="a01018.xhtml">WithinUlpsMatcher</a> (<a class="el" href="a00310.xhtml">Catch::Matchers::Floating</a>)</dd></dl>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed Jun 15 2022 19:05:50 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
