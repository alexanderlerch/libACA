<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: Class Index</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.2.6</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('classes.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Class Index</div></div>
</div><!--header-->
<div class="contents">
<div class="qindex"><a class="qindex" href="#letter_A">A</a>&#160;|&#160;<a class="qindex" href="#letter_B">B</a>&#160;|&#160;<a class="qindex" href="#letter_C">C</a>&#160;|&#160;<a class="qindex" href="#letter_D">D</a>&#160;|&#160;<a class="qindex" href="#letter_E">E</a>&#160;|&#160;<a class="qindex" href="#letter_F">F</a>&#160;|&#160;<a class="qindex" href="#letter_G">G</a>&#160;|&#160;<a class="qindex" href="#letter_I">I</a>&#160;|&#160;<a class="qindex" href="#letter_L">L</a>&#160;|&#160;<a class="qindex" href="#letter_M">M</a>&#160;|&#160;<a class="qindex" href="#letter_N">N</a>&#160;|&#160;<a class="qindex" href="#letter_O">O</a>&#160;|&#160;<a class="qindex" href="#letter_P">P</a>&#160;|&#160;<a class="qindex" href="#letter_R">R</a>&#160;|&#160;<a class="qindex" href="#letter_S">S</a>&#160;|&#160;<a class="qindex" href="#letter_T">T</a>&#160;|&#160;<a class="qindex" href="#letter_U">U</a>&#160;|&#160;<a class="qindex" href="#letter_V">V</a>&#160;|&#160;<a class="qindex" href="#letter_W">W</a></div>
<div class="classindex">
<dl class="classindex even">
<dt class="alphachar"><a id="letter_A" name="letter_A">A</a></dt>
<dd><a class="el" href="a00668.xhtml">always_false</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00964.xhtml">Approx</a> (<a class="el" href="a00298.xhtml">Catch::Detail</a>)</dd><dd><a class="el" href="a01060.xhtml">ApproxMatcher</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01104.xhtml">as</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00892.xhtml">AssertionHandler</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00708.xhtml">AssertionInfo</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00888.xhtml">AssertionReaction</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00696.xhtml">AutoReg</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_B" name="letter_B">B</a></dt>
<dd><a class="el" href="a00860.xhtml">BinaryExpr</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_C" name="letter_C">C</a></dt>
<dd><a class="el" href="a00912.xhtml">Capturer</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01020.xhtml">CasedString</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00636.xhtml">CaseSensitive</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00632.xhtml">Catch_global_namespace_dummy</a></dd><dd><a class="el" href="a00448.xhtml">CAudioFileIf</a></dd><dd><a class="el" href="a00440.xhtml">CAudioFileRaw</a></dd><dd><a class="el" href="a00444.xhtml">CAudioFileSndLib</a></dd><dd><a class="el" href="a00456.xhtml">CBeatHistoIf</a></dd><dd><a class="el" href="a00420.xhtml">CBlockAudioBuffer</a></dd><dd><a class="el" href="a00416.xhtml">CBlockAudioFile</a></dd><dd><a class="el" href="a00548.xhtml">CBlockAudioIf</a></dd><dd><a class="el" href="a00488.xhtml">CButterLp</a></dd><dd><a class="el" href="a00552.xhtml">CCcf</a></dd><dd><a class="el" href="a00464.xhtml">CChordFromBlockIf</a></dd><dd><a class="el" href="a00316.xhtml">CChordFromFile</a></dd><dd><a class="el" href="a00320.xhtml">CChordFromVector</a></dd><dd><a class="el" href="a00460.xhtml">CChordIf</a></dd><dd><a class="el" href="a00468.xhtml">CClassifierBase</a></dd><dd><a class="el" href="a00556.xhtml">CConversion</a></dd><dd><a class="el" href="a00616.xhtml">CDtw</a></dd><dd><a class="el" href="a00476.xhtml">CFeatureFromBlockIf</a></dd><dd><a class="el" href="a00324.xhtml">CFeatureFromFile</a></dd><dd><a class="el" href="a00328.xhtml">CFeatureFromVector</a></dd><dd><a class="el" href="a00472.xhtml">CFeatureIf</a></dd><dd><a class="el" href="a00332.xhtml">CFeatureSpectralFlux</a></dd><dd><a class="el" href="a00336.xhtml">CFeatureSpectralMfccs</a></dd><dd><a class="el" href="a00340.xhtml">CFeatureSpectralPitchChroma</a></dd><dd><a class="el" href="a00344.xhtml">CFeatureSpectralRolloff</a></dd><dd><a class="el" href="a00348.xhtml">CFeatureSpectralTonalPowerRatio</a></dd><dd><a class="el" href="a00352.xhtml">CFeatureTimeAcfCoeff</a></dd><dd><a class="el" href="a00356.xhtml">CFeatureTimeMaxAcf</a></dd><dd><a class="el" href="a00360.xhtml">CFeatureTimePeakEnvelope</a></dd><dd><a class="el" href="a00364.xhtml">CFeatureTimeRms</a></dd><dd><a class="el" href="a00480.xhtml">CFft</a></dd><dd><a class="el" href="a00484.xhtml">CFilter</a></dd><dd><a class="el" href="a00560.xhtml">CFingerprint</a></dd><dd><a class="el" href="a00424.xhtml">CGammatone</a></dd><dd><a class="el" href="a00428.xhtml">CGammaToneFbFromFile</a></dd><dd><a class="el" href="a00432.xhtml">CGammaToneFbFromVector</a></dd><dd><a class="el" href="a00564.xhtml">CGammaToneFbIf</a></dd><dd><a class="el" href="a00436.xhtml">CGammaToneFbRealTime</a></dd><dd><a class="el" href="a00572.xhtml">CGmm</a></dd><dd><a class="el" href="a00576.xhtml">CGmmClassifier</a></dd><dd><a class="el" href="a00568.xhtml">CGmmResult</a></dd><dd><a class="el" href="a01124.xhtml">ChunkGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00580.xhtml">CInstFreq</a></dd><dd><a class="el" href="a00512.xhtml">CKey</a></dd><dd><a class="el" href="a00516.xhtml">CKeyFromChroma</a></dd><dd><a class="el" href="a00620.xhtml">CKmeans</a></dd><dd><a class="el" href="a00624.xhtml">CKnn</a></dd><dd><a class="el" href="a00492.xhtml">CMatrix</a></dd><dd><a class="el" href="a00588.xhtml">CMovingAverage</a></dd><dd><a class="el" href="a00596.xhtml">CNmf</a></dd><dd><a class="el" href="a00592.xhtml">CNmfResult</a></dd><dd><a class="el" href="a00608.xhtml">CNormalizeAudio</a></dd><dd><a class="el" href="a00524.xhtml">CNoveltyFromBlockIf</a></dd><dd><a class="el" href="a00368.xhtml">CNoveltyFromFile</a></dd><dd><a class="el" href="a00372.xhtml">CNoveltyFromVector</a></dd><dd><a class="el" href="a00520.xhtml">CNoveltyIf</a></dd><dd><a class="el" href="a01048.xhtml">ContainsElementMatcher</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01032.xhtml">ContainsMatcher</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a01052.xhtml">ContainsMatcher</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a00916.xhtml">Counts</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00600.xhtml">CPca</a></dd><dd><a class="el" href="a00532.xhtml">CPitchFromBlockIf</a></dd><dd><a class="el" href="a00376.xhtml">CPitchFromFile</a></dd><dd><a class="el" href="a00380.xhtml">CPitchFromVector</a></dd><dd><a class="el" href="a00528.xhtml">CPitchIf</a></dd><dd><a class="el" href="a00384.xhtml">CPitchSpectralAcf</a></dd><dd><a class="el" href="a00388.xhtml">CPitchSpectralHps</a></dd><dd><a class="el" href="a00392.xhtml">CPitchTimeAcf</a></dd><dd><a class="el" href="a00400.xhtml">CPitchTimeAmdf</a></dd><dd><a class="el" href="a00396.xhtml">CPitchTimeAuditory</a></dd><dd><a class="el" href="a00404.xhtml">CPitchTimeZeroCrossings</a></dd><dd><a class="el" href="a00604.xhtml">CPreProc</a></dd><dd><a class="el" href="a00612.xhtml">CResample</a></dd><dd><a class="el" href="a00496.xhtml">CRingBuffer</a></dd><dd><a class="el" href="a00584.xhtml">CSinglePoleLp</a></dd><dd><a class="el" href="a00408.xhtml">CSpectrogramFromFile</a></dd><dd><a class="el" href="a00412.xhtml">CSpectrogramFromVector</a></dd><dd><a class="el" href="a00536.xhtml">CSpectrogramIf</a></dd><dd><a class="el" href="a00544.xhtml">CSubFingerprint</a></dd><dd><a class="el" href="a00500.xhtml">CSynthesis</a></dd><dd><a class="el" href="a00504.xhtml">CUtil</a></dd><dd><a class="el" href="a00508.xhtml">CVector</a></dd><dd><a class="el" href="a00628.xhtml">CViterbi</a></dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_D" name="letter_D">D</a></dt>
<dd><a class="el" href="a00872.xhtml">Decomposer</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_E" name="letter_E">E</a></dt>
<dd><a class="el" href="a01040.xhtml">EndsWithMatcher</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00720.xhtml">EnumInfo</a> (<a class="el" href="a00298.xhtml">Catch::Detail</a>)</dd><dd><a class="el" href="a01028.xhtml">EqualsMatcher</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a01056.xhtml">EqualsMatcher</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01000.xhtml">ExceptionMessageMatcher</a> (<a class="el" href="a00303.xhtml">Catch::Matchers::Exception</a>)</dd><dd><a class="el" href="a00960.xhtml">ExceptionTranslatorRegistrar::ExceptionTranslator</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00956.xhtml">ExceptionTranslatorRegistrar</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00868.xhtml">ExprLhs</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_F" name="letter_F">F</a></dt>
<dd><a class="el" href="a00452.xhtml">CAudioFileIf::FileSpec_t</a></dd><dd><a class="el" href="a01112.xhtml">FilterGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01092.xhtml">FixedValuesGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_G" name="letter_G">G</a></dt>
<dd><a class="el" href="a01080.xhtml">GeneratorException</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01100.xhtml">Generators</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01072.xhtml">GeneratorUntypedBase</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01096.xhtml">GeneratorWrapper</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_I" name="letter_I">I</a></dt>
<dd><a class="el" href="a01160.xhtml">IConfig</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01128.xhtml">IContext</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00948.xhtml">IExceptionTranslator</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00952.xhtml">IExceptionTranslatorRegistry</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01084.xhtml">IGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01076.xhtml">IGeneratorTracker</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01132.xhtml">IMutableContext</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00724.xhtml">IMutableEnumValuesRegistry</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00944.xhtml">IMutableRegistryHub</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00940.xhtml">IRegistryHub</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00876.xhtml">IResultCapture</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01192.xhtml">IRunner</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00680.xhtml">is_callable</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00684.xhtml">is_callable&lt; Fun(Args...)&gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00676.xhtml">is_callable_tester</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00844.xhtml">is_range</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00836.xhtml">is_range_impl</a> (<a class="el" href="a00299.xhtml">Catch::detail</a>)</dd><dd><a class="el" href="a00840.xhtml">is_range_impl&lt; T, typename void_type&lt; decltype(begin(std::declval&lt; T &gt;()))&gt;::type &gt;</a> (<a class="el" href="a00299.xhtml">Catch::detail</a>)</dd><dd><a class="el" href="a00728.xhtml">IsStreamInsertable</a> (<a class="el" href="a00298.xhtml">Catch::Detail</a>)</dd><dd><a class="el" href="a00712.xhtml">IStream</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01180.xhtml">IteratorGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00660.xhtml">ITestCaseRegistry</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00656.xhtml">ITestInvoker</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00856.xhtml">ITransientExpression</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_L" name="letter_L">L</a></dt>
<dd><a class="el" href="a00884.xhtml">LazyExpression</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_M" name="letter_M">M</a></dt>
<dd><a class="el" href="a01120.xhtml">MapGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00976.xhtml">MatchAllOf</a> (<a class="el" href="a00302.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00980.xhtml">MatchAnyOf</a> (<a class="el" href="a00302.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00996.xhtml">MatcherBase</a> (<a class="el" href="a00302.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00992.xhtml">MatcherMethod</a> (<a class="el" href="a00302.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00988.xhtml">MatcherUntypedBase</a> (<a class="el" href="a00302.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a01068.xhtml">MatchExpr</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00984.xhtml">MatchNotOf</a> (<a class="el" href="a00302.xhtml">Catch::Matchers::Impl</a>)</dd><dd><a class="el" href="a00540.xhtml">CSpectrogramIf::MelSpectrogramConfig_t</a></dd><dd><a class="el" href="a00904.xhtml">MessageBuilder</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00896.xhtml">MessageInfo</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00900.xhtml">MessageStream</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01196.xhtml">mus_any</a></dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_N" name="letter_N">N</a></dt>
<dd><a class="el" href="a00692.xhtml">NameAndTags</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00640.xhtml">NonCopyable</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_O" name="letter_O">O</a></dt>
<dd><a class="el" href="a01136.xhtml">Option</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_P" name="letter_P">P</a></dt>
<dd><a class="el" href="a00972.xhtml">pluralise</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01016.xhtml">PredicateMatcher</a> (<a class="el" href="a00305.xhtml">Catch::Matchers::Generic</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_R" name="letter_R">R</a></dt>
<dd><a class="el" href="a01168.xhtml">RandomFloatingGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01172.xhtml">RandomIntegerGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01176.xhtml">RangeGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01044.xhtml">RegexMatcher</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00652.xhtml">RegistrarForTagAliases</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01116.xhtml">RepeatGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00704.xhtml">ResultDisposition</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00700.xhtml">ResultWas</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00716.xhtml">ReusableStringStream</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01148.xhtml">RunTests</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_S" name="letter_S">S</a></dt>
<dd><a class="el" href="a01200.xhtml">s7_ex</a></dd><dd><a class="el" href="a00908.xhtml">ScopedMessage</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00936.xhtml">Section</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00928.xhtml">SectionEndInfo</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00924.xhtml">SectionInfo</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01144.xhtml">ShowDurations</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01164.xhtml">SimplePcg32</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01088.xhtml">SingleValueGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a00644.xhtml">SourceLineInfo</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01036.xhtml">StartsWithMatcher</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00648.xhtml">StreamEndStop</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00732.xhtml">StringMaker</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00796.xhtml">StringMaker&lt; bool &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00968.xhtml">StringMaker&lt; Catch::Detail::Approx &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00744.xhtml">StringMaker&lt; char * &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00800.xhtml">StringMaker&lt; char &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00740.xhtml">StringMaker&lt; char const * &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00760.xhtml">StringMaker&lt; char[SZ]&gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00820.xhtml">StringMaker&lt; double &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00816.xhtml">StringMaker&lt; float &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00772.xhtml">StringMaker&lt; int &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00776.xhtml">StringMaker&lt; long &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00780.xhtml">StringMaker&lt; long long &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00828.xhtml">StringMaker&lt; R C::* &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00848.xhtml">StringMaker&lt; R, typename std::enable_if&lt; is_range&lt; R &gt;::value &amp;&amp;!::Catch::Detail::IsStreamInsertable&lt; R &gt;::value &gt;::type &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00804.xhtml">StringMaker&lt; signed char &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00764.xhtml">StringMaker&lt; signed char[SZ]&gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00812.xhtml">StringMaker&lt; std::nullptr_t &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00736.xhtml">StringMaker&lt; std::string &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00748.xhtml">StringMaker&lt; std::wstring &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00824.xhtml">StringMaker&lt; T * &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00852.xhtml">StringMaker&lt; T[SZ]&gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00808.xhtml">StringMaker&lt; unsigned char &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00768.xhtml">StringMaker&lt; unsigned char[SZ]&gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00784.xhtml">StringMaker&lt; unsigned int &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00788.xhtml">StringMaker&lt; unsigned long &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00792.xhtml">StringMaker&lt; unsigned long long &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00756.xhtml">StringMaker&lt; wchar_t * &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00752.xhtml">StringMaker&lt; wchar_t const * &gt;</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01024.xhtml">StringMatcherBase</a> (<a class="el" href="a00307.xhtml">Catch::Matchers::StdString</a>)</dd><dd><a class="el" href="a00664.xhtml">StringRef</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_T" name="letter_T">T</a></dt>
<dd><a class="el" href="a01108.xhtml">TakeGenerator</a> (<a class="el" href="a00309.xhtml">Catch::Generators</a>)</dd><dd><a class="el" href="a01188.xhtml">TestCase</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01184.xhtml">TestCaseInfo</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00880.xhtml">TestFailureException</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00688.xhtml">TestInvokerAsMethod</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00932.xhtml">Timer</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00920.xhtml">Totals</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a00672.xhtml">true_given</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_U" name="letter_U">U</a></dt>
<dd><a class="el" href="a00864.xhtml">UnaryExpr</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01064.xhtml">UnorderedEqualsMatcher</a> (<a class="el" href="a00308.xhtml">Catch::Matchers::Vector</a>)</dd><dd><a class="el" href="a01152.xhtml">UseColour</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd></dl>
<dl class="classindex odd">
<dt class="alphachar"><a id="letter_V" name="letter_V">V</a></dt>
<dd><a class="el" href="a00832.xhtml">void_type</a> (<a class="el" href="a00299.xhtml">Catch::detail</a>)</dd></dl>
<dl class="classindex even">
<dt class="alphachar"><a id="letter_W" name="letter_W">W</a></dt>
<dd><a class="el" href="a01156.xhtml">WaitForKeypress</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01140.xhtml">WarnAbout</a> (<a class="el" href="a00296.xhtml">Catch</a>)</dd><dd><a class="el" href="a01004.xhtml">WithinAbsMatcher</a> (<a class="el" href="a00304.xhtml">Catch::Matchers::Floating</a>)</dd><dd><a class="el" href="a01012.xhtml">WithinRelMatcher</a> (<a class="el" href="a00304.xhtml">Catch::Matchers::Floating</a>)</dd><dd><a class="el" href="a01008.xhtml">WithinUlpsMatcher</a> (<a class="el" href="a00304.xhtml">Catch::Matchers::Floating</a>)</dd></dl>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Tue Jun 14 2022 21:07:21 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
