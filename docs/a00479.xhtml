<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: CMatrix Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.2.6</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a00479.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="a00476.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">CMatrix Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>class with static functions for matrix operations with type float (functionality only added when needed)  
 <a href="a00479.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00149_source.xhtml">Matrix.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CMatrix:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00477.svg" width="222" height="543"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a6501b78d76c912d49eee88c8f7242923"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6501b78d76c912d49eee88c8f7242923"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a6501b78d76c912d49eee88c8f7242923">alloc</a> (T **&amp;pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a6501b78d76c912d49eee88c8f7242923"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a591097c6b1935c4d6273b3445f8f552b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a591097c6b1935c4d6273b3445f8f552b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">free</a> (T **&amp;pptMat, int iNumRows)</td></tr>
<tr class="separator:a591097c6b1935c4d6273b3445f8f552b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7be1ae4f635c5aaec0c2693fc23b3646"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7be1ae4f635c5aaec0c2693fc23b3646"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a7be1ae4f635c5aaec0c2693fc23b3646">setZero</a> (T **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a7be1ae4f635c5aaec0c2693fc23b3646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c25e33302ff6282ca58bc27875cc10a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1c25e33302ff6282ca58bc27875cc10a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a1c25e33302ff6282ca58bc27875cc10a">setValue</a> (T **pptMat, T tValue, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a1c25e33302ff6282ca58bc27875cc10a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95c84e6a291f19c70f2cc2ea7e1cd48"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa95c84e6a291f19c70f2cc2ea7e1cd48"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#aa95c84e6a291f19c70f2cc2ea7e1cd48">setRand</a> (T **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aa95c84e6a291f19c70f2cc2ea7e1cd48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a989372fd225413baed0cc7902c4af03d"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a989372fd225413baed0cc7902c4af03d"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a989372fd225413baed0cc7902c4af03d">setCol</a> (T **pptDestMat, T *ptSrcVec, int iColIdx, int iNumRows)</td></tr>
<tr class="separator:a989372fd225413baed0cc7902c4af03d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c7b91818cdb1dd765ff8add1eb87a2b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8c7b91818cdb1dd765ff8add1eb87a2b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a8c7b91818cdb1dd765ff8add1eb87a2b">setZeroBelowThresh</a> (T **pptMat, int iNumRows, int iNumCols, T tThresh)</td></tr>
<tr class="separator:a8c7b91818cdb1dd765ff8add1eb87a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b2436caee0cd232126f78c642238dd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a95b2436caee0cd232126f78c642238dd">setEye</a> (float **pptDest, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a95b2436caee0cd232126f78c642238dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa10a63ffb2dd06bb5a3c0a411967d704"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#aa10a63ffb2dd06bb5a3c0a411967d704">getCol</a> (float *ptDest, float **pptMat, int iColIdx, int iNumRows)</td></tr>
<tr class="separator:aa10a63ffb2dd06bb5a3c0a411967d704"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ba15aa7afd8b1b8310a67c79b81411f"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a3ba15aa7afd8b1b8310a67c79b81411f">getSumCol</a> (float **pptMat, int iColIdx, int iNumRows, <a class="el" href="a00245.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00245.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:a3ba15aa7afd8b1b8310a67c79b81411f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae42c7bf7d8d4d9286f4bf8ca57789fef"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ae42c7bf7d8d4d9286f4bf8ca57789fef">getSum</a> (float **pptMat, int iNumRows, int iNumCols, <a class="el" href="a00245.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00245.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:ae42c7bf7d8d4d9286f4bf8ca57789fef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeab1ba198a343ce5523920c29fa6b592"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#aeab1ba198a343ce5523920c29fa6b592">getNorm</a> (float **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aeab1ba198a343ce5523920c29fa6b592"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e91601d28cffd5e5de9adcfca8fd4a9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a3e91601d28cffd5e5de9adcfca8fd4a9">vecnorm_I</a> (float **pptSrcDest, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a3e91601d28cffd5e5de9adcfca8fd4a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a60f93e58f2b038179df28159cee7b0"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a7a60f93e58f2b038179df28159cee7b0">calcKlDivergence</a> (float **pptSrc1, float **pptSrc2, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a7a60f93e58f2b038179df28159cee7b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2af0440df04eb1c165231c695e43bf6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ab2af0440df04eb1c165231c695e43bf6">transpose</a> (float **pptDest, float **pptSrc, int iNumSrcRows, int iNumSrcCols)</td></tr>
<tr class="separator:ab2af0440df04eb1c165231c695e43bf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40d07d61b6e3aa0b9c27977908c3814e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a40d07d61b6e3aa0b9c27977908c3814e">rearrangeRows</a> (float **pptSrcDest, int *piRowIndices, int iNumRows)</td></tr>
<tr class="separator:a40d07d61b6e3aa0b9c27977908c3814e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a082e384b71ea7a90ce8505f5ee0d48f9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a082e384b71ea7a90ce8505f5ee0d48f9">diag</a> (float *ptDest, float **pptSrc, int iNumSrcRows, int iNumSrcCols)</td></tr>
<tr class="separator:a082e384b71ea7a90ce8505f5ee0d48f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ca8e552db389f6323e1c3d26e59902"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ab0ca8e552db389f6323e1c3d26e59902">mulMatColVec</a> (float *ptDestColVec, float **pptMat, const float *ptSrcColVec, int iNumMatRows, int iNumMatCols)</td></tr>
<tr class="separator:ab0ca8e552db389f6323e1c3d26e59902"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea595a79b907bd51e623f56fd658348a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#aea595a79b907bd51e623f56fd658348a">mulColVecRowVec</a> (float **pptDestMat, const float *ptSrcColVec, const float *ptSrcRowVec, int iNumMatRows, int iNumMatCols)</td></tr>
<tr class="separator:aea595a79b907bd51e623f56fd658348a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a118b92877207aa35f9a15a48c5e3c8d5"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a118b92877207aa35f9a15a48c5e3c8d5">mulRowVecMat</a> (float *ptDestRowVec, const float *ptSrcRowVec, float **pptMat, int iNumMatRows, int iNumMatCols)</td></tr>
<tr class="separator:a118b92877207aa35f9a15a48c5e3c8d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2c870f61fb9cd998993b7899f658100"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ab2c870f61fb9cd998993b7899f658100">mulColC_I</a> (float **pptMat, float fValue, int iCol, int iNumRows)</td></tr>
<tr class="separator:ab2c870f61fb9cd998993b7899f658100"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab92b94faf2a3219fc721f3a455eabecd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ab92b94faf2a3219fc721f3a455eabecd">mulMatMat</a> (float **pptDest, float **pptSrc1, float **pptSrc2, int iNum1Rows, int iNum1Cols, int iNum2Rows, int iNum2Cols)</td></tr>
<tr class="separator:ab92b94faf2a3219fc721f3a455eabecd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43b79160c74e608b5fa2838f316670f3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a43b79160c74e608b5fa2838f316670f3">mul_I</a> (float **pptSrcDest, float **pptSrc, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a43b79160c74e608b5fa2838f316670f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7147461627f48f09acf253478b23281"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ae7147461627f48f09acf253478b23281">add_I</a> (float **pptSrcDest, float **pptSrc, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:ae7147461627f48f09acf253478b23281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a0100d80d6eeb48cb352b865ef42402"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a5a0100d80d6eeb48cb352b865ef42402">sub_I</a> (float **pptSrcDest, float **pptSrc, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a5a0100d80d6eeb48cb352b865ef42402"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1de9372b87cea546a3cbc839d25eb53"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ab1de9372b87cea546a3cbc839d25eb53">div_I</a> (float **pptSrcDest, float **pptSrc, int iNumRows, int iNumCols, <a class="el" href="a00245.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAddSmallConst=<a class="el" href="a00245.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:ab1de9372b87cea546a3cbc839d25eb53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae05c266fa6761a9b1070e33f42e39d17"><td class="memItemLeft" align="right" valign="top">static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ae05c266fa6761a9b1070e33f42e39d17">getMax</a> (float **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:ae05c266fa6761a9b1070e33f42e39d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa64e16e783bd3a28cb66efc96dc6b531"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#aa64e16e783bd3a28cb66efc96dc6b531">addC_I</a> (float **pptMat, float fAdd, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aa64e16e783bd3a28cb66efc96dc6b531"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46d2ac8bc93f5d296b3f8d7ad5ebe28b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a46d2ac8bc93f5d296b3f8d7ad5ebe28b">mulC_I</a> (float **pptMat, float fScale, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a46d2ac8bc93f5d296b3f8d7ad5ebe28b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a036ce0072f4da74a8809550d21eac9dd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a036ce0072f4da74a8809550d21eac9dd">swapRowCol</a> (float **pptSrcDest, int iRowIdx, int iColIdx, int iNumCols)</td></tr>
<tr class="separator:a036ce0072f4da74a8809550d21eac9dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f723a71e61f425d0ee9a51aa2162bf3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9f723a71e61f425d0ee9a51aa2162bf3"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a9f723a71e61f425d0ee9a51aa2162bf3">copy</a> (T **pptDestMat, T **pptSrcMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a9f723a71e61f425d0ee9a51aa2162bf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4215ef0262601f6f06956904a48c8b8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab4215ef0262601f6f06956904a48c8b8"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#ab4215ef0262601f6f06956904a48c8b8">setRow</a> (T **pptDestMat, T *ptSrcVec, int iRowIdx, int iNumCols)</td></tr>
<tr class="separator:ab4215ef0262601f6f06956904a48c8b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7de6a75fccded32c57d3fe168263204f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7de6a75fccded32c57d3fe168263204f"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a7de6a75fccded32c57d3fe168263204f">det</a> (T **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a7de6a75fccded32c57d3fe168263204f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37585f57926ea2921734907bacc6cce8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a37585f57926ea2921734907bacc6cce8"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00479.xhtml#a37585f57926ea2921734907bacc6cce8">inv_I</a> (T **pptSrcDest, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a37585f57926ea2921734907bacc6cce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >class with static functions for matrix operations with type float (functionality only added when needed) </p>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00011">11</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ae7147461627f48f09acf253478b23281" name="ae7147461627f48f09acf253478b23281"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7147461627f48f09acf253478b23281">&#9670;&nbsp;</a></span>add_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::add_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise addition of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00538">538</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  539</span>    {</div>
<div class="line"><span class="lineno">  540</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  541</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  542</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  543</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  544</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  545</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  546</span> </div>
<div class="line"><span class="lineno">  547</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  548</span>        {</div>
<div class="line"><span class="lineno">  549</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  550</span>                pptSrcDest[m][n] += pptSrc[m][n];</div>
<div class="line"><span class="lineno">  551</span>        }</div>
<div class="line"><span class="lineno">  552</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00140">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ae7147461627f48f09acf253478b23281_icgraph.svg" width="491" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa64e16e783bd3a28cb66efc96dc6b531" name="aa64e16e783bd3a28cb66efc96dc6b531"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa64e16e783bd3a28cb66efc96dc6b531">&#9670;&nbsp;</a></span>addC_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::addC_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fAdd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >adds a single value to all matrix elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix to analyze </td></tr>
    <tr><td class="paramname">fAdd</td><td>scaling factor to apply </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00633">633</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  634</span>    {</div>
<div class="line"><span class="lineno">  635</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  636</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  637</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  638</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  639</span> </div>
<div class="line"><span class="lineno">  640</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  641</span>            <a class="code hl_function" href="a00495.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a>(pptMat[m], fAdd, iNumCols);</div>
<div class="line"><span class="lineno">  642</span>    }</div>
<div class="ttc" id="aa00495_xhtml_a22ff86e4fc2f8d5042159d9c84a7ff14"><div class="ttname"><a href="a00495.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a></div><div class="ttdeci">static void addC_I(T *ptSrcDest, T fConst, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00262">Vector.h:262</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00262">CVector::addC_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00110_source.xhtml#l00413">CChordIf::initViterbi_()</a>, and <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_aa64e16e783bd3a28cb66efc96dc6b531_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_aa64e16e783bd3a28cb66efc96dc6b531_icgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a6501b78d76c912d49eee88c8f7242923" name="a6501b78d76c912d49eee88c8f7242923"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6501b78d76c912d49eee88c8f7242923">&#9670;&nbsp;</a></span>alloc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::alloc </td>
          <td>(</td>
          <td class="paramtype">T **&amp;&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >allocates a float matrix and inits it with zeros </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>(empty double pointer, to be allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00022">22</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   23</span>    {</div>
<div class="line"><span class="lineno">   24</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   25</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">   26</span> </div>
<div class="line"><span class="lineno">   27</span>        <a class="code hl_function" href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(pptMat, iNumRows);</div>
<div class="line"><span class="lineno">   28</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">   29</span> </div>
<div class="line"><span class="lineno">   30</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   31</span>            <a class="code hl_function" href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">   32</span>    }</div>
<div class="ttc" id="aa00495_xhtml_abaadac98b1cad18b7b568852bc951696"><div class="ttname"><a href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a></div><div class="ttdeci">static void alloc(T *&amp;ptVec, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00024">Vector.h:24</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00024">CVector::alloc()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00038_source.xhtml#l00489">CFeatureSpectralMfccs::allocDctMat_()</a>, <a class="el" href="a00077_source.xhtml#l00014">CBlockAudioFile::CBlockAudioFile()</a>, <a class="el" href="a00056_source.xhtml#l00053">CChordFromBlockIf::CChordFromBlockIf()</a>, <a class="el" href="a00038_source.xhtml#l00362">CFeatureSpectralMfccs::CFeatureSpectralMfccs()</a>, <a class="el" href="a00038_source.xhtml#l00512">CFeatureSpectralPitchChroma::CFeatureSpectralPitchChroma()</a>, <a class="el" href="a00098_source.xhtml#l00198">CGmmResult::CGmmResult()</a>, <a class="el" href="a00134_source.xhtml#l00050">CNormalizeAudio::CNormalizeAudio()</a>, <a class="el" href="a00032_source.xhtml#l00081">CKey::compKey()</a>, <a class="el" href="a00101_source.xhtml#l00215">CPitchTimeAuditory::CPitchTimeAuditory()</a>, <a class="el" href="a00089_source.xhtml#l00011">CSubFingerprint::CSubFingerprint()</a>, <a class="el" href="a00149_source.xhtml#l00724">det()</a>, <a class="el" href="a00086_source.xhtml#l00380">CSpectrogramIf::generateMelFb_()</a>, <a class="el" href="a00098_source.xhtml#l00010">CGmm::init()</a>, <a class="el" href="a00053_source.xhtml#l00019">CNmf::init()</a>, <a class="el" href="a00068_source.xhtml#l00025">CFingerprint::init()</a>, <a class="el" href="a00080_source.xhtml#l00017">CViterbi::init()</a>, <a class="el" href="a00044_source.xhtml#l00015">CKnn::init()</a>, <a class="el" href="a00098_source.xhtml#l00253">CGmmResult::init()</a>, <a class="el" href="a00041_source.xhtml#l00014">CKmeans::init()</a>, <a class="el" href="a00059_source.xhtml#l00009">CPca::init()</a>, <a class="el" href="a00062_source.xhtml#l00028">CDtw::init()</a>, <a class="el" href="a00053_source.xhtml#l00178">CNmfResult::init()</a>, <a class="el" href="a00110_source.xhtml#l00394">CChordIf::init_()</a>, <a class="el" href="a00110_source.xhtml#l00413">CChordIf::initViterbi_()</a>, <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>, and <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a6501b78d76c912d49eee88c8f7242923_cgraph.svg" width="427" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a6501b78d76c912d49eee88c8f7242923_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a7a60f93e58f2b038179df28159cee7b0" name="a7a60f93e58f2b038179df28159cee7b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a60f93e58f2b038179df28159cee7b0">&#9670;&nbsp;</a></span>calcKlDivergence()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float CMatrix::calcKlDivergence </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >comnputes kl divergence between two matrices </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrc1</td><td>matrix of dimension iNumRows x iNumCols </td></tr>
    <tr><td class="paramname">pptSrc2</td><td>matrix of dimension iNumRows x iNumCols </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00293">293</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  294</span>    {</div>
<div class="line"><span class="lineno">  295</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  296</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  297</span>        assert(pptSrc1);</div>
<div class="line"><span class="lineno">  298</span>        assert(pptSrc1[0]);</div>
<div class="line"><span class="lineno">  299</span>        assert(pptSrc2);</div>
<div class="line"><span class="lineno">  300</span>        assert(pptSrc2[0]);</div>
<div class="line"><span class="lineno">  301</span> </div>
<div class="line"><span class="lineno">  302</span>        <span class="keywordtype">float</span> fResult = 0;</div>
<div class="line"><span class="lineno">  303</span> </div>
<div class="line"><span class="lineno">  304</span>        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iNumRows; i++)</div>
<div class="line"><span class="lineno">  305</span>        {</div>
<div class="line"><span class="lineno">  306</span>            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; iNumCols; j++)</div>
<div class="line"><span class="lineno">  307</span>                fResult += pptSrc1[i][j] * (std::log((pptSrc1[i][j] + 1e-24F) / (pptSrc2[i][j] + 1e-24F)) - 1.F) + pptSrc2[i][j];</div>
<div class="line"><span class="lineno">  308</span>        }</div>
<div class="line"><span class="lineno">  309</span> </div>
<div class="line"><span class="lineno">  310</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><span class="lineno">  311</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a7a60f93e58f2b038179df28159cee7b0_icgraph.svg" width="523" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a9f723a71e61f425d0ee9a51aa2162bf3" name="a9f723a71e61f425d0ee9a51aa2162bf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f723a71e61f425d0ee9a51aa2162bf3">&#9670;&nbsp;</a></span>copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::copy </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >copies matrix content to another matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>(destination matrix, user allocated) </td></tr>
    <tr><td class="paramname">pptSrcMat</td><td>(source matrix) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00694">694</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  695</span>    {</div>
<div class="line"><span class="lineno">  696</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">  697</span>        assert(pptSrcMat);</div>
<div class="line"><span class="lineno">  698</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  699</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  700</span> </div>
<div class="line"><span class="lineno">  701</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  702</span>            <a class="code hl_function" href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a>(pptDestMat[m], pptSrcMat[m], iNumCols);</div>
<div class="line"><span class="lineno">  703</span>    }</div>
<div class="ttc" id="aa00495_xhtml_ad7c5cba73e439adac77778f61c9418f0"><div class="ttname"><a href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a></div><div class="ttdeci">static void copy(T *ptDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00113">Vector.h:113</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00113">CVector::copy()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00100">CPca::calcSVD()</a>, <a class="el" href="a00098_source.xhtml#l00198">CGmmResult::CGmmResult()</a>, <a class="el" href="a00041_source.xhtml#l00054">CKmeans::compKmeans()</a>, <a class="el" href="a00149_source.xhtml#l00724">det()</a>, <a class="el" href="a00053_source.xhtml#l00237">CNmfResult::getMat()</a>, <a class="el" href="a00098_source.xhtml#l00242">CGmmResult::getSigma()</a>, <a class="el" href="a00080_source.xhtml#l00017">CViterbi::init()</a>, <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>, <a class="el" href="a00098_source.xhtml#l00184">CGmmResult::operator=()</a>, <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>, and <a class="el" href="a00098_source.xhtml#l00303">CGmmResult::setSigma()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a9f723a71e61f425d0ee9a51aa2162bf3_cgraph.svg" width="260" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a9f723a71e61f425d0ee9a51aa2162bf3_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a7de6a75fccded32c57d3fe168263204f" name="a7de6a75fccded32c57d3fe168263204f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7de6a75fccded32c57d3fe168263204f">&#9670;&nbsp;</a></span>det()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::det </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00724">724</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  725</span>    {</div>
<div class="line"><span class="lineno">  726</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  727</span>        assert(iNumRows == iNumCols);</div>
<div class="line"><span class="lineno">  728</span> </div>
<div class="line"><span class="lineno">  729</span>        <span class="keyword">const</span> <span class="keywordtype">float</span> kSingularityThresh = 1e-15F;</div>
<div class="line"><span class="lineno">  730</span>        T **pptTmp = 0;</div>
<div class="line"><span class="lineno">  731</span>        <span class="keywordtype">double</span> dDet = 1;</div>
<div class="line"><span class="lineno">  732</span> </div>
<div class="line"><span class="lineno">  733</span> </div>
<div class="line"><span class="lineno">  734</span>        <span class="keywordflow">if</span> (iNumRows == 2)</div>
<div class="line"><span class="lineno">  735</span>            <span class="keywordflow">return</span> ((pptMat[0][0] * pptMat[1][1]) - (pptMat[0][1] * pptMat[1][0]));</div>
<div class="line"><span class="lineno">  736</span> </div>
<div class="line"><span class="lineno">  737</span>        <a class="code hl_function" href="a00479.xhtml#a6501b78d76c912d49eee88c8f7242923">CMatrix::alloc</a>(pptTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  738</span>        <a class="code hl_function" href="a00479.xhtml#a9f723a71e61f425d0ee9a51aa2162bf3">CMatrix::copy</a>(pptTmp, pptMat, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  739</span> </div>
<div class="line"><span class="lineno">  740</span>        <span class="keywordflow">if</span> (pptTmp[0][0] == 0)</div>
<div class="line"><span class="lineno">  741</span>        {</div>
<div class="line"><span class="lineno">  742</span>            <span class="keyword">auto</span> i = 1;</div>
<div class="line"><span class="lineno">  743</span>            <span class="keywordflow">while</span> (i &lt; iNumRows)</div>
<div class="line"><span class="lineno">  744</span>            {</div>
<div class="line"><span class="lineno">  745</span>                <span class="keywordflow">if</span> (pptTmp[i][0] != 0)</div>
<div class="line"><span class="lineno">  746</span>                {</div>
<div class="line"><span class="lineno">  747</span>                    <a class="code hl_function" href="a00479.xhtml#a036ce0072f4da74a8809550d21eac9dd">swapRowCol</a>(pptTmp, 0, i, iNumCols);</div>
<div class="line"><span class="lineno">  748</span>                    dDet *= -1;</div>
<div class="line"><span class="lineno">  749</span>                    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  750</span>                }</div>
<div class="line"><span class="lineno">  751</span>                i++;</div>
<div class="line"><span class="lineno">  752</span>            }</div>
<div class="line"><span class="lineno">  753</span>        }</div>
<div class="line"><span class="lineno">  754</span> </div>
<div class="line"><span class="lineno">  755</span>        <span class="keywordflow">if</span> (pptTmp[0][0] == 0)</div>
<div class="line"><span class="lineno">  756</span>        {</div>
<div class="line"><span class="lineno">  757</span>            <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  758</span>            <span class="keywordflow">return</span> 0;</div>
<div class="line"><span class="lineno">  759</span>        }</div>
<div class="line"><span class="lineno">  760</span> </div>
<div class="line"><span class="lineno">  761</span>        dDet *= pptTmp[0][0];</div>
<div class="line"><span class="lineno">  762</span> </div>
<div class="line"><span class="lineno">  763</span>        <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptTmp[0], 1.F / pptTmp[0][0], iNumCols);</div>
<div class="line"><span class="lineno">  764</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 1; i &lt; iNumRows; i++)</div>
<div class="line"><span class="lineno">  765</span>        {</div>
<div class="line"><span class="lineno">  766</span>            <span class="keyword">auto</span> j = 0;</div>
<div class="line"><span class="lineno">  767</span> </div>
<div class="line"><span class="lineno">  768</span>            <span class="keywordflow">if</span> (std::abs(dDet) &lt; kSingularityThresh * 1. * kSingularityThresh)</div>
<div class="line"><span class="lineno">  769</span>                dDet = 0;</div>
<div class="line"><span class="lineno">  770</span> </div>
<div class="line"><span class="lineno">  771</span>            <span class="keywordflow">while</span> (j &lt; i)</div>
<div class="line"><span class="lineno">  772</span>            {</div>
<div class="line"><span class="lineno">  773</span>                <a class="code hl_function" href="a00495.xhtml#a2239b170d46ed3d0846d766a0634a0be">CVector::addW_I</a>(pptTmp[i], pptTmp[j], -pptTmp[i][j], iNumCols);</div>
<div class="line"><span class="lineno">  774</span>                j++;</div>
<div class="line"><span class="lineno">  775</span>            }</div>
<div class="line"><span class="lineno">  776</span> </div>
<div class="line"><span class="lineno">  777</span>            <span class="keywordflow">if</span> (pptTmp[i][i] != 0)</div>
<div class="line"><span class="lineno">  778</span>            {</div>
<div class="line"><span class="lineno">  779</span>                dDet *= pptTmp[i][i];</div>
<div class="line"><span class="lineno">  780</span>                <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptTmp[i], 1.F / pptTmp[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  781</span>            }</div>
<div class="line"><span class="lineno">  782</span> </div>
<div class="line"><span class="lineno">  783</span>            <span class="keywordflow">if</span> (pptTmp[i][i] == 0)</div>
<div class="line"><span class="lineno">  784</span>            {</div>
<div class="line"><span class="lineno">  785</span>                <span class="keywordflow">for</span> (j = i + 1; j &lt; iNumCols; j++)</div>
<div class="line"><span class="lineno">  786</span>                {</div>
<div class="line"><span class="lineno">  787</span>                    <span class="keywordflow">if</span> (pptTmp[i][j] != 0)</div>
<div class="line"><span class="lineno">  788</span>                    {</div>
<div class="line"><span class="lineno">  789</span>                        <a class="code hl_function" href="a00495.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">CVector::add_I</a>(pptTmp[i], pptTmp[j], iNumCols);</div>
<div class="line"><span class="lineno">  790</span> </div>
<div class="line"><span class="lineno">  791</span>                        dDet *= pptTmp[i][i];</div>
<div class="line"><span class="lineno">  792</span>                        <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptTmp[i], 1.F / pptTmp[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  793</span>                        <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  794</span>                    }</div>
<div class="line"><span class="lineno">  795</span>                }</div>
<div class="line"><span class="lineno">  796</span>            }</div>
<div class="line"><span class="lineno">  797</span> </div>
<div class="line"><span class="lineno">  798</span>            <span class="keywordflow">if</span> (pptTmp[i][i] == 0)</div>
<div class="line"><span class="lineno">  799</span>            {</div>
<div class="line"><span class="lineno">  800</span>                <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  801</span>                <span class="keywordflow">return</span> 0;</div>
<div class="line"><span class="lineno">  802</span>            }</div>
<div class="line"><span class="lineno">  803</span>        }</div>
<div class="line"><span class="lineno">  804</span> </div>
<div class="line"><span class="lineno">  805</span>        <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  806</span> </div>
<div class="line"><span class="lineno">  807</span>        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(dDet);</div>
<div class="line"><span class="lineno">  808</span>    }</div>
<div class="ttc" id="aa00479_xhtml_a036ce0072f4da74a8809550d21eac9dd"><div class="ttname"><a href="a00479.xhtml#a036ce0072f4da74a8809550d21eac9dd">CMatrix::swapRowCol</a></div><div class="ttdeci">static void swapRowCol(float **pptSrcDest, int iRowIdx, int iColIdx, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00149_source.xhtml#l00670">Matrix.h:670</a></div></div>
<div class="ttc" id="aa00479_xhtml_a591097c6b1935c4d6273b3445f8f552b"><div class="ttname"><a href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a></div><div class="ttdeci">static void free(T **&amp;pptMat, int iNumRows)</div><div class="ttdef"><b>Definition:</b> <a href="a00149_source.xhtml#l00040">Matrix.h:40</a></div></div>
<div class="ttc" id="aa00479_xhtml_a6501b78d76c912d49eee88c8f7242923"><div class="ttname"><a href="a00479.xhtml#a6501b78d76c912d49eee88c8f7242923">CMatrix::alloc</a></div><div class="ttdeci">static void alloc(T **&amp;pptMat, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00149_source.xhtml#l00022">Matrix.h:22</a></div></div>
<div class="ttc" id="aa00479_xhtml_a9f723a71e61f425d0ee9a51aa2162bf3"><div class="ttname"><a href="a00479.xhtml#a9f723a71e61f425d0ee9a51aa2162bf3">CMatrix::copy</a></div><div class="ttdeci">static void copy(T **pptDestMat, T **pptSrcMat, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00149_source.xhtml#l00694">Matrix.h:694</a></div></div>
<div class="ttc" id="aa00495_xhtml_a2239b170d46ed3d0846d766a0634a0be"><div class="ttname"><a href="a00495.xhtml#a2239b170d46ed3d0846d766a0634a0be">CVector::addW_I</a></div><div class="ttdeci">static void addW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00422">Vector.h:422</a></div></div>
<div class="ttc" id="aa00495_xhtml_a3a052b83e62e5c5cc44829c64ffe42eb"><div class="ttname"><a href="a00495.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">CVector::add_I</a></div><div class="ttdeci">static void add_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00245">Vector.h:245</a></div></div>
<div class="ttc" id="aa00495_xhtml_a9811f50434dd058d201290b2dc98bfcd"><div class="ttname"><a href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a></div><div class="ttdeci">static void mulC_I(T *ptSrcDest, T fScale, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00172">Vector.h:172</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00245">CVector::add_I()</a>, <a class="el" href="a00155_source.xhtml#l00422">CVector::addW_I()</a>, <a class="el" href="a00149_source.xhtml#l00022">alloc()</a>, <a class="el" href="a00149_source.xhtml#l00694">copy()</a>, <a class="el" href="a00149_source.xhtml#l00040">free()</a>, <a class="el" href="a00155_source.xhtml#l00172">CVector::mulC_I()</a>, and <a class="el" href="a00149_source.xhtml#l00670">swapRowCol()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00109">CGmm::compProbabilities_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a7de6a75fccded32c57d3fe168263204f_cgraph.svg" width="615" height="342"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a7de6a75fccded32c57d3fe168263204f_icgraph.svg" width="510" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a082e384b71ea7a90ce8505f5ee0d48f9" name="a082e384b71ea7a90ce8505f5ee0d48f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a082e384b71ea7a90ce8505f5ee0d48f9">&#9670;&nbsp;</a></span>diag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::diag </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>ptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >returns matrix diagonal as vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>resulting vector of dimension min(iNumSrcRows, iNumCols) (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptSrc</td><td>input matrix of dimension iNumSrcRows x iNumCols </td></tr>
    <tr><td class="paramname">iNumSrcRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumSrcCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00371">371</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  372</span>    {</div>
<div class="line"><span class="lineno">  373</span>        assert(iNumSrcRows &gt; 0);</div>
<div class="line"><span class="lineno">  374</span>        assert(iNumSrcCols &gt; 0);</div>
<div class="line"><span class="lineno">  375</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  376</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  377</span>        assert(ptDest);</div>
<div class="line"><span class="lineno">  378</span> </div>
<div class="line"><span class="lineno">  379</span>        <span class="keywordtype">int</span> iLen = std::min(iNumSrcRows, iNumSrcCols);</div>
<div class="line"><span class="lineno">  380</span> </div>
<div class="line"><span class="lineno">  381</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iLen; m++)</div>
<div class="line"><span class="lineno">  382</span>            ptDest[m] = pptSrc[m][m];</div>
<div class="line"><span class="lineno">  383</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00039">CPca::compPca()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a082e384b71ea7a90ce8505f5ee0d48f9_icgraph.svg" width="270" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab1de9372b87cea546a3cbc839d25eb53" name="ab1de9372b87cea546a3cbc839d25eb53"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1de9372b87cea546a3cbc839d25eb53">&#9670;&nbsp;</a></span>div_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::div_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00245.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td>
          <td class="paramname"><em>bAddSmallConst</em> = <code><a class="el" href="a00245.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise division of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
    <tr><td class="paramname">bAddSmallConst</td><td>a small floating point number is added before division if true </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00585">585</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  586</span>    {</div>
<div class="line"><span class="lineno">  587</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  588</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  589</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  590</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  591</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  592</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  593</span> </div>
<div class="line"><span class="lineno">  594</span>        <span class="keywordtype">float</span> fEpsilon = bAddSmallConst? 1e-30F : .0F;</div>
<div class="line"><span class="lineno">  595</span> </div>
<div class="line"><span class="lineno">  596</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  597</span>        {</div>
<div class="line"><span class="lineno">  598</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  599</span>                pptSrcDest[m][n] /= (pptSrc[m][n] + fEpsilon);</div>
<div class="line"><span class="lineno">  600</span>        }</div>
<div class="line"><span class="lineno">  601</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ab1de9372b87cea546a3cbc839d25eb53_icgraph.svg" width="450" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a591097c6b1935c4d6273b3445f8f552b" name="a591097c6b1935c4d6273b3445f8f552b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a591097c6b1935c4d6273b3445f8f552b">&#9670;&nbsp;</a></span>free()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::free </td>
          <td>(</td>
          <td class="paramtype">T **&amp;&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >frees a float matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>(empty double pointer, to be set to zero) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00040">40</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   41</span>    {</div>
<div class="line"><span class="lineno">   42</span>        <span class="keywordflow">if</span> (!pptMat) <span class="keywordflow">return</span>;</div>
<div class="line"><span class="lineno">   43</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   44</span> </div>
<div class="line"><span class="lineno">   45</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   46</span>            <a class="code hl_function" href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(pptMat[m]);</div>
<div class="line"><span class="lineno">   47</span> </div>
<div class="line"><span class="lineno">   48</span>        <a class="code hl_function" href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(pptMat);</div>
<div class="line"><span class="lineno">   49</span>        pptMat = 0;</div>
<div class="line"><span class="lineno">   50</span>    }</div>
<div class="ttc" id="aa00495_xhtml_aa86bdb0c663d4d52f2765793756f8737"><div class="ttname"><a href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a></div><div class="ttdeci">static void free(T *&amp;ptVec)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00039">Vector.h:39</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00039">CVector::free()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00134_source.xhtml#l00050">CNormalizeAudio::CNormalizeAudio()</a>, <a class="el" href="a00032_source.xhtml#l00081">CKey::compKey()</a>, <a class="el" href="a00038_source.xhtml#l00496">CFeatureSpectralMfccs::deleteDctMat_()</a>, <a class="el" href="a00086_source.xhtml#l00233">CSpectrogramIf::destroyMelFb_()</a>, <a class="el" href="a00149_source.xhtml#l00724">det()</a>, <a class="el" href="a00068_source.xhtml#l00025">CFingerprint::init()</a>, <a class="el" href="a00110_source.xhtml#l00413">CChordIf::initViterbi_()</a>, <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>, <a class="el" href="a00098_source.xhtml#l00272">CGmmResult::reset()</a>, <a class="el" href="a00098_source.xhtml#l00039">CGmm::reset()</a>, <a class="el" href="a00053_source.xhtml#l00207">CNmfResult::reset()</a>, <a class="el" href="a00053_source.xhtml#l00044">CNmf::reset()</a>, <a class="el" href="a00059_source.xhtml#l00027">CPca::reset()</a>, <a class="el" href="a00062_source.xhtml#l00050">CDtw::reset()</a>, <a class="el" href="a00041_source.xhtml#l00036">CKmeans::reset()</a>, <a class="el" href="a00080_source.xhtml#l00050">CViterbi::reset()</a>, <a class="el" href="a00044_source.xhtml#l00087">CKnn::reset()</a>, <a class="el" href="a00110_source.xhtml#l00366">CChordIf::reset_()</a>, <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>, <a class="el" href="a00077_source.xhtml#l00042">CBlockAudioFile::~CBlockAudioFile()</a>, <a class="el" href="a00056_source.xhtml#l00063">CChordFromBlockIf::~CChordFromBlockIf()</a>, <a class="el" href="a00038_source.xhtml#l00373">CFeatureSpectralMfccs::~CFeatureSpectralMfccs()</a>, <a class="el" href="a00038_source.xhtml#l00520">CFeatureSpectralPitchChroma::~CFeatureSpectralPitchChroma()</a>, <a class="el" href="a00101_source.xhtml#l00238">CPitchTimeAuditory::~CPitchTimeAuditory()</a>, and <a class="el" href="a00089_source.xhtml#l00027">CSubFingerprint::~CSubFingerprint()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a591097c6b1935c4d6273b3445f8f552b_cgraph.svg" width="251" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a591097c6b1935c4d6273b3445f8f552b_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa10a63ffb2dd06bb5a3c0a411967d704" name="aa10a63ffb2dd06bb5a3c0a411967d704"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa10a63ffb2dd06bb5a3c0a411967d704">&#9670;&nbsp;</a></span>getCol()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::getCol </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>ptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >returns a column as vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>resulting vector of dimension iNumRows (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iColIdx</td><td>index of column to retrieve </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00171">171</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  172</span>    {</div>
<div class="line"><span class="lineno">  173</span>        assert(iColIdx &gt;= 0);</div>
<div class="line"><span class="lineno">  174</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  175</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  176</span>        assert(ptDest);</div>
<div class="line"><span class="lineno">  177</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  178</span> </div>
<div class="line"><span class="lineno">  179</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  180</span>            ptDest[m] = pptMat[m][iColIdx];</div>
<div class="line"><span class="lineno">  181</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00041_source.xhtml#l00161">CKmeans::assignClusterLabels_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_aa10a63ffb2dd06bb5a3c0a411967d704_icgraph.svg" width="592" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ae05c266fa6761a9b1070e33f42e39d17" name="ae05c266fa6761a9b1070e33f42e39d17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae05c266fa6761a9b1070e33f42e39d17">&#9670;&nbsp;</a></span>getMax()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float CMatrix::getMax </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >return maximum value in a matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix to analyze </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00609">609</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  610</span>    {</div>
<div class="line"><span class="lineno">  611</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  612</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  613</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  614</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  615</span> </div>
<div class="line"><span class="lineno">  616</span>        <span class="keywordtype">float</span> fGlobalMax = <a class="code hl_function" href="a00495.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a>(pptMat[0], iNumCols);</div>
<div class="line"><span class="lineno">  617</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 1; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  618</span>        {</div>
<div class="line"><span class="lineno">  619</span>            <span class="keywordtype">float</span> fMax = <a class="code hl_function" href="a00495.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">  620</span>            <span class="keywordflow">if</span> (fMax &gt; fGlobalMax)</div>
<div class="line"><span class="lineno">  621</span>                fGlobalMax = fMax;</div>
<div class="line"><span class="lineno">  622</span>        }</div>
<div class="line"><span class="lineno">  623</span>        <span class="keywordflow">return</span> fGlobalMax;</div>
<div class="line"><span class="lineno">  624</span>    }</div>
<div class="ttc" id="aa00495_xhtml_a9f5be871090bc5a64a7732cebfb4f8ec"><div class="ttname"><a href="a00495.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a></div><div class="ttdeci">static T getMax(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00572">Vector.h:572</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00572">CVector::getMax()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00110_source.xhtml#l00413">CChordIf::initViterbi_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ae05c266fa6761a9b1070e33f42e39d17_cgraph.svg" width="458" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_ae05c266fa6761a9b1070e33f42e39d17_icgraph.svg" width="100%" height="378"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aeab1ba198a343ce5523920c29fa6b592" name="aeab1ba198a343ce5523920c29fa6b592"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeab1ba198a343ce5523920c29fa6b592">&#9670;&nbsp;</a></span>getNorm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float CMatrix::getNorm </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >return the matrix norm (p=1) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00240">240</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  241</span>    {</div>
<div class="line"><span class="lineno">  242</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  243</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  244</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  245</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  246</span> </div>
<div class="line"><span class="lineno">  247</span>        <span class="keywordtype">float</span> fResult = 0;</div>
<div class="line"><span class="lineno">  248</span> </div>
<div class="line"><span class="lineno">  249</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  250</span>        {</div>
<div class="line"><span class="lineno">  251</span>            <span class="keywordtype">float</span> fTmp = 0;</div>
<div class="line"><span class="lineno">  252</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  253</span>                fTmp += std::abs(pptMat[m][n]);</div>
<div class="line"><span class="lineno">  254</span> </div>
<div class="line"><span class="lineno">  255</span>            <span class="keywordflow">if</span> (fTmp &gt; fResult)</div>
<div class="line"><span class="lineno">  256</span>                fResult = fTmp;</div>
<div class="line"><span class="lineno">  257</span>        }</div>
<div class="line"><span class="lineno">  258</span> </div>
<div class="line"><span class="lineno">  259</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><span class="lineno">  260</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_aeab1ba198a343ce5523920c29fa6b592_icgraph.svg" width="472" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ae42c7bf7d8d4d9286f4bf8ca57789fef" name="ae42c7bf7d8d4d9286f4bf8ca57789fef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae42c7bf7d8d4d9286f4bf8ca57789fef">&#9670;&nbsp;</a></span>getSum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float CMatrix::getSum </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00245.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td>
          <td class="paramname"><em>bAbs</em> = <code><a class="el" href="a00245.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >adds all matrix elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
    <tr><td class="paramname">bAbs</td><td>flag to indicate whether to sum the absolute values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00219">219</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  220</span>    {</div>
<div class="line"><span class="lineno">  221</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  222</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  223</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  224</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  225</span> </div>
<div class="line"><span class="lineno">  226</span>        <span class="keywordtype">float</span> fResult = 0;</div>
<div class="line"><span class="lineno">  227</span> </div>
<div class="line"><span class="lineno">  228</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  229</span>            fResult += <a class="code hl_function" href="a00495.xhtml#abdbcc3898121387f3694f74491b7331e">CVector::getSum</a>(pptMat[m], iNumCols, bAbs);</div>
<div class="line"><span class="lineno">  230</span> </div>
<div class="line"><span class="lineno">  231</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><span class="lineno">  232</span>    }</div>
<div class="ttc" id="aa00495_xhtml_abdbcc3898121387f3694f74491b7331e"><div class="ttname"><a href="a00495.xhtml#abdbcc3898121387f3694f74491b7331e">CVector::getSum</a></div><div class="ttdeci">static T getSum(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00452">Vector.h:452</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00452">CVector::getSum()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ae42c7bf7d8d4d9286f4bf8ca57789fef_cgraph.svg" width="296" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a3ba15aa7afd8b1b8310a67c79b81411f" name="a3ba15aa7afd8b1b8310a67c79b81411f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ba15aa7afd8b1b8310a67c79b81411f">&#9670;&nbsp;</a></span>getSumCol()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static float CMatrix::getSumCol </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00245.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td>
          <td class="paramname"><em>bAbs</em> = <code><a class="el" href="a00245.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >adds all elements in one columns </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols </td></tr>
    <tr><td class="paramname">iColIdx</td><td>column of interest </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">bAbs</td><td>flag to indicate whether to sum the absolute values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00190">190</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  191</span>    {</div>
<div class="line"><span class="lineno">  192</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  193</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  194</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  195</span> </div>
<div class="line"><span class="lineno">  196</span>        <span class="keywordtype">float</span> fResult = 0;</div>
<div class="line"><span class="lineno">  197</span> </div>
<div class="line"><span class="lineno">  198</span>        <span class="keywordflow">if</span> (bAbs)</div>
<div class="line"><span class="lineno">  199</span>        {</div>
<div class="line"><span class="lineno">  200</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  201</span>                fResult += std::abs(pptMat[m][iColIdx]);</div>
<div class="line"><span class="lineno">  202</span>        }</div>
<div class="line"><span class="lineno">  203</span>        <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  204</span>        {</div>
<div class="line"><span class="lineno">  205</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  206</span>                fResult += pptMat[m][iColIdx];</div>
<div class="line"><span class="lineno">  207</span>        }</div>
<div class="line"><span class="lineno">  208</span> </div>
<div class="line"><span class="lineno">  209</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><span class="lineno">  210</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00109">CGmm::compProbabilities_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a3ba15aa7afd8b1b8310a67c79b81411f_icgraph.svg" width="555" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a37585f57926ea2921734907bacc6cce8" name="a37585f57926ea2921734907bacc6cce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37585f57926ea2921734907bacc6cce8">&#9670;&nbsp;</a></span>inv_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::inv_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >computes inverse of square matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>input and output matrix (to be modified, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00817">817</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  818</span>    {</div>
<div class="line"><span class="lineno">  819</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  820</span>        assert(iNumRows == iNumCols);</div>
<div class="line"><span class="lineno">  821</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  822</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  823</span> </div>
<div class="line"><span class="lineno">  824</span>        <span class="keyword">const</span> <span class="keywordtype">float</span> kSingularityThresh = 1e-15F;</div>
<div class="line"><span class="lineno">  825</span>        T** ppfTmp = 0;</div>
<div class="line"><span class="lineno">  826</span>        T** ppfEye = 0;</div>
<div class="line"><span class="lineno">  827</span>        <span class="keywordtype">int</span>    i, j;</div>
<div class="line"><span class="lineno">  828</span>        <span class="keywordtype">double</span> dDet = 1;</div>
<div class="line"><span class="lineno">  829</span> </div>
<div class="line"><span class="lineno">  830</span>        <a class="code hl_function" href="a00479.xhtml#a6501b78d76c912d49eee88c8f7242923">alloc</a>(ppfTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  831</span>        <a class="code hl_function" href="a00479.xhtml#a9f723a71e61f425d0ee9a51aa2162bf3">copy</a>(ppfTmp, pptSrcDest, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  832</span> </div>
<div class="line"><span class="lineno">  833</span>        <a class="code hl_function" href="a00479.xhtml#a6501b78d76c912d49eee88c8f7242923">alloc</a>(ppfEye, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  834</span>        <a class="code hl_function" href="a00479.xhtml#a95b2436caee0cd232126f78c642238dd">setEye</a>(ppfEye, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  835</span> </div>
<div class="line"><span class="lineno">  836</span>        <span class="keywordflow">if</span> (pptSrcDest[0][0] == 0)</div>
<div class="line"><span class="lineno">  837</span>        {</div>
<div class="line"><span class="lineno">  838</span>            i = 1;</div>
<div class="line"><span class="lineno">  839</span>            <span class="keywordflow">while</span> (i &lt; iNumRows)</div>
<div class="line"><span class="lineno">  840</span>            {</div>
<div class="line"><span class="lineno">  841</span>                <span class="keywordflow">if</span> (pptSrcDest[i][0] != 0)</div>
<div class="line"><span class="lineno">  842</span>                {</div>
<div class="line"><span class="lineno">  843</span>                    <a class="code hl_function" href="a00479.xhtml#a036ce0072f4da74a8809550d21eac9dd">swapRowCol</a>(pptSrcDest, 0, i, iNumCols);</div>
<div class="line"><span class="lineno">  844</span>                    <a class="code hl_function" href="a00479.xhtml#a036ce0072f4da74a8809550d21eac9dd">swapRowCol</a>(ppfEye, 0, i, iNumCols);</div>
<div class="line"><span class="lineno">  845</span>                    dDet *= -1;</div>
<div class="line"><span class="lineno">  846</span>                    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  847</span>                }</div>
<div class="line"><span class="lineno">  848</span>                i++;</div>
<div class="line"><span class="lineno">  849</span>            }</div>
<div class="line"><span class="lineno">  850</span>        }</div>
<div class="line"><span class="lineno">  851</span> </div>
<div class="line"><span class="lineno">  852</span>        dDet *= pptSrcDest[0][0];</div>
<div class="line"><span class="lineno">  853</span> </div>
<div class="line"><span class="lineno">  854</span>        <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(ppfEye[0], 1.F / pptSrcDest[0][0], iNumCols);</div>
<div class="line"><span class="lineno">  855</span>        <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptSrcDest[0], 1.F / pptSrcDest[0][0], iNumCols);</div>
<div class="line"><span class="lineno">  856</span> </div>
<div class="line"><span class="lineno">  857</span>        <span class="keywordflow">for</span> (i = 1; i &lt; iNumRows; i++)</div>
<div class="line"><span class="lineno">  858</span>        {</div>
<div class="line"><span class="lineno">  859</span>            j = 0;</div>
<div class="line"><span class="lineno">  860</span> </div>
<div class="line"><span class="lineno">  861</span>            <span class="keywordflow">if</span> (std::abs(dDet) &lt; kSingularityThresh * 1.* kSingularityThresh)</div>
<div class="line"><span class="lineno">  862</span>                dDet = 0;</div>
<div class="line"><span class="lineno">  863</span> </div>
<div class="line"><span class="lineno">  864</span>            <span class="keywordflow">while</span> (j &lt; i)</div>
<div class="line"><span class="lineno">  865</span>            {</div>
<div class="line"><span class="lineno">  866</span>                <a class="code hl_function" href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(ppfEye[i], ppfEye[j], pptSrcDest[i][j], iNumCols);</div>
<div class="line"><span class="lineno">  867</span>                <a class="code hl_function" href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(pptSrcDest[i], pptSrcDest[j], pptSrcDest[i][j], iNumCols);</div>
<div class="line"><span class="lineno">  868</span>                j++;</div>
<div class="line"><span class="lineno">  869</span>            }</div>
<div class="line"><span class="lineno">  870</span> </div>
<div class="line"><span class="lineno">  871</span>            <span class="keywordflow">if</span> (pptSrcDest[i][i] != 0)</div>
<div class="line"><span class="lineno">  872</span>            {</div>
<div class="line"><span class="lineno">  873</span>                dDet *= pptSrcDest[i][i];</div>
<div class="line"><span class="lineno">  874</span>                <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(ppfEye[i], 1.F / pptSrcDest[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  875</span>                <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptSrcDest[i], 1.F / pptSrcDest[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  876</span>            }</div>
<div class="line"><span class="lineno">  877</span> </div>
<div class="line"><span class="lineno">  878</span>            <span class="keywordflow">if</span> (pptSrcDest[i][i] == 0)</div>
<div class="line"><span class="lineno">  879</span>            {</div>
<div class="line"><span class="lineno">  880</span>                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j1 = i + 1; j1 &lt; iNumCols; j1++)</div>
<div class="line"><span class="lineno">  881</span>                {</div>
<div class="line"><span class="lineno">  882</span>                    <span class="keywordflow">if</span> (pptSrcDest[i][j1] != 0)         <span class="comment">// Column pivotting not supported</span></div>
<div class="line"><span class="lineno">  883</span>                    {</div>
<div class="line"><span class="lineno">  884</span>                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1 = 0; i1 &lt; iNumRows; i1++)</div>
<div class="line"><span class="lineno">  885</span>                        {</div>
<div class="line"><span class="lineno">  886</span>                            <span class="keywordflow">for</span> (j = 0; j &lt; iNumCols; j++)</div>
<div class="line"><span class="lineno">  887</span>                                pptSrcDest[i1][j] = ppfTmp[i1][j];</div>
<div class="line"><span class="lineno">  888</span>                        }</div>
<div class="line"><span class="lineno">  889</span>                        <a class="code hl_function" href="a00479.xhtml#a37585f57926ea2921734907bacc6cce8">inv_I</a>(ppfTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  890</span>                        <a class="code hl_function" href="a00479.xhtml#a9f723a71e61f425d0ee9a51aa2162bf3">copy</a>(pptSrcDest, ppfTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  891</span> </div>
<div class="line"><span class="lineno">  892</span>                        <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfTmp, iNumRows);</div>
<div class="line"><span class="lineno">  893</span>                        <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfEye, iNumRows);</div>
<div class="line"><span class="lineno">  894</span>                        <span class="keywordflow">return</span>;</div>
<div class="line"><span class="lineno">  895</span>                    }</div>
<div class="line"><span class="lineno">  896</span>                }</div>
<div class="line"><span class="lineno">  897</span>            }</div>
<div class="line"><span class="lineno">  898</span>        }</div>
<div class="line"><span class="lineno">  899</span> </div>
<div class="line"><span class="lineno">  900</span>        <span class="keywordflow">for</span> (i = iNumRows - 1; i &gt; 0; i--)</div>
<div class="line"><span class="lineno">  901</span>        {</div>
<div class="line"><span class="lineno">  902</span>            <span class="keywordflow">for</span> (j = i - 1; j &gt;= 0; j--)</div>
<div class="line"><span class="lineno">  903</span>            {</div>
<div class="line"><span class="lineno">  904</span>                <a class="code hl_function" href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(ppfEye[j], ppfEye[i], pptSrcDest[j][i], iNumCols);</div>
<div class="line"><span class="lineno">  905</span>                <a class="code hl_function" href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(pptSrcDest[j], pptSrcDest[i], pptSrcDest[j][i], iNumCols);</div>
<div class="line"><span class="lineno">  906</span>            }</div>
<div class="line"><span class="lineno">  907</span>        }</div>
<div class="line"><span class="lineno">  908</span> </div>
<div class="line"><span class="lineno">  909</span>        <a class="code hl_function" href="a00479.xhtml#a9f723a71e61f425d0ee9a51aa2162bf3">copy</a>(pptSrcDest, ppfEye, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  910</span>        <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfTmp, iNumRows);</div>
<div class="line"><span class="lineno">  911</span>        <a class="code hl_function" href="a00479.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfEye, iNumRows);</div>
<div class="line"><span class="lineno">  912</span>    }</div>
<div class="ttc" id="aa00479_xhtml_a37585f57926ea2921734907bacc6cce8"><div class="ttname"><a href="a00479.xhtml#a37585f57926ea2921734907bacc6cce8">CMatrix::inv_I</a></div><div class="ttdeci">static void inv_I(T **pptSrcDest, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00149_source.xhtml#l00817">Matrix.h:817</a></div></div>
<div class="ttc" id="aa00479_xhtml_a95b2436caee0cd232126f78c642238dd"><div class="ttname"><a href="a00479.xhtml#a95b2436caee0cd232126f78c642238dd">CMatrix::setEye</a></div><div class="ttdeci">static void setEye(float **pptDest, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00149_source.xhtml#l00151">Matrix.h:151</a></div></div>
<div class="ttc" id="aa00495_xhtml_a4e5b5163bb46b8de5ac4013bde1ded00"><div class="ttname"><a href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a></div><div class="ttdeci">static void subW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00440">Vector.h:440</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00149_source.xhtml#l00022">alloc()</a>, <a class="el" href="a00149_source.xhtml#l00694">copy()</a>, <a class="el" href="a00149_source.xhtml#l00040">free()</a>, <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>, <a class="el" href="a00155_source.xhtml#l00172">CVector::mulC_I()</a>, <a class="el" href="a00149_source.xhtml#l00151">setEye()</a>, <a class="el" href="a00155_source.xhtml#l00440">CVector::subW_I()</a>, and <a class="el" href="a00149_source.xhtml#l00670">swapRowCol()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00109">CGmm::compProbabilities_()</a>, <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>, and <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a37585f57926ea2921734907bacc6cce8_cgraph.svg" width="640" height="342"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a37585f57926ea2921734907bacc6cce8_icgraph.svg" width="100%" height="366"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a43b79160c74e608b5fa2838f316670f3" name="a43b79160c74e608b5fa2838f316670f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43b79160c74e608b5fa2838f316670f3">&#9670;&nbsp;</a></span>mul_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mul_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise multiplication of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00515">515</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  516</span>    {</div>
<div class="line"><span class="lineno">  517</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  518</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  519</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  520</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  521</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  522</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  523</span> </div>
<div class="line"><span class="lineno">  524</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  525</span>        {</div>
<div class="line"><span class="lineno">  526</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  527</span>                pptSrcDest[m][n] *= pptSrc[m][n];</div>
<div class="line"><span class="lineno">  528</span>        }</div>
<div class="line"><span class="lineno">  529</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a43b79160c74e608b5fa2838f316670f3_icgraph.svg" width="454" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a46d2ac8bc93f5d296b3f8d7ad5ebe28b" name="a46d2ac8bc93f5d296b3f8d7ad5ebe28b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a46d2ac8bc93f5d296b3f8d7ad5ebe28b">&#9670;&nbsp;</a></span>mulC_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulC_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies the whole matrix with a single factor </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix to analyze </td></tr>
    <tr><td class="paramname">fScale</td><td>scaling factor to apply </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00651">651</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  652</span>    {</div>
<div class="line"><span class="lineno">  653</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  654</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  655</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  656</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  657</span> </div>
<div class="line"><span class="lineno">  658</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  659</span>            <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptMat[m], fScale, iNumCols);</div>
<div class="line"><span class="lineno">  660</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00172">CVector::mulC_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00072">CPca::compCov()</a>, <a class="el" href="a00110_source.xhtml#l00413">CChordIf::initViterbi_()</a>, and <a class="el" href="a00098_source.xhtml#l00140">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a46d2ac8bc93f5d296b3f8d7ad5ebe28b_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a46d2ac8bc93f5d296b3f8d7ad5ebe28b_icgraph.svg" width="100%" height="482"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="ab2c870f61fb9cd998993b7899f658100" name="ab2c870f61fb9cd998993b7899f658100"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2c870f61fb9cd998993b7899f658100">&#9670;&nbsp;</a></span>mulColC_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulColC_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>fValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iCol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a column of a matrix with a constant </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix with column to be multiplied </td></tr>
    <tr><td class="paramname">fValue</td><td>value to multiply the column with </td></tr>
    <tr><td class="paramname">iCol</td><td>index of column to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00460">460</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  461</span>    {</div>
<div class="line"><span class="lineno">  462</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  463</span>        assert(iCol &gt;= 0);</div>
<div class="line"><span class="lineno">  464</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  465</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  466</span> </div>
<div class="line"><span class="lineno">  467</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  468</span>            pptMat[m][iCol] *= fValue;</div>
<div class="line"><span class="lineno">  469</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00109">CGmm::compProbabilities_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ab2c870f61fb9cd998993b7899f658100_icgraph.svg" width="551" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aea595a79b907bd51e623f56fd658348a" name="aea595a79b907bd51e623f56fd658348a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea595a79b907bd51e623f56fd658348a">&#9670;&nbsp;</a></span>mulColVecRowVec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulColVecRowVec </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptSrcColVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptSrcRowVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a column vec with a row vec (VEC * VEC) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>resulting matrix of dimension iNumMatRows X iNumMatCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcColVec</td><td>(column) vector to be multiplied </td></tr>
    <tr><td class="paramname">ptSrcRowVec</td><td>(row) vector to be multiplied </td></tr>
    <tr><td class="paramname">iNumMatRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumMatCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00414">414</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  415</span>    {</div>
<div class="line"><span class="lineno">  416</span>        assert(iNumMatRows &gt; 0);</div>
<div class="line"><span class="lineno">  417</span>        assert(iNumMatCols &gt; 0);</div>
<div class="line"><span class="lineno">  418</span>        assert(ptSrcRowVec);</div>
<div class="line"><span class="lineno">  419</span>        assert(ptSrcColVec);</div>
<div class="line"><span class="lineno">  420</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">  421</span>        assert(pptDestMat[0]);</div>
<div class="line"><span class="lineno">  422</span> </div>
<div class="line"><span class="lineno">  423</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumMatRows; m++)</div>
<div class="line"><span class="lineno">  424</span>        {</div>
<div class="line"><span class="lineno">  425</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumMatCols; n++)</div>
<div class="line"><span class="lineno">  426</span>                pptDestMat[m][n] = ptSrcColVec[m] * ptSrcRowVec[n];</div>
<div class="line"><span class="lineno">  427</span>        }</div>
<div class="line"><span class="lineno">  428</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00098_source.xhtml#l00140">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_aea595a79b907bd51e623f56fd658348a_icgraph.svg" width="571" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab0ca8e552db389f6323e1c3d26e59902" name="ab0ca8e552db389f6323e1c3d26e59902"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0ca8e552db389f6323e1c3d26e59902">&#9670;&nbsp;</a></span>mulMatColVec()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulMatColVec </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>ptDestColVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptSrcColVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a matrix with a column vector (MAT * VEC) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDestColVec</td><td>resulting (column) vector of length iNumMatRows (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptMat</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">ptSrcColVec</td><td>(column) vector to be multiplied </td></tr>
    <tr><td class="paramname">iNumMatRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumMatCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00393">393</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  394</span>    {</div>
<div class="line"><span class="lineno">  395</span>        assert(iNumMatRows &gt; 0);</div>
<div class="line"><span class="lineno">  396</span>        assert(iNumMatCols &gt; 0);</div>
<div class="line"><span class="lineno">  397</span>        assert(ptDestColVec);</div>
<div class="line"><span class="lineno">  398</span>        assert(ptSrcColVec);</div>
<div class="line"><span class="lineno">  399</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  400</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  401</span> </div>
<div class="line"><span class="lineno">  402</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumMatRows; m++)</div>
<div class="line"><span class="lineno">  403</span>            ptDestColVec[m] = <a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">CVector::mulScalar</a>(pptMat[m], ptSrcColVec, iNumMatCols);</div>
<div class="line"><span class="lineno">  404</span>    }</div>
<div class="ttc" id="aa00495_xhtml_a269d316eeb6000aac4f57ade32c83127"><div class="ttname"><a href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">CVector::mulScalar</a></div><div class="ttdeci">static T mulScalar(const T *ptSrc1, const T *ptSrc2, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00205">Vector.h:205</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00205">CVector::mulScalar()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00056_source.xhtml#l00030">CChordFromBlockIf::compChordProb()</a>, <a class="el" href="a00098_source.xhtml#l00109">CGmm::compProbabilities_()</a>, and <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ab0ca8e552db389f6323e1c3d26e59902_cgraph.svg" width="350" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_ab0ca8e552db389f6323e1c3d26e59902_icgraph.svg" width="100%" height="416"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="ab92b94faf2a3219fc721f3a455eabecd" name="ab92b94faf2a3219fc721f3a455eabecd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab92b94faf2a3219fc721f3a455eabecd">&#9670;&nbsp;</a></span>mulMatMat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulMatMat </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum1Rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum1Cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum2Rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum2Cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a matrix with a matrix (MAT1 * MAT2) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDest</td><td>resulting matrix of dimension iNum1Rows x iNum2Cols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptSrc1</td><td>first matrix to be multiplied </td></tr>
    <tr><td class="paramname">pptSrc2</td><td>second matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNum1Rows</td><td>number of rows in matrix 1 </td></tr>
    <tr><td class="paramname">iNum1Cols</td><td>number of columns in matrix 1 (has to equal iNum2Rows) </td></tr>
    <tr><td class="paramname">iNum2Rows</td><td>number of rows in matrix 2 (has to equal iNum1Col) </td></tr>
    <tr><td class="paramname">iNum2Cols</td><td>number of columns in matrix 2 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00481">481</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  482</span>    {</div>
<div class="line"><span class="lineno">  483</span>        assert(iNum1Rows &gt; 0);</div>
<div class="line"><span class="lineno">  484</span>        assert(iNum1Cols &gt; 0);</div>
<div class="line"><span class="lineno">  485</span>        assert(iNum2Rows &gt; 0);</div>
<div class="line"><span class="lineno">  486</span>        assert(iNum2Cols &gt; 0);</div>
<div class="line"><span class="lineno">  487</span>        assert(iNum1Cols == iNum2Rows);</div>
<div class="line"><span class="lineno">  488</span>        assert(pptDest);</div>
<div class="line"><span class="lineno">  489</span>        assert(pptDest[0]);</div>
<div class="line"><span class="lineno">  490</span>        assert(pptSrc1);</div>
<div class="line"><span class="lineno">  491</span>        assert(pptSrc1[0]);</div>
<div class="line"><span class="lineno">  492</span>        assert(pptSrc2);</div>
<div class="line"><span class="lineno">  493</span>        assert(pptSrc2[0]);</div>
<div class="line"><span class="lineno">  494</span> </div>
<div class="line"><span class="lineno">  495</span>        iNum2Rows = iNum1Cols; <span class="comment">// avoid compiler warning</span></div>
<div class="line"><span class="lineno">  496</span> </div>
<div class="line"><span class="lineno">  497</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNum1Rows; m++)</div>
<div class="line"><span class="lineno">  498</span>        {</div>
<div class="line"><span class="lineno">  499</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNum2Cols; n++)</div>
<div class="line"><span class="lineno">  500</span>            {</div>
<div class="line"><span class="lineno">  501</span>                pptDest[m][n] = 0.F;</div>
<div class="line"><span class="lineno">  502</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> k = 0; k &lt; iNum1Cols; k++)</div>
<div class="line"><span class="lineno">  503</span>                    pptDest[m][n] += pptSrc1[m][k] * pptSrc2[k][n];</div>
<div class="line"><span class="lineno">  504</span>            }</div>
<div class="line"><span class="lineno">  505</span>        }</div>
<div class="line"><span class="lineno">  506</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00039">CPca::compPca()</a>, and <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ab92b94faf2a3219fc721f3a455eabecd_icgraph.svg" width="487" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a118b92877207aa35f9a15a48c5e3c8d5" name="a118b92877207aa35f9a15a48c5e3c8d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a118b92877207aa35f9a15a48c5e3c8d5">&#9670;&nbsp;</a></span>mulRowVecMat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulRowVecMat </td>
          <td>(</td>
          <td class="paramtype">float *&#160;</td>
          <td class="paramname"><em>ptDestRowVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *&#160;</td>
          <td class="paramname"><em>ptSrcRowVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a row vector with a matrix (VEC * MAT) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDestRowVec</td><td>resulting (row) vector of length iNumMatCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcRowVec</td><td>(column) vector to be multiplied </td></tr>
    <tr><td class="paramname">pptMat</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumMatRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumMatCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00438">438</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  439</span>    {</div>
<div class="line"><span class="lineno">  440</span>        assert(iNumMatRows &gt; 0);</div>
<div class="line"><span class="lineno">  441</span>        assert(iNumMatCols &gt; 0);</div>
<div class="line"><span class="lineno">  442</span>        assert(ptDestRowVec);</div>
<div class="line"><span class="lineno">  443</span>        assert(ptSrcRowVec);</div>
<div class="line"><span class="lineno">  444</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  445</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  446</span> </div>
<div class="line"><span class="lineno">  447</span>        <a class="code hl_function" href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a>(ptDestRowVec, iNumMatCols);</div>
<div class="line"><span class="lineno">  448</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumMatCols; n++)</div>
<div class="line"><span class="lineno">  449</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumMatRows; m++)</div>
<div class="line"><span class="lineno">  450</span>                ptDestRowVec[n] += ptSrcRowVec[m] * pptMat[m][n];</div>
<div class="line"><span class="lineno">  451</span>    }</div>
<div class="ttc" id="aa00495_xhtml_a6dbb3f9f480568b60f7fe50090d20003"><div class="ttname"><a href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a></div><div class="ttdeci">static void setZero(T *ptSrcDest, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00051">Vector.h:51</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00051">CVector::setZero()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a118b92877207aa35f9a15a48c5e3c8d5_cgraph.svg" width="342" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a40d07d61b6e3aa0b9c27977908c3814e" name="a40d07d61b6e3aa0b9c27977908c3814e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a40d07d61b6e3aa0b9c27977908c3814e">&#9670;&nbsp;</a></span>rearrangeRows()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::rearrangeRows </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>piRowIndices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >rearrange the rows of a matrix according to a row index vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resorted matrix of dimension iNumRows x ? </td></tr>
    <tr><td class="paramname">piRowIndices</td><td>new indices iNumRows </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00342">342</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  343</span>    {</div>
<div class="line"><span class="lineno">  344</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  345</span>        assert(piRowIndices);</div>
<div class="line"><span class="lineno">  346</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  347</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  348</span> </div>
<div class="line"><span class="lineno">  349</span>        <span class="keywordtype">float</span>** ppfTmp = 0;</div>
<div class="line"><span class="lineno">  350</span>        <a class="code hl_function" href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(ppfTmp, iNumRows);</div>
<div class="line"><span class="lineno">  351</span> </div>
<div class="line"><span class="lineno">  352</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  353</span>        {</div>
<div class="line"><span class="lineno">  354</span>            assert(piRowIndices[m] &lt; iNumRows);</div>
<div class="line"><span class="lineno">  355</span>            assert(piRowIndices[m] &gt;= 0);</div>
<div class="line"><span class="lineno">  356</span> </div>
<div class="line"><span class="lineno">  357</span>            ppfTmp[m] = pptSrcDest[piRowIndices[m]];</div>
<div class="line"><span class="lineno">  358</span>        }</div>
<div class="line"><span class="lineno">  359</span>        <a class="code hl_function" href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a>(pptSrcDest, ppfTmp, iNumRows);</div>
<div class="line"><span class="lineno">  360</span> </div>
<div class="line"><span class="lineno">  361</span>        <a class="code hl_function" href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(ppfTmp);</div>
<div class="line"><span class="lineno">  362</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00024">CVector::alloc()</a>, <a class="el" href="a00155_source.xhtml#l00113">CVector::copy()</a>, and <a class="el" href="a00155_source.xhtml#l00039">CVector::free()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00039">CPca::compPca()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a40d07d61b6e3aa0b9c27977908c3814e_cgraph.svg" width="487" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a40d07d61b6e3aa0b9c27977908c3814e_icgraph.svg" width="332" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a989372fd225413baed0cc7902c4af03d" name="a989372fd225413baed0cc7902c4af03d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a989372fd225413baed0cc7902c4af03d">&#9670;&nbsp;</a></span>setCol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setCol </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptSrcVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >copies vector content to a column </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>(destination matrix, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcVec</td><td>(source vector) </td></tr>
    <tr><td class="paramname">iColIdx</td><td>index of row to copy to </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00115">115</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  116</span>    {</div>
<div class="line"><span class="lineno">  117</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">  118</span>        assert(ptSrcVec);</div>
<div class="line"><span class="lineno">  119</span>        assert(iColIdx &gt;= 0);</div>
<div class="line"><span class="lineno">  120</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  121</span> </div>
<div class="line"><span class="lineno">  122</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  123</span>            pptDestMat[m][iColIdx] = ptSrcVec[m];</div>
<div class="line"><span class="lineno">  124</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00110_source.xhtml#l00196">CChordIf::compChords()</a>, and <a class="el" href="a00110_source.xhtml#l00413">CChordIf::initViterbi_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a989372fd225413baed0cc7902c4af03d_icgraph.svg" width="100%" height="394"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a95b2436caee0cd232126f78c642238dd" name="a95b2436caee0cd232126f78c642238dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95b2436caee0cd232126f78c642238dd">&#9670;&nbsp;</a></span>setEye()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setEye </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >fills matrix with ones on the diagonal, zeros elsewhere </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDest</td><td>resulting matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00151">151</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  152</span>    {</div>
<div class="line"><span class="lineno">  153</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  154</span>        assert(iNumRows == iNumCols);</div>
<div class="line"><span class="lineno">  155</span>        assert(pptDest);</div>
<div class="line"><span class="lineno">  156</span>        assert(pptDest[0]);</div>
<div class="line"><span class="lineno">  157</span> </div>
<div class="line"><span class="lineno">  158</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  159</span>        {</div>
<div class="line"><span class="lineno">  160</span>            <a class="code hl_function" href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a>(pptDest[m], iNumCols);</div>
<div class="line"><span class="lineno">  161</span>            pptDest[m][m] = 1.F;</div>
<div class="line"><span class="lineno">  162</span>        }</div>
<div class="line"><span class="lineno">  163</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00051">CVector::setZero()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a95b2436caee0cd232126f78c642238dd_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a95b2436caee0cd232126f78c642238dd_icgraph.svg" width="100%" height="366"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa95c84e6a291f19c70f2cc2ea7e1cd48" name="aa95c84e6a291f19c70f2cc2ea7e1cd48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa95c84e6a291f19c70f2cc2ea7e1cd48">&#9670;&nbsp;</a></span>setRand()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setRand </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets a float matrix to random </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00096">96</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   97</span>    {</div>
<div class="line"><span class="lineno">   98</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   99</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  100</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  101</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  102</span> </div>
<div class="line"><span class="lineno">  103</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  104</span>            <a class="code hl_function" href="a00495.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">CVector::setRand</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">  105</span>    }</div>
<div class="ttc" id="aa00495_xhtml_af7cbe6ef61f8d3acc5d853af9ad58d48"><div class="ttname"><a href="a00495.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">CVector::setRand</a></div><div class="ttdeci">static void setRand(T *ptDest, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00082">Vector.h:82</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00082">CVector::setRand()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00178">CNmfResult::init()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_aa95c84e6a291f19c70f2cc2ea7e1cd48_cgraph.svg" width="499" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_aa95c84e6a291f19c70f2cc2ea7e1cd48_icgraph.svg" width="422" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ab4215ef0262601f6f06956904a48c8b8" name="ab4215ef0262601f6f06956904a48c8b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4215ef0262601f6f06956904a48c8b8">&#9670;&nbsp;</a></span>setRow()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setRow </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptSrcVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iRowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >copies vector content to a row </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>(destination matrix, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcVec</td><td>(source vector) </td></tr>
    <tr><td class="paramname">iRowIdx</td><td>index of row to copy to </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00713">713</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  714</span>    {</div>
<div class="line"><span class="lineno">  715</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">  716</span>        assert(ptSrcVec);</div>
<div class="line"><span class="lineno">  717</span>        assert(iRowIdx &gt;= 0);</div>
<div class="line"><span class="lineno">  718</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  719</span> </div>
<div class="line"><span class="lineno">  720</span>        <a class="code hl_function" href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a>(pptDestMat[iRowIdx], ptSrcVec, iNumCols);</div>
<div class="line"><span class="lineno">  721</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00113">CVector::copy()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ab4215ef0262601f6f06956904a48c8b8_cgraph.svg" width="278" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a1c25e33302ff6282ca58bc27875cc10a" name="a1c25e33302ff6282ca58bc27875cc10a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c25e33302ff6282ca58bc27875cc10a">&#9670;&nbsp;</a></span>setValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setValue </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets a float matrix to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">tValue</td><td>value to use </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00078">78</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   79</span>    {</div>
<div class="line"><span class="lineno">   80</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   81</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">   82</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">   83</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">   84</span> </div>
<div class="line"><span class="lineno">   85</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   86</span>            <a class="code hl_function" href="a00495.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a>(pptMat[m], tValue, iNumCols);</div>
<div class="line"><span class="lineno">   87</span>    }</div>
<div class="ttc" id="aa00495_xhtml_a4cf9544dd96801e3ee47fd1ef2049a1b"><div class="ttname"><a href="a00495.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a></div><div class="ttdeci">static void setValue(T *ptDest, T tValue, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00067">Vector.h:67</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00067">CVector::setValue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00019">CNmf::init()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a1c25e33302ff6282ca58bc27875cc10a_cgraph.svg" width="308" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a1c25e33302ff6282ca58bc27875cc10a_icgraph.svg" width="260" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a7be1ae4f635c5aaec0c2693fc23b3646" name="a7be1ae4f635c5aaec0c2693fc23b3646"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7be1ae4f635c5aaec0c2693fc23b3646">&#9670;&nbsp;</a></span>setZero()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setZero </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets a float matrix to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00059">59</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   60</span>    {</div>
<div class="line"><span class="lineno">   61</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   62</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">   63</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">   64</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">   65</span> </div>
<div class="line"><span class="lineno">   66</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   67</span>            <a class="code hl_function" href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">   68</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00051">CVector::setZero()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00100">CPca::calcSVD()</a>, <a class="el" href="a00041_source.xhtml#l00126">CKmeans::compClusterMeans_()</a>, <a class="el" href="a00059_source.xhtml#l00072">CPca::compCov()</a>, <a class="el" href="a00089_source.xhtml#l00072">CSubFingerprint::genBands_()</a>, and <a class="el" href="a00098_source.xhtml#l00140">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a7be1ae4f635c5aaec0c2693fc23b3646_cgraph.svg" width="294" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a7be1ae4f635c5aaec0c2693fc23b3646_icgraph.svg" width="100%" height="480"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a8c7b91818cdb1dd765ff8add1eb87a2b" name="a8c7b91818cdb1dd765ff8add1eb87a2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c7b91818cdb1dd765ff8add1eb87a2b">&#9670;&nbsp;</a></span>setZeroBelowThresh()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setZeroBelowThresh </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tThresh</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets all elements in a matrix below a threshold to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
    <tr><td class="paramname">tThresh</td><td>threshold </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00134">134</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  135</span>    {</div>
<div class="line"><span class="lineno">  136</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  137</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  138</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  139</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  140</span> </div>
<div class="line"><span class="lineno">  141</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  142</span>            <a class="code hl_function" href="a00495.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a>(pptMat[m], iNumCols, tThresh);</div>
<div class="line"><span class="lineno">  143</span>    }</div>
<div class="ttc" id="aa00495_xhtml_aba07261926b4c10ed7fdbe38edf6d16d"><div class="ttname"><a href="a00495.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a></div><div class="ttdeci">static void setZeroBelowThresh(T *ptSrcDest, long long int iLength, T tThresh)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00097">Vector.h:97</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00097">CVector::setZeroBelowThresh()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a8c7b91818cdb1dd765ff8add1eb87a2b_cgraph.svg" width="446" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a8c7b91818cdb1dd765ff8add1eb87a2b_icgraph.svg" width="542" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a5a0100d80d6eeb48cb352b865ef42402" name="a5a0100d80d6eeb48cb352b865ef42402"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a0100d80d6eeb48cb352b865ef42402">&#9670;&nbsp;</a></span>sub_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::sub_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise subtraction of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00561">561</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  562</span>    {</div>
<div class="line"><span class="lineno">  563</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  564</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  565</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  566</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  567</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  568</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  569</span> </div>
<div class="line"><span class="lineno">  570</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  571</span>        {</div>
<div class="line"><span class="lineno">  572</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  573</span>                pptSrcDest[m][n] -= pptSrc[m][n];</div>
<div class="line"><span class="lineno">  574</span>        }</div>
<div class="line"><span class="lineno">  575</span>    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a036ce0072f4da74a8809550d21eac9dd" name="a036ce0072f4da74a8809550d21eac9dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a036ce0072f4da74a8809550d21eac9dd">&#9670;&nbsp;</a></span>swapRowCol()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::swapRowCol </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iRowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >swaps a matrix row with a column in a square matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix (to be modified) </td></tr>
    <tr><td class="paramname">iRowIdx</td><td>index of row </td></tr>
    <tr><td class="paramname">iColIdx</td><td>index of columns </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00670">670</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  671</span>    {</div>
<div class="line"><span class="lineno">  672</span>        assert(iRowIdx &gt; 0);</div>
<div class="line"><span class="lineno">  673</span>        assert(iColIdx &gt; 0);</div>
<div class="line"><span class="lineno">  674</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  675</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  676</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  677</span> </div>
<div class="line"><span class="lineno">  678</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  679</span>        {</div>
<div class="line"><span class="lineno">  680</span>            <span class="keywordtype">float</span> fTmp = pptSrcDest[iRowIdx][n];</div>
<div class="line"><span class="lineno">  681</span>            pptSrcDest[iRowIdx][n] = pptSrcDest[iColIdx][n];</div>
<div class="line"><span class="lineno">  682</span>            pptSrcDest[iColIdx][n] = fTmp;</div>
<div class="line"><span class="lineno">  683</span>        }</div>
<div class="line"><span class="lineno">  684</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00149_source.xhtml#l00724">det()</a>, and <a class="el" href="a00149_source.xhtml#l00817">inv_I()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00479_a036ce0072f4da74a8809550d21eac9dd_icgraph.svg" width="100%" height="384"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="ab2af0440df04eb1c165231c695e43bf6" name="ab2af0440df04eb1c165231c695e43bf6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2af0440df04eb1c165231c695e43bf6">&#9670;&nbsp;</a></span>transpose()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::transpose </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >transposes matrix pptSrc and write the result to pptDest </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDest</td><td>resulting matrix of dimension iNumSrcCols x iNumSrcRows (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptSrc</td><td>input matrix of dimension iNumSrcRows x iNumCols </td></tr>
    <tr><td class="paramname">iNumSrcRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumSrcCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00320">320</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  321</span>    {</div>
<div class="line"><span class="lineno">  322</span>        assert(iNumSrcRows &gt; 0);</div>
<div class="line"><span class="lineno">  323</span>        assert(iNumSrcCols &gt; 0);</div>
<div class="line"><span class="lineno">  324</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  325</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  326</span>        assert(pptDest);</div>
<div class="line"><span class="lineno">  327</span>        assert(pptDest[0]);</div>
<div class="line"><span class="lineno">  328</span> </div>
<div class="line"><span class="lineno">  329</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumSrcRows; m++)</div>
<div class="line"><span class="lineno">  330</span>        {</div>
<div class="line"><span class="lineno">  331</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumSrcCols; n++)</div>
<div class="line"><span class="lineno">  332</span>                pptDest[n][m] = pptSrc[m][n];</div>
<div class="line"><span class="lineno">  333</span>        }</div>
<div class="line"><span class="lineno">  334</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00059_source.xhtml#l00039">CPca::compPca()</a>, <a class="el" href="a00044_source.xhtml#l00015">CKnn::init()</a>, and <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_ab2af0440df04eb1c165231c695e43bf6_icgraph.svg" width="479" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a3e91601d28cffd5e5de9adcfca8fd4a9" name="a3e91601d28cffd5e5de9adcfca8fd4a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e91601d28cffd5e5de9adcfca8fd4a9">&#9670;&nbsp;</a></span>vecnorm_I()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::vecnorm_I </td>
          <td>(</td>
          <td class="paramtype">float **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >normalizes each column of the matrix (p=1) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd></dd></dl>

<p class="definition">Definition at line <a class="el" href="a00149_source.xhtml#l00268">268</a> of file <a class="el" href="a00149_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  269</span>    {</div>
<div class="line"><span class="lineno">  270</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  271</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  272</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  273</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  274</span> </div>
<div class="line"><span class="lineno">  275</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  276</span>        {</div>
<div class="line"><span class="lineno">  277</span>            <span class="keywordtype">float</span> fNorm = 0;</div>
<div class="line"><span class="lineno">  278</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  279</span>                fNorm += std::abs(pptSrcDest[m][n]);</div>
<div class="line"><span class="lineno">  280</span>            <span class="keywordflow">if</span> (fNorm &gt; 0)</div>
<div class="line"><span class="lineno">  281</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  282</span>                    pptSrcDest[m][n] /= fNorm;</div>
<div class="line"><span class="lineno">  283</span>        }</div>
<div class="line"><span class="lineno">  284</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00053_source.xhtml#l00178">CNmfResult::init()</a>, and <a class="el" href="a00053_source.xhtml#l00097">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00479_a3e91601d28cffd5e5de9adcfca8fd4a9_icgraph.svg" width="483" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="a00149_source.xhtml">Matrix.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00479.xhtml">CMatrix</a></li>
    <li class="footer">Generated on Mon Jun 13 2022 22:01:50 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
