<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: CMatrix Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.3.1</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a00486.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="a00483.xhtml">List of all members</a>  </div>
  <div class="headertitle"><div class="title">CMatrix Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>class with static functions for matrix operations, works with both float and double (functionality only added when needed)  
 <a href="a00486.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="a00143_source.xhtml">Matrix.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for CMatrix:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00484.svg" width="202" height="572"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a6501b78d76c912d49eee88c8f7242923"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6501b78d76c912d49eee88c8f7242923"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a6501b78d76c912d49eee88c8f7242923">alloc</a> (T **&amp;pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a6501b78d76c912d49eee88c8f7242923"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa633cf46c2b3938a1a7a8199c31051dd"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa633cf46c2b3938a1a7a8199c31051dd"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#aa633cf46c2b3938a1a7a8199c31051dd">copy</a> (T **pptDestMat, const T *const *const pptSrcMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aa633cf46c2b3938a1a7a8199c31051dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a591097c6b1935c4d6273b3445f8f552b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a591097c6b1935c4d6273b3445f8f552b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">free</a> (T **&amp;pptMat, int iNumRows)</td></tr>
<tr class="separator:a591097c6b1935c4d6273b3445f8f552b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a4d1830fe1344f0ac40d519690dafea"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5a4d1830fe1344f0ac40d519690dafea"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a5a4d1830fe1344f0ac40d519690dafea">setCol</a> (T **pptDestMat, const T *ptSrcVec, int iColIdx, int iNumRows)</td></tr>
<tr class="separator:a5a4d1830fe1344f0ac40d519690dafea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f27c49fcbbdb52e2e9a50f2b22f59c3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8f27c49fcbbdb52e2e9a50f2b22f59c3"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a8f27c49fcbbdb52e2e9a50f2b22f59c3">setEye</a> (T **pptDest, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a8f27c49fcbbdb52e2e9a50f2b22f59c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa95c84e6a291f19c70f2cc2ea7e1cd48"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa95c84e6a291f19c70f2cc2ea7e1cd48"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#aa95c84e6a291f19c70f2cc2ea7e1cd48">setRand</a> (T **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aa95c84e6a291f19c70f2cc2ea7e1cd48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad81ae44f35c3404e30ae8893d57ea2ff"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad81ae44f35c3404e30ae8893d57ea2ff"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#ad81ae44f35c3404e30ae8893d57ea2ff">setRow</a> (T **pptDestMat, const T *ptSrcVec, int iRowIdx, int iNumCols)</td></tr>
<tr class="separator:ad81ae44f35c3404e30ae8893d57ea2ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c25e33302ff6282ca58bc27875cc10a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1c25e33302ff6282ca58bc27875cc10a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a1c25e33302ff6282ca58bc27875cc10a">setValue</a> (T **pptMat, T tValue, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a1c25e33302ff6282ca58bc27875cc10a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7be1ae4f635c5aaec0c2693fc23b3646"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7be1ae4f635c5aaec0c2693fc23b3646"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a7be1ae4f635c5aaec0c2693fc23b3646">setZero</a> (T **pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a7be1ae4f635c5aaec0c2693fc23b3646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c7b91818cdb1dd765ff8add1eb87a2b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8c7b91818cdb1dd765ff8add1eb87a2b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a8c7b91818cdb1dd765ff8add1eb87a2b">setZeroBelowThresh</a> (T **pptMat, int iNumRows, int iNumCols, T tThresh)</td></tr>
<tr class="separator:a8c7b91818cdb1dd765ff8add1eb87a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1553f74613e06cf72a741728231e88cb"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1553f74613e06cf72a741728231e88cb"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a1553f74613e06cf72a741728231e88cb">vecnorm_I</a> (T **pptSrcDest, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a1553f74613e06cf72a741728231e88cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7731601374cc56417cf2d9d223b40a67"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7731601374cc56417cf2d9d223b40a67"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a7731601374cc56417cf2d9d223b40a67">getCol</a> (T *ptDest, const T *const *const pptMat, int iColIdx, int iNumRows)</td></tr>
<tr class="separator:a7731601374cc56417cf2d9d223b40a67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62486a220c071d7e4ae970d9f1dc1093"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a62486a220c071d7e4ae970d9f1dc1093"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a62486a220c071d7e4ae970d9f1dc1093">getDiag</a> (T *ptDest, const T *const *const pptSrc, int iNumSrcRows, int iNumSrcCols)</td></tr>
<tr class="separator:a62486a220c071d7e4ae970d9f1dc1093"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac9eff035a753b3ecb357d4c24637b8b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aac9eff035a753b3ecb357d4c24637b8b"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#aac9eff035a753b3ecb357d4c24637b8b">getMax</a> (const T *const *const pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aac9eff035a753b3ecb357d4c24637b8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3b2088c77c6c79fabf823e50327c152"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af3b2088c77c6c79fabf823e50327c152"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#af3b2088c77c6c79fabf823e50327c152">getNorm</a> (const T *const *const pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:af3b2088c77c6c79fabf823e50327c152"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae48093975ee83a53abb7ab2c25b8610c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae48093975ee83a53abb7ab2c25b8610c"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#ae48093975ee83a53abb7ab2c25b8610c">getSum</a> (T **pptMat, int iNumRows, int iNumCols, <a class="el" href="a00284.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00284.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:ae48093975ee83a53abb7ab2c25b8610c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09ac84feaf5fee4c0fbcd1ff2ecb851f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a09ac84feaf5fee4c0fbcd1ff2ecb851f"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a09ac84feaf5fee4c0fbcd1ff2ecb851f">getSumCol</a> (T **pptMat, int iColIdx, int iNumRows, <a class="el" href="a00284.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAbs=<a class="el" href="a00284.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:a09ac84feaf5fee4c0fbcd1ff2ecb851f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52d194711681172569d1b796495a224c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a52d194711681172569d1b796495a224c"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a52d194711681172569d1b796495a224c">calcKlDivergence</a> (const T *const *const pptSrc1, const T *const *const pptSrc2, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a52d194711681172569d1b796495a224c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7e18a1023136caf74eb42461bfc3513"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af7e18a1023136caf74eb42461bfc3513"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#af7e18a1023136caf74eb42461bfc3513">add_I</a> (T **pptSrcDest, const T *const *const pptSrc, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:af7e18a1023136caf74eb42461bfc3513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0db7af262c6f0cf07d5f478d9e3297e6"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0db7af262c6f0cf07d5f478d9e3297e6"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a0db7af262c6f0cf07d5f478d9e3297e6">addC_I</a> (T **pptMat, T tAdd, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a0db7af262c6f0cf07d5f478d9e3297e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88a70757c98b45987bb023fae3d8b27e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a88a70757c98b45987bb023fae3d8b27e"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a88a70757c98b45987bb023fae3d8b27e">div_I</a> (T **pptSrcDest, const T *const *const pptSrc, int iNumRows, int iNumCols, <a class="el" href="a00284.xhtml#abb452686968e48b67397da5f97445f5b">bool</a> bAddSmallConst=<a class="el" href="a00284.xhtml#a65e9886d74aaee76545e83dd09011727">false</a>)</td></tr>
<tr class="separator:a88a70757c98b45987bb023fae3d8b27e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabc5b346338600b0c0dec797abe2b89f"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aabc5b346338600b0c0dec797abe2b89f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#aabc5b346338600b0c0dec797abe2b89f">mul_I</a> (T **pptSrcDest, const T *const *const pptSrc, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:aabc5b346338600b0c0dec797abe2b89f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b68b5ae672826ed8c8e3b014e09769"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a49b68b5ae672826ed8c8e3b014e09769"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a49b68b5ae672826ed8c8e3b014e09769">mulC_I</a> (T **pptMat, T tScale, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a49b68b5ae672826ed8c8e3b014e09769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfec629a6491fb8c082b566325716224"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acfec629a6491fb8c082b566325716224"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#acfec629a6491fb8c082b566325716224">mulColC_I</a> (T **pptMat, T fValue, int iCol, int iNumRows)</td></tr>
<tr class="separator:acfec629a6491fb8c082b566325716224"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfa52b112830fff980c9a7aa860c7d4e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acfa52b112830fff980c9a7aa860c7d4e"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#acfa52b112830fff980c9a7aa860c7d4e">mulColvecRowvec</a> (T **pptDestMat, const T *ptSrcColVec, const T *ptSrcRowVec, int iNumMatRows, int iNumMatCols)</td></tr>
<tr class="separator:acfa52b112830fff980c9a7aa860c7d4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05a5555eb9e7b63c5534cee3f525a03c"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a05a5555eb9e7b63c5534cee3f525a03c"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a05a5555eb9e7b63c5534cee3f525a03c">mulMatColvec</a> (T *ptDestColVec, const T *const *const pptMat, const T *ptSrcColVec, int iNumMatRows, int iNumMatCols)</td></tr>
<tr class="separator:a05a5555eb9e7b63c5534cee3f525a03c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba558090ffee6e3a28aee7e38726754"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:acba558090ffee6e3a28aee7e38726754"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#acba558090ffee6e3a28aee7e38726754">mulMatMat</a> (T **pptDest, const T *const *const pptSrc1, const T *const *const pptSrc2, int iNum1Rows, int iNum1Cols, int iNum2Rows, int iNum2Cols)</td></tr>
<tr class="separator:acba558090ffee6e3a28aee7e38726754"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa3d7d314cf2f43c7dc83f2d0b86ed68"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:afa3d7d314cf2f43c7dc83f2d0b86ed68"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#afa3d7d314cf2f43c7dc83f2d0b86ed68">mulRowvecMat</a> (T *ptDestRowVec, const T *ptSrcRowVec, const T *const *const pptMat, int iNumMatRows, int iNumMatCols)</td></tr>
<tr class="separator:afa3d7d314cf2f43c7dc83f2d0b86ed68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b0e4b2f907d07d41fcd0e0301b8d8ff"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0b0e4b2f907d07d41fcd0e0301b8d8ff"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a0b0e4b2f907d07d41fcd0e0301b8d8ff">sub_I</a> (T **pptSrcDest, const T *const *const pptSrc, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a0b0e4b2f907d07d41fcd0e0301b8d8ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94f8dc8ac650eac777b33257a8ee1207"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a94f8dc8ac650eac777b33257a8ee1207"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a94f8dc8ac650eac777b33257a8ee1207">det</a> (const T *const *const pptMat, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a94f8dc8ac650eac777b33257a8ee1207"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37585f57926ea2921734907bacc6cce8"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a37585f57926ea2921734907bacc6cce8"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a37585f57926ea2921734907bacc6cce8">inv_I</a> (T **pptSrcDest, int iNumRows, int iNumCols)</td></tr>
<tr class="separator:a37585f57926ea2921734907bacc6cce8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38a45a276935ba2a5566c67c8b6edd0e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a38a45a276935ba2a5566c67c8b6edd0e"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a38a45a276935ba2a5566c67c8b6edd0e">rearrangeRows</a> (T **pptSrcDest, int *piRowIndices, int iNumRows)</td></tr>
<tr class="separator:a38a45a276935ba2a5566c67c8b6edd0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a559a4308e4b77c24a8544d4e26efe1e9"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a559a4308e4b77c24a8544d4e26efe1e9"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a559a4308e4b77c24a8544d4e26efe1e9">swapRowCol</a> (T **pptSrcDest, int iRowIdx, int iColIdx, int iNumCols)</td></tr>
<tr class="separator:a559a4308e4b77c24a8544d4e26efe1e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b496f71fd36ee5afe60619df6cd657a"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8b496f71fd36ee5afe60619df6cd657a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="a00486.xhtml#a8b496f71fd36ee5afe60619df6cd657a">transpose</a> (T **pptDest, const T *const *const pptSrc, int iNumSrcRows, int iNumSrcCols)</td></tr>
<tr class="separator:a8b496f71fd36ee5afe60619df6cd657a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p >class with static functions for matrix operations, works with both float and double (functionality only added when needed) </p>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00011">11</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="af7e18a1023136caf74eb42461bfc3513" name="af7e18a1023136caf74eb42461bfc3513"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7e18a1023136caf74eb42461bfc3513">&#9670;&nbsp;</a></span>add_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::add_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise addition of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00408">408</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  409</span>    {</div>
<div class="line"><span class="lineno">  410</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  411</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  412</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  413</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  414</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  415</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  416</span> </div>
<div class="line"><span class="lineno">  417</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  418</span>        {</div>
<div class="line"><span class="lineno">  419</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  420</span>                pptSrcDest[m][n] += pptSrc[m][n];</div>
<div class="line"><span class="lineno">  421</span>        }</div>
<div class="line"><span class="lineno">  422</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00050_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_af7e18a1023136caf74eb42461bfc3513_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a0db7af262c6f0cf07d5f478d9e3297e6" name="a0db7af262c6f0cf07d5f478d9e3297e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0db7af262c6f0cf07d5f478d9e3297e6">&#9670;&nbsp;</a></span>addC_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::addC_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tAdd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >adds a single value to all matrix elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix to analyze </td></tr>
    <tr><td class="paramname">tAdd</td><td>scaling factor to apply </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00431">431</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  432</span>    {</div>
<div class="line"><span class="lineno">  433</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  434</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  435</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  436</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  437</span> </div>
<div class="line"><span class="lineno">  438</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  439</span>            <a class="code hl_function" href="a00502.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a>(pptMat[m], tAdd, iNumCols);</div>
<div class="line"><span class="lineno">  440</span>    }</div>
<div class="ttc" id="aa00502_xhtml_a22ff86e4fc2f8d5042159d9c84a7ff14"><div class="ttname"><a href="a00502.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a></div><div class="ttdeci">static void addC_I(T *ptSrcDest, T fConst, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00163">Vector.h:163</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00163">CVector::addC_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00044_source.xhtml#l00419">CChordIf::initViterbi_()</a>, and <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a0db7af262c6f0cf07d5f478d9e3297e6_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a0db7af262c6f0cf07d5f478d9e3297e6_icgraph.svg" width="100%" height="388"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a6501b78d76c912d49eee88c8f7242923" name="a6501b78d76c912d49eee88c8f7242923"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6501b78d76c912d49eee88c8f7242923">&#9670;&nbsp;</a></span>alloc()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::alloc </td>
          <td>(</td>
          <td class="paramtype">T **&amp;&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >allocates a matrix and inits it with zeros </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>(empty double pointer, to be allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00023">23</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   24</span>    {</div>
<div class="line"><span class="lineno">   25</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   26</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">   27</span> </div>
<div class="line"><span class="lineno">   28</span>        <a class="code hl_function" href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(pptMat, iNumRows);</div>
<div class="line"><span class="lineno">   29</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">   30</span> </div>
<div class="line"><span class="lineno">   31</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   32</span>            <a class="code hl_function" href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">   33</span>    }</div>
<div class="ttc" id="aa00502_xhtml_abaadac98b1cad18b7b568852bc951696"><div class="ttname"><a href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a></div><div class="ttdeci">static void alloc(T *&amp;ptVec, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00025">Vector.h:25</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00025">CVector::alloc()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00038_source.xhtml#l00507">CFeatureSpectralMfccs::allocDctMat_()</a>, <a class="el" href="a00104_source.xhtml#l00016">CBlockAudioFile::CBlockAudioFile()</a>, <a class="el" href="a00071_source.xhtml#l00054">CChordFromBlockIf::CChordFromBlockIf()</a>, <a class="el" href="a00038_source.xhtml#l00379">CFeatureSpectralMfccs::CFeatureSpectralMfccs()</a>, <a class="el" href="a00038_source.xhtml#l00533">CFeatureSpectralPitchChroma::CFeatureSpectralPitchChroma()</a>, <a class="el" href="a00050_source.xhtml#l00243">CGmmResult::CGmmResult()</a>, <a class="el" href="a00236_source.xhtml#l00049">CNormalizeAudio::CNormalizeAudio()</a>, <a class="el" href="a00062_source.xhtml#l00082">CKey::compKey()</a>, <a class="el" href="a00077_source.xhtml#l00225">CPitchTimeAuditory::CPitchTimeAuditory()</a>, <a class="el" href="a00074_source.xhtml#l00011">CSubFingerprint::CSubFingerprint()</a>, <a class="el" href="a00143_source.xhtml#l00659">det()</a>, <a class="el" href="a00095_source.xhtml#l00380">CSpectrogramIf::generateMelFb_()</a>, <a class="el" href="a00050_source.xhtml#l00011">CGmm::init()</a>, <a class="el" href="a00116_source.xhtml#l00019">CNmf::init()</a>, <a class="el" href="a00083_source.xhtml#l00017">CViterbi::init()</a>, <a class="el" href="a00089_source.xhtml#l00025">CFingerprint::init()</a>, <a class="el" href="a00050_source.xhtml#l00301">CGmmResult::init()</a>, <a class="el" href="a00065_source.xhtml#l00014">CKmeans::init()</a>, <a class="el" href="a00068_source.xhtml#l00009">CPca::init()</a>, <a class="el" href="a00101_source.xhtml#l00011">CSeqFeatureSel::init()</a>, <a class="el" href="a00110_source.xhtml#l00015">CKnn::init()</a>, <a class="el" href="a00125_source.xhtml#l00010">CLeaveOneOutCrossVal::init()</a>, <a class="el" href="a00056_source.xhtml#l00028">CDtw::init()</a>, <a class="el" href="a00116_source.xhtml#l00181">CNmfResult::init()</a>, <a class="el" href="a00044_source.xhtml#l00400">CChordIf::init_()</a>, <a class="el" href="a00044_source.xhtml#l00419">CChordIf::initViterbi_()</a>, <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>, <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>, and <a class="el" href="a00047_source.xhtml#l00032">CGmmClassifier::train()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a6501b78d76c912d49eee88c8f7242923_cgraph.svg" width="427" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a6501b78d76c912d49eee88c8f7242923_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a52d194711681172569d1b796495a224c" name="a52d194711681172569d1b796495a224c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52d194711681172569d1b796495a224c">&#9670;&nbsp;</a></span>calcKlDivergence()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::calcKlDivergence </td>
          <td>(</td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >comnputes kl divergence between two matrices </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrc1</td><td>matrix of dimension iNumRows x iNumCols </td></tr>
    <tr><td class="paramname">pptSrc2</td><td>matrix of dimension iNumRows x iNumCols </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>kld </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00379">379</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  380</span>    {</div>
<div class="line"><span class="lineno">  381</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  382</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  383</span>        assert(pptSrc1);</div>
<div class="line"><span class="lineno">  384</span>        assert(pptSrc1[0]);</div>
<div class="line"><span class="lineno">  385</span>        assert(pptSrc2);</div>
<div class="line"><span class="lineno">  386</span>        assert(pptSrc2[0]);</div>
<div class="line"><span class="lineno">  387</span> </div>
<div class="line"><span class="lineno">  388</span>        T tResult = 0;</div>
<div class="line"><span class="lineno">  389</span> </div>
<div class="line"><span class="lineno">  390</span>        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; iNumRows; i++)</div>
<div class="line"><span class="lineno">  391</span>        {</div>
<div class="line"><span class="lineno">  392</span>            <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 0; j &lt; iNumCols; j++)</div>
<div class="line"><span class="lineno">  393</span>                tResult += pptSrc1[i][j] * (std::log((pptSrc1[i][j] + 1e-24F) / (pptSrc2[i][j] + 1e-24F)) - 1.F) + pptSrc2[i][j];</div>
<div class="line"><span class="lineno">  394</span>        }</div>
<div class="line"><span class="lineno">  395</span> </div>
<div class="line"><span class="lineno">  396</span>        <span class="keywordflow">return</span> tResult;</div>
<div class="line"><span class="lineno">  397</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a52d194711681172569d1b796495a224c_icgraph.svg" width="523" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aa633cf46c2b3938a1a7a8199c31051dd" name="aa633cf46c2b3938a1a7a8199c31051dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa633cf46c2b3938a1a7a8199c31051dd">&#9670;&nbsp;</a></span>copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::copy </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrcMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >copies matrix content to another matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>(destination matrix, user allocated) </td></tr>
    <tr><td class="paramname">pptSrcMat</td><td>(source matrix) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00042">42</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   43</span>    {</div>
<div class="line"><span class="lineno">   44</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">   45</span>        assert(pptSrcMat);</div>
<div class="line"><span class="lineno">   46</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   47</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">   48</span> </div>
<div class="line"><span class="lineno">   49</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   50</span>            <a class="code hl_function" href="a00502.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a>(pptDestMat[m], pptSrcMat[m], iNumCols);</div>
<div class="line"><span class="lineno">   51</span>    }</div>
<div class="ttc" id="aa00502_xhtml_ad7c5cba73e439adac77778f61c9418f0"><div class="ttname"><a href="a00502.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a></div><div class="ttdeci">static void copy(T *ptDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00041">Vector.h:41</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00041">CVector::copy()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00100">CPca::calcSVD()</a>, <a class="el" href="a00050_source.xhtml#l00243">CGmmResult::CGmmResult()</a>, <a class="el" href="a00065_source.xhtml#l00054">CKmeans::compKmeans()</a>, <a class="el" href="a00143_source.xhtml#l00659">det()</a>, <a class="el" href="a00116_source.xhtml#l00240">CNmfResult::getMat()</a>, <a class="el" href="a00050_source.xhtml#l00290">CGmmResult::getSigma()</a>, <a class="el" href="a00083_source.xhtml#l00017">CViterbi::init()</a>, <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>, <a class="el" href="a00050_source.xhtml#l00205">CGmmResult::operator=()</a>, <a class="el" href="a00125_source.xhtml#l00061">CLeaveOneOutCrossVal::process()</a>, <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>, and <a class="el" href="a00050_source.xhtml#l00361">CGmmResult::setSigma()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_aa633cf46c2b3938a1a7a8199c31051dd_cgraph.svg" width="260" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_aa633cf46c2b3938a1a7a8199c31051dd_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a94f8dc8ac650eac777b33257a8ee1207" name="a94f8dc8ac650eac777b33257a8ee1207"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94f8dc8ac650eac777b33257a8ee1207">&#9670;&nbsp;</a></span>det()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::det </td>
          <td>(</td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00659">659</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  660</span>    {</div>
<div class="line"><span class="lineno">  661</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  662</span>        assert(iNumRows == iNumCols);</div>
<div class="line"><span class="lineno">  663</span> </div>
<div class="line"><span class="lineno">  664</span>        <span class="keyword">const</span> T kSingularityThresh = 1e-15F;</div>
<div class="line"><span class="lineno">  665</span>        T **pptTmp = 0;</div>
<div class="line"><span class="lineno">  666</span>        <span class="keywordtype">double</span> dDet = 1;</div>
<div class="line"><span class="lineno">  667</span> </div>
<div class="line"><span class="lineno">  668</span> </div>
<div class="line"><span class="lineno">  669</span>        <span class="keywordflow">if</span> (iNumRows == 2)</div>
<div class="line"><span class="lineno">  670</span>            <span class="keywordflow">return</span> ((pptMat[0][0] * pptMat[1][1]) - (pptMat[0][1] * pptMat[1][0]));</div>
<div class="line"><span class="lineno">  671</span> </div>
<div class="line"><span class="lineno">  672</span>        <a class="code hl_function" href="a00486.xhtml#a6501b78d76c912d49eee88c8f7242923">CMatrix::alloc</a>(pptTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  673</span>        <a class="code hl_function" href="a00486.xhtml#aa633cf46c2b3938a1a7a8199c31051dd">CMatrix::copy</a>(pptTmp, pptMat, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  674</span> </div>
<div class="line"><span class="lineno">  675</span>        <span class="keywordflow">if</span> (pptTmp[0][0] == 0)</div>
<div class="line"><span class="lineno">  676</span>        {</div>
<div class="line"><span class="lineno">  677</span>            <span class="keyword">auto</span> i = 1;</div>
<div class="line"><span class="lineno">  678</span>            <span class="keywordflow">while</span> (i &lt; iNumRows)</div>
<div class="line"><span class="lineno">  679</span>            {</div>
<div class="line"><span class="lineno">  680</span>                <span class="keywordflow">if</span> (pptTmp[i][0] != 0)</div>
<div class="line"><span class="lineno">  681</span>                {</div>
<div class="line"><span class="lineno">  682</span>                    <a class="code hl_function" href="a00486.xhtml#a559a4308e4b77c24a8544d4e26efe1e9">swapRowCol</a>(pptTmp, 0, i, iNumCols);</div>
<div class="line"><span class="lineno">  683</span>                    dDet *= -1;</div>
<div class="line"><span class="lineno">  684</span>                    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  685</span>                }</div>
<div class="line"><span class="lineno">  686</span>                i++;</div>
<div class="line"><span class="lineno">  687</span>            }</div>
<div class="line"><span class="lineno">  688</span>        }</div>
<div class="line"><span class="lineno">  689</span> </div>
<div class="line"><span class="lineno">  690</span>        <span class="keywordflow">if</span> (pptTmp[0][0] == 0)</div>
<div class="line"><span class="lineno">  691</span>        {</div>
<div class="line"><span class="lineno">  692</span>            <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  693</span>            <span class="keywordflow">return</span> 0;</div>
<div class="line"><span class="lineno">  694</span>        }</div>
<div class="line"><span class="lineno">  695</span> </div>
<div class="line"><span class="lineno">  696</span>        dDet *= pptTmp[0][0];</div>
<div class="line"><span class="lineno">  697</span> </div>
<div class="line"><span class="lineno">  698</span>        <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptTmp[0], 1.F / pptTmp[0][0], iNumCols);</div>
<div class="line"><span class="lineno">  699</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 1; i &lt; iNumRows; i++)</div>
<div class="line"><span class="lineno">  700</span>        {</div>
<div class="line"><span class="lineno">  701</span>            <span class="keyword">auto</span> j = 0;</div>
<div class="line"><span class="lineno">  702</span> </div>
<div class="line"><span class="lineno">  703</span>            <span class="keywordflow">if</span> (std::abs(dDet) &lt; kSingularityThresh * 1. * kSingularityThresh)</div>
<div class="line"><span class="lineno">  704</span>                dDet = 0;</div>
<div class="line"><span class="lineno">  705</span> </div>
<div class="line"><span class="lineno">  706</span>            <span class="keywordflow">while</span> (j &lt; i)</div>
<div class="line"><span class="lineno">  707</span>            {</div>
<div class="line"><span class="lineno">  708</span>                <a class="code hl_function" href="a00502.xhtml#a2239b170d46ed3d0846d766a0634a0be">CVector::addW_I</a>(pptTmp[i], pptTmp[j], -pptTmp[i][j], iNumCols);</div>
<div class="line"><span class="lineno">  709</span>                j++;</div>
<div class="line"><span class="lineno">  710</span>            }</div>
<div class="line"><span class="lineno">  711</span> </div>
<div class="line"><span class="lineno">  712</span>            <span class="keywordflow">if</span> (pptTmp[i][i] != 0)</div>
<div class="line"><span class="lineno">  713</span>            {</div>
<div class="line"><span class="lineno">  714</span>                dDet *= pptTmp[i][i];</div>
<div class="line"><span class="lineno">  715</span>                <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptTmp[i], 1.F / pptTmp[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  716</span>            }</div>
<div class="line"><span class="lineno">  717</span> </div>
<div class="line"><span class="lineno">  718</span>            <span class="keywordflow">if</span> (pptTmp[i][i] == 0)</div>
<div class="line"><span class="lineno">  719</span>            {</div>
<div class="line"><span class="lineno">  720</span>                <span class="keywordflow">for</span> (j = i + 1; j &lt; iNumCols; j++)</div>
<div class="line"><span class="lineno">  721</span>                {</div>
<div class="line"><span class="lineno">  722</span>                    <span class="keywordflow">if</span> (pptTmp[i][j] != 0)</div>
<div class="line"><span class="lineno">  723</span>                    {</div>
<div class="line"><span class="lineno">  724</span>                        <a class="code hl_function" href="a00502.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">CVector::add_I</a>(pptTmp[i], pptTmp[j], iNumCols);</div>
<div class="line"><span class="lineno">  725</span> </div>
<div class="line"><span class="lineno">  726</span>                        dDet *= pptTmp[i][i];</div>
<div class="line"><span class="lineno">  727</span>                        <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptTmp[i], 1.F / pptTmp[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  728</span>                        <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  729</span>                    }</div>
<div class="line"><span class="lineno">  730</span>                }</div>
<div class="line"><span class="lineno">  731</span>            }</div>
<div class="line"><span class="lineno">  732</span> </div>
<div class="line"><span class="lineno">  733</span>            <span class="keywordflow">if</span> (pptTmp[i][i] == 0)</div>
<div class="line"><span class="lineno">  734</span>            {</div>
<div class="line"><span class="lineno">  735</span>                <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  736</span>                <span class="keywordflow">return</span> 0;</div>
<div class="line"><span class="lineno">  737</span>            }</div>
<div class="line"><span class="lineno">  738</span>        }</div>
<div class="line"><span class="lineno">  739</span> </div>
<div class="line"><span class="lineno">  740</span>        <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  741</span> </div>
<div class="line"><span class="lineno">  742</span>        <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(dDet);</div>
<div class="line"><span class="lineno">  743</span>    }</div>
<div class="ttc" id="aa00486_xhtml_a559a4308e4b77c24a8544d4e26efe1e9"><div class="ttname"><a href="a00486.xhtml#a559a4308e4b77c24a8544d4e26efe1e9">CMatrix::swapRowCol</a></div><div class="ttdeci">static void swapRowCol(T **pptSrcDest, int iRowIdx, int iColIdx, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00143_source.xhtml#l00883">Matrix.h:883</a></div></div>
<div class="ttc" id="aa00486_xhtml_a591097c6b1935c4d6273b3445f8f552b"><div class="ttname"><a href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a></div><div class="ttdeci">static void free(T **&amp;pptMat, int iNumRows)</div><div class="ttdef"><b>Definition:</b> <a href="a00143_source.xhtml#l00058">Matrix.h:58</a></div></div>
<div class="ttc" id="aa00486_xhtml_a6501b78d76c912d49eee88c8f7242923"><div class="ttname"><a href="a00486.xhtml#a6501b78d76c912d49eee88c8f7242923">CMatrix::alloc</a></div><div class="ttdeci">static void alloc(T **&amp;pptMat, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00143_source.xhtml#l00023">Matrix.h:23</a></div></div>
<div class="ttc" id="aa00486_xhtml_aa633cf46c2b3938a1a7a8199c31051dd"><div class="ttname"><a href="a00486.xhtml#aa633cf46c2b3938a1a7a8199c31051dd">CMatrix::copy</a></div><div class="ttdeci">static void copy(T **pptDestMat, const T *const *const pptSrcMat, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00143_source.xhtml#l00042">Matrix.h:42</a></div></div>
<div class="ttc" id="aa00502_xhtml_a2239b170d46ed3d0846d766a0634a0be"><div class="ttname"><a href="a00502.xhtml#a2239b170d46ed3d0846d766a0634a0be">CVector::addW_I</a></div><div class="ttdeci">static void addW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00179">Vector.h:179</a></div></div>
<div class="ttc" id="aa00502_xhtml_a3a052b83e62e5c5cc44829c64ffe42eb"><div class="ttname"><a href="a00502.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">CVector::add_I</a></div><div class="ttdeci">static void add_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00147">Vector.h:147</a></div></div>
<div class="ttc" id="aa00502_xhtml_a9811f50434dd058d201290b2dc98bfcd"><div class="ttname"><a href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a></div><div class="ttdeci">static void mulC_I(T *ptSrcDest, T fScale, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00214">Vector.h:214</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00147">CVector::add_I()</a>, <a class="el" href="a00155_source.xhtml#l00179">CVector::addW_I()</a>, <a class="el" href="a00143_source.xhtml#l00023">alloc()</a>, <a class="el" href="a00143_source.xhtml#l00042">copy()</a>, <a class="el" href="a00143_source.xhtml#l00058">free()</a>, <a class="el" href="a00155_source.xhtml#l00214">CVector::mulC_I()</a>, and <a class="el" href="a00143_source.xhtml#l00883">swapRowCol()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00050_source.xhtml#l00117">CGmm::compProbabilities_()</a>, and <a class="el" href="a00050_source.xhtml#l00222">CGmmResult::getProb()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a94f8dc8ac650eac777b33257a8ee1207_cgraph.svg" width="615" height="342"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a94f8dc8ac650eac777b33257a8ee1207_icgraph.svg" width="100%" height="366"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a88a70757c98b45987bb023fae3d8b27e" name="a88a70757c98b45987bb023fae3d8b27e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88a70757c98b45987bb023fae3d8b27e">&#9670;&nbsp;</a></span>div_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::div_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00284.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td>
          <td class="paramname"><em>bAddSmallConst</em> = <code><a class="el" href="a00284.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise division of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
    <tr><td class="paramname">bAddSmallConst</td><td>a small floating point number is added before division if true </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00450">450</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  451</span>    {</div>
<div class="line"><span class="lineno">  452</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  453</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  454</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  455</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  456</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  457</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  458</span> </div>
<div class="line"><span class="lineno">  459</span>        T fEpsilon = bAddSmallConst ? 1e-30F : .0F;</div>
<div class="line"><span class="lineno">  460</span> </div>
<div class="line"><span class="lineno">  461</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  462</span>        {</div>
<div class="line"><span class="lineno">  463</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  464</span>                pptSrcDest[m][n] /= (pptSrc[m][n] + fEpsilon);</div>
<div class="line"><span class="lineno">  465</span>        }</div>
<div class="line"><span class="lineno">  466</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a88a70757c98b45987bb023fae3d8b27e_icgraph.svg" width="450" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a591097c6b1935c4d6273b3445f8f552b" name="a591097c6b1935c4d6273b3445f8f552b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a591097c6b1935c4d6273b3445f8f552b">&#9670;&nbsp;</a></span>free()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::free </td>
          <td>(</td>
          <td class="paramtype">T **&amp;&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >frees a matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>(empty double pointer, to be set to zero) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00058">58</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   59</span>    {</div>
<div class="line"><span class="lineno">   60</span>        <span class="keywordflow">if</span> (!pptMat) <span class="keywordflow">return</span>;</div>
<div class="line"><span class="lineno">   61</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   62</span> </div>
<div class="line"><span class="lineno">   63</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   64</span>            <a class="code hl_function" href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(pptMat[m]);</div>
<div class="line"><span class="lineno">   65</span> </div>
<div class="line"><span class="lineno">   66</span>        <a class="code hl_function" href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(pptMat);</div>
<div class="line"><span class="lineno">   67</span>        pptMat = 0;</div>
<div class="line"><span class="lineno">   68</span>    }</div>
<div class="ttc" id="aa00502_xhtml_aa86bdb0c663d4d52f2765793756f8737"><div class="ttname"><a href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a></div><div class="ttdeci">static void free(T *&amp;ptVec)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00057">Vector.h:57</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00057">CVector::free()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00236_source.xhtml#l00049">CNormalizeAudio::CNormalizeAudio()</a>, <a class="el" href="a00062_source.xhtml#l00082">CKey::compKey()</a>, <a class="el" href="a00038_source.xhtml#l00514">CFeatureSpectralMfccs::deleteDctMat_()</a>, <a class="el" href="a00095_source.xhtml#l00233">CSpectrogramIf::destroyMelFb_()</a>, <a class="el" href="a00143_source.xhtml#l00659">det()</a>, <a class="el" href="a00089_source.xhtml#l00025">CFingerprint::init()</a>, <a class="el" href="a00044_source.xhtml#l00419">CChordIf::initViterbi_()</a>, <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>, <a class="el" href="a00050_source.xhtml#l00325">CGmmResult::reset()</a>, <a class="el" href="a00050_source.xhtml#l00042">CGmm::reset()</a>, <a class="el" href="a00125_source.xhtml#l00045">CLeaveOneOutCrossVal::reset()</a>, <a class="el" href="a00116_source.xhtml#l00210">CNmfResult::reset()</a>, <a class="el" href="a00116_source.xhtml#l00044">CNmf::reset()</a>, <a class="el" href="a00068_source.xhtml#l00027">CPca::reset()</a>, <a class="el" href="a00101_source.xhtml#l00119">CSeqFeatureSel::reset()</a>, <a class="el" href="a00056_source.xhtml#l00050">CDtw::reset()</a>, <a class="el" href="a00065_source.xhtml#l00036">CKmeans::reset()</a>, <a class="el" href="a00083_source.xhtml#l00050">CViterbi::reset()</a>, <a class="el" href="a00110_source.xhtml#l00044">CKnn::reset()</a>, <a class="el" href="a00044_source.xhtml#l00372">CChordIf::reset_()</a>, <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>, <a class="el" href="a00047_source.xhtml#l00032">CGmmClassifier::train()</a>, <a class="el" href="a00104_source.xhtml#l00044">CBlockAudioFile::~CBlockAudioFile()</a>, <a class="el" href="a00071_source.xhtml#l00064">CChordFromBlockIf::~CChordFromBlockIf()</a>, <a class="el" href="a00038_source.xhtml#l00393">CFeatureSpectralMfccs::~CFeatureSpectralMfccs()</a>, <a class="el" href="a00038_source.xhtml#l00541">CFeatureSpectralPitchChroma::~CFeatureSpectralPitchChroma()</a>, <a class="el" href="a00077_source.xhtml#l00248">CPitchTimeAuditory::~CPitchTimeAuditory()</a>, and <a class="el" href="a00074_source.xhtml#l00027">CSubFingerprint::~CSubFingerprint()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a591097c6b1935c4d6273b3445f8f552b_cgraph.svg" width="251" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a591097c6b1935c4d6273b3445f8f552b_icgraph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a7731601374cc56417cf2d9d223b40a67" name="a7731601374cc56417cf2d9d223b40a67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7731601374cc56417cf2d9d223b40a67">&#9670;&nbsp;</a></span>getCol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::getCol </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >returns a column as vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>resulting vector of dimension iNumRows (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iColIdx</td><td>index of column to retrieve </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00230">230</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  231</span>    {</div>
<div class="line"><span class="lineno">  232</span>        assert(iColIdx &gt;= 0);</div>
<div class="line"><span class="lineno">  233</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  234</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  235</span>        assert(ptDest);</div>
<div class="line"><span class="lineno">  236</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  237</span> </div>
<div class="line"><span class="lineno">  238</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  239</span>            ptDest[m] = pptMat[m][iColIdx];</div>
<div class="line"><span class="lineno">  240</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00065_source.xhtml#l00162">CKmeans::assignClusterLabels_()</a>, <a class="el" href="a00125_source.xhtml#l00061">CLeaveOneOutCrossVal::process()</a>, and <a class="el" href="a00047_source.xhtml#l00032">CGmmClassifier::train()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a7731601374cc56417cf2d9d223b40a67_icgraph.svg" width="596" height="155"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a62486a220c071d7e4ae970d9f1dc1093" name="a62486a220c071d7e4ae970d9f1dc1093"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62486a220c071d7e4ae970d9f1dc1093">&#9670;&nbsp;</a></span>getDiag()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::getDiag </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >returns matrix diagonal as vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDest</td><td>resulting vector of dimension min(iNumSrcRows, iNumCols) (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptSrc</td><td>input matrix of dimension iNumSrcRows x iNumCols </td></tr>
    <tr><td class="paramname">iNumSrcRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumSrcCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00249">249</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  250</span>    {</div>
<div class="line"><span class="lineno">  251</span>        assert(iNumSrcRows &gt; 0);</div>
<div class="line"><span class="lineno">  252</span>        assert(iNumSrcCols &gt; 0);</div>
<div class="line"><span class="lineno">  253</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  254</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  255</span>        assert(ptDest);</div>
<div class="line"><span class="lineno">  256</span> </div>
<div class="line"><span class="lineno">  257</span>        <span class="keywordtype">int</span> iLen = std::min(iNumSrcRows, iNumSrcCols);</div>
<div class="line"><span class="lineno">  258</span> </div>
<div class="line"><span class="lineno">  259</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iLen; m++)</div>
<div class="line"><span class="lineno">  260</span>            ptDest[m] = pptSrc[m][m];</div>
<div class="line"><span class="lineno">  261</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00039">CPca::compPca()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a62486a220c071d7e4ae970d9f1dc1093_icgraph.svg" width="290" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="aac9eff035a753b3ecb357d4c24637b8b" name="aac9eff035a753b3ecb357d4c24637b8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac9eff035a753b3ecb357d4c24637b8b">&#9670;&nbsp;</a></span>getMax()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::getMax </td>
          <td>(</td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >return maximum value in a matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix to analyze </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>max </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00270">270</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  271</span>    {</div>
<div class="line"><span class="lineno">  272</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  273</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  274</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  275</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  276</span> </div>
<div class="line"><span class="lineno">  277</span>        T fGlobalMax = <a class="code hl_function" href="a00502.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a>(pptMat[0], iNumCols);</div>
<div class="line"><span class="lineno">  278</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 1; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  279</span>        {</div>
<div class="line"><span class="lineno">  280</span>            T fMax = <a class="code hl_function" href="a00502.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">  281</span>            <span class="keywordflow">if</span> (fMax &gt; fGlobalMax)</div>
<div class="line"><span class="lineno">  282</span>                fGlobalMax = fMax;</div>
<div class="line"><span class="lineno">  283</span>        }</div>
<div class="line"><span class="lineno">  284</span>        <span class="keywordflow">return</span> fGlobalMax;</div>
<div class="line"><span class="lineno">  285</span>    }</div>
<div class="ttc" id="aa00502_xhtml_a9f5be871090bc5a64a7732cebfb4f8ec"><div class="ttname"><a href="a00502.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a></div><div class="ttdeci">static T getMax(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00444">Vector.h:444</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00444">CVector::getMax()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00044_source.xhtml#l00419">CChordIf::initViterbi_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_aac9eff035a753b3ecb357d4c24637b8b_cgraph.svg" width="458" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_aac9eff035a753b3ecb357d4c24637b8b_icgraph.svg" width="100%" height="378"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="af3b2088c77c6c79fabf823e50327c152" name="af3b2088c77c6c79fabf823e50327c152"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3b2088c77c6c79fabf823e50327c152">&#9670;&nbsp;</a></span>getNorm()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::getNorm </td>
          <td>(</td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >return the matrix norm (p=1) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>norm </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00294">294</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  295</span>    {</div>
<div class="line"><span class="lineno">  296</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  297</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  298</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  299</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  300</span> </div>
<div class="line"><span class="lineno">  301</span>        T tResult = 0;</div>
<div class="line"><span class="lineno">  302</span> </div>
<div class="line"><span class="lineno">  303</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  304</span>        {</div>
<div class="line"><span class="lineno">  305</span>            T tTmp = 0;</div>
<div class="line"><span class="lineno">  306</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  307</span>                tTmp += std::abs(pptMat[m][n]);</div>
<div class="line"><span class="lineno">  308</span> </div>
<div class="line"><span class="lineno">  309</span>            <span class="keywordflow">if</span> (tTmp &gt; tResult)</div>
<div class="line"><span class="lineno">  310</span>                tResult = tTmp;</div>
<div class="line"><span class="lineno">  311</span>        }</div>
<div class="line"><span class="lineno">  312</span> </div>
<div class="line"><span class="lineno">  313</span>        <span class="keywordflow">return</span> tResult;</div>
<div class="line"><span class="lineno">  314</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_af3b2088c77c6c79fabf823e50327c152_icgraph.svg" width="472" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ae48093975ee83a53abb7ab2c25b8610c" name="ae48093975ee83a53abb7ab2c25b8610c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae48093975ee83a53abb7ab2c25b8610c">&#9670;&nbsp;</a></span>getSum()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::getSum </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00284.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td>
          <td class="paramname"><em>bAbs</em> = <code><a class="el" href="a00284.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >adds all matrix elements </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
    <tr><td class="paramname">bAbs</td><td>flag to indicate whether to sum the absolute values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>sum </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00324">324</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  325</span>    {</div>
<div class="line"><span class="lineno">  326</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  327</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  328</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  329</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  330</span> </div>
<div class="line"><span class="lineno">  331</span>        T tResult = 0;</div>
<div class="line"><span class="lineno">  332</span> </div>
<div class="line"><span class="lineno">  333</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  334</span>            tResult += <a class="code hl_function" href="a00502.xhtml#abdbcc3898121387f3694f74491b7331e">CVector::getSum</a>(pptMat[m], iNumCols, bAbs);</div>
<div class="line"><span class="lineno">  335</span> </div>
<div class="line"><span class="lineno">  336</span>        <span class="keywordflow">return</span> tResult;</div>
<div class="line"><span class="lineno">  337</span>    }</div>
<div class="ttc" id="aa00502_xhtml_abdbcc3898121387f3694f74491b7331e"><div class="ttname"><a href="a00502.xhtml#abdbcc3898121387f3694f74491b7331e">CVector::getSum</a></div><div class="ttdeci">static T getSum(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00556">Vector.h:556</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00556">CVector::getSum()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_ae48093975ee83a53abb7ab2c25b8610c_cgraph.svg" width="296" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a09ac84feaf5fee4c0fbcd1ff2ecb851f" name="a09ac84feaf5fee4c0fbcd1ff2ecb851f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09ac84feaf5fee4c0fbcd1ff2ecb851f">&#9670;&nbsp;</a></span>getSumCol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T CMatrix::getSumCol </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="a00284.xhtml#abb452686968e48b67397da5f97445f5b">bool</a>&#160;</td>
          <td class="paramname"><em>bAbs</em> = <code><a class="el" href="a00284.xhtml#a65e9886d74aaee76545e83dd09011727">false</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >adds all elements in one columns </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>input matrix of dimension iNumRows x iNumCols </td></tr>
    <tr><td class="paramname">iColIdx</td><td>column of interest </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">bAbs</td><td>flag to indicate whether to sum the absolute values </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>sum </dd></dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00347">347</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  348</span>    {</div>
<div class="line"><span class="lineno">  349</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  350</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  351</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  352</span> </div>
<div class="line"><span class="lineno">  353</span>        T tResult = 0;</div>
<div class="line"><span class="lineno">  354</span> </div>
<div class="line"><span class="lineno">  355</span>        <span class="keywordflow">if</span> (bAbs)</div>
<div class="line"><span class="lineno">  356</span>        {</div>
<div class="line"><span class="lineno">  357</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  358</span>                tResult += std::abs(pptMat[m][iColIdx]);</div>
<div class="line"><span class="lineno">  359</span>        }</div>
<div class="line"><span class="lineno">  360</span>        <span class="keywordflow">else</span></div>
<div class="line"><span class="lineno">  361</span>        {</div>
<div class="line"><span class="lineno">  362</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  363</span>                tResult += pptMat[m][iColIdx];</div>
<div class="line"><span class="lineno">  364</span>        }</div>
<div class="line"><span class="lineno">  365</span> </div>
<div class="line"><span class="lineno">  366</span>        <span class="keywordflow">return</span> tResult;</div>
<div class="line"><span class="lineno">  367</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00050_source.xhtml#l00117">CGmm::compProbabilities_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a09ac84feaf5fee4c0fbcd1ff2ecb851f_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a37585f57926ea2921734907bacc6cce8" name="a37585f57926ea2921734907bacc6cce8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37585f57926ea2921734907bacc6cce8">&#9670;&nbsp;</a></span>inv_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::inv_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >computes inverse of square matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>input and output matrix (to be modified, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00751">751</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  752</span>    {</div>
<div class="line"><span class="lineno">  753</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  754</span>        assert(iNumRows == iNumCols);</div>
<div class="line"><span class="lineno">  755</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  756</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  757</span> </div>
<div class="line"><span class="lineno">  758</span>        <span class="keyword">const</span> T kSingularityThresh = 1e-15F;</div>
<div class="line"><span class="lineno">  759</span>        T **ppfTmp = 0;</div>
<div class="line"><span class="lineno">  760</span>        T **ppfEye = 0;</div>
<div class="line"><span class="lineno">  761</span>        <span class="keywordtype">int</span>    i, j;</div>
<div class="line"><span class="lineno">  762</span>        <span class="keywordtype">double</span> dDet = 1;</div>
<div class="line"><span class="lineno">  763</span> </div>
<div class="line"><span class="lineno">  764</span>        <a class="code hl_function" href="a00486.xhtml#a6501b78d76c912d49eee88c8f7242923">alloc</a>(ppfTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  765</span>        <a class="code hl_function" href="a00486.xhtml#aa633cf46c2b3938a1a7a8199c31051dd">copy</a>(ppfTmp, pptSrcDest, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  766</span> </div>
<div class="line"><span class="lineno">  767</span>        <a class="code hl_function" href="a00486.xhtml#a6501b78d76c912d49eee88c8f7242923">alloc</a>(ppfEye, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  768</span>        <a class="code hl_function" href="a00486.xhtml#a8f27c49fcbbdb52e2e9a50f2b22f59c3">setEye</a>(ppfEye, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  769</span> </div>
<div class="line"><span class="lineno">  770</span>        <span class="keywordflow">if</span> (pptSrcDest[0][0] == 0)</div>
<div class="line"><span class="lineno">  771</span>        {</div>
<div class="line"><span class="lineno">  772</span>            i = 1;</div>
<div class="line"><span class="lineno">  773</span>            <span class="keywordflow">while</span> (i &lt; iNumRows)</div>
<div class="line"><span class="lineno">  774</span>            {</div>
<div class="line"><span class="lineno">  775</span>                <span class="keywordflow">if</span> (pptSrcDest[i][0] != 0)</div>
<div class="line"><span class="lineno">  776</span>                {</div>
<div class="line"><span class="lineno">  777</span>                    <a class="code hl_function" href="a00486.xhtml#a559a4308e4b77c24a8544d4e26efe1e9">swapRowCol</a>(pptSrcDest, 0, i, iNumCols);</div>
<div class="line"><span class="lineno">  778</span>                    <a class="code hl_function" href="a00486.xhtml#a559a4308e4b77c24a8544d4e26efe1e9">swapRowCol</a>(ppfEye, 0, i, iNumCols);</div>
<div class="line"><span class="lineno">  779</span>                    dDet *= -1;</div>
<div class="line"><span class="lineno">  780</span>                    <span class="keywordflow">break</span>;</div>
<div class="line"><span class="lineno">  781</span>                }</div>
<div class="line"><span class="lineno">  782</span>                i++;</div>
<div class="line"><span class="lineno">  783</span>            }</div>
<div class="line"><span class="lineno">  784</span>        }</div>
<div class="line"><span class="lineno">  785</span> </div>
<div class="line"><span class="lineno">  786</span>        dDet *= pptSrcDest[0][0];</div>
<div class="line"><span class="lineno">  787</span> </div>
<div class="line"><span class="lineno">  788</span>        <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(ppfEye[0], 1.F / pptSrcDest[0][0], iNumCols);</div>
<div class="line"><span class="lineno">  789</span>        <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptSrcDest[0], 1.F / pptSrcDest[0][0], iNumCols);</div>
<div class="line"><span class="lineno">  790</span> </div>
<div class="line"><span class="lineno">  791</span>        <span class="keywordflow">for</span> (i = 1; i &lt; iNumRows; i++)</div>
<div class="line"><span class="lineno">  792</span>        {</div>
<div class="line"><span class="lineno">  793</span>            j = 0;</div>
<div class="line"><span class="lineno">  794</span> </div>
<div class="line"><span class="lineno">  795</span>            <span class="keywordflow">if</span> (std::abs(dDet) &lt; kSingularityThresh * 1. * kSingularityThresh)</div>
<div class="line"><span class="lineno">  796</span>                dDet = 0;</div>
<div class="line"><span class="lineno">  797</span> </div>
<div class="line"><span class="lineno">  798</span>            <span class="keywordflow">while</span> (j &lt; i)</div>
<div class="line"><span class="lineno">  799</span>            {</div>
<div class="line"><span class="lineno">  800</span>                <a class="code hl_function" href="a00502.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(ppfEye[i], ppfEye[j], pptSrcDest[i][j], iNumCols);</div>
<div class="line"><span class="lineno">  801</span>                <a class="code hl_function" href="a00502.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(pptSrcDest[i], pptSrcDest[j], pptSrcDest[i][j], iNumCols);</div>
<div class="line"><span class="lineno">  802</span>                j++;</div>
<div class="line"><span class="lineno">  803</span>            }</div>
<div class="line"><span class="lineno">  804</span> </div>
<div class="line"><span class="lineno">  805</span>            <span class="keywordflow">if</span> (pptSrcDest[i][i] != 0)</div>
<div class="line"><span class="lineno">  806</span>            {</div>
<div class="line"><span class="lineno">  807</span>                dDet *= pptSrcDest[i][i];</div>
<div class="line"><span class="lineno">  808</span>                <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(ppfEye[i], 1.F / pptSrcDest[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  809</span>                <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptSrcDest[i], 1.F / pptSrcDest[i][i], iNumCols);</div>
<div class="line"><span class="lineno">  810</span>            }</div>
<div class="line"><span class="lineno">  811</span> </div>
<div class="line"><span class="lineno">  812</span>            <span class="keywordflow">if</span> (pptSrcDest[i][i] == 0)</div>
<div class="line"><span class="lineno">  813</span>            {</div>
<div class="line"><span class="lineno">  814</span>                <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j1 = i + 1; j1 &lt; iNumCols; j1++)</div>
<div class="line"><span class="lineno">  815</span>                {</div>
<div class="line"><span class="lineno">  816</span>                    <span class="keywordflow">if</span> (pptSrcDest[i][j1] != 0) </div>
<div class="line"><span class="lineno">  817</span>                    {</div>
<div class="line"><span class="lineno">  818</span>                        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i1 = 0; i1 &lt; iNumRows; i1++)</div>
<div class="line"><span class="lineno">  819</span>                        {</div>
<div class="line"><span class="lineno">  820</span>                            <span class="keywordflow">for</span> (j = 0; j &lt; iNumCols; j++)</div>
<div class="line"><span class="lineno">  821</span>                                pptSrcDest[i1][j] = ppfTmp[i1][j];</div>
<div class="line"><span class="lineno">  822</span>                        }</div>
<div class="line"><span class="lineno">  823</span>                        <a class="code hl_function" href="a00486.xhtml#a37585f57926ea2921734907bacc6cce8">inv_I</a>(ppfTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  824</span>                        <a class="code hl_function" href="a00486.xhtml#aa633cf46c2b3938a1a7a8199c31051dd">copy</a>(pptSrcDest, ppfTmp, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  825</span> </div>
<div class="line"><span class="lineno">  826</span>                        <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfTmp, iNumRows);</div>
<div class="line"><span class="lineno">  827</span>                        <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfEye, iNumRows);</div>
<div class="line"><span class="lineno">  828</span>                        <span class="keywordflow">return</span>;</div>
<div class="line"><span class="lineno">  829</span>                    }</div>
<div class="line"><span class="lineno">  830</span>                }</div>
<div class="line"><span class="lineno">  831</span>            }</div>
<div class="line"><span class="lineno">  832</span>        }</div>
<div class="line"><span class="lineno">  833</span> </div>
<div class="line"><span class="lineno">  834</span>        <span class="keywordflow">for</span> (i = iNumRows - 1; i &gt; 0; i--)</div>
<div class="line"><span class="lineno">  835</span>        {</div>
<div class="line"><span class="lineno">  836</span>            <span class="keywordflow">for</span> (j = i - 1; j &gt;= 0; j--)</div>
<div class="line"><span class="lineno">  837</span>            {</div>
<div class="line"><span class="lineno">  838</span>                <a class="code hl_function" href="a00502.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(ppfEye[j], ppfEye[i], pptSrcDest[j][i], iNumCols);</div>
<div class="line"><span class="lineno">  839</span>                <a class="code hl_function" href="a00502.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a>(pptSrcDest[j], pptSrcDest[i], pptSrcDest[j][i], iNumCols);</div>
<div class="line"><span class="lineno">  840</span>            }</div>
<div class="line"><span class="lineno">  841</span>        }</div>
<div class="line"><span class="lineno">  842</span> </div>
<div class="line"><span class="lineno">  843</span>        <a class="code hl_function" href="a00486.xhtml#aa633cf46c2b3938a1a7a8199c31051dd">copy</a>(pptSrcDest, ppfEye, iNumRows, iNumCols);</div>
<div class="line"><span class="lineno">  844</span>        <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfTmp, iNumRows);</div>
<div class="line"><span class="lineno">  845</span>        <a class="code hl_function" href="a00486.xhtml#a591097c6b1935c4d6273b3445f8f552b">CMatrix::free</a>(ppfEye, iNumRows);</div>
<div class="line"><span class="lineno">  846</span>    }</div>
<div class="ttc" id="aa00486_xhtml_a37585f57926ea2921734907bacc6cce8"><div class="ttname"><a href="a00486.xhtml#a37585f57926ea2921734907bacc6cce8">CMatrix::inv_I</a></div><div class="ttdeci">static void inv_I(T **pptSrcDest, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00143_source.xhtml#l00751">Matrix.h:751</a></div></div>
<div class="ttc" id="aa00486_xhtml_a8f27c49fcbbdb52e2e9a50f2b22f59c3"><div class="ttname"><a href="a00486.xhtml#a8f27c49fcbbdb52e2e9a50f2b22f59c3">CMatrix::setEye</a></div><div class="ttdeci">static void setEye(T **pptDest, int iNumRows, int iNumCols)</div><div class="ttdef"><b>Definition:</b> <a href="a00143_source.xhtml#l00096">Matrix.h:96</a></div></div>
<div class="ttc" id="aa00502_xhtml_a4e5b5163bb46b8de5ac4013bde1ded00"><div class="ttname"><a href="a00502.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a></div><div class="ttdeci">static void subW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00282">Vector.h:282</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00143_source.xhtml#l00023">alloc()</a>, <a class="el" href="a00143_source.xhtml#l00042">copy()</a>, <a class="el" href="a00143_source.xhtml#l00058">free()</a>, <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>, <a class="el" href="a00155_source.xhtml#l00214">CVector::mulC_I()</a>, <a class="el" href="a00143_source.xhtml#l00096">setEye()</a>, <a class="el" href="a00155_source.xhtml#l00282">CVector::subW_I()</a>, and <a class="el" href="a00143_source.xhtml#l00883">swapRowCol()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00050_source.xhtml#l00117">CGmm::compProbabilities_()</a>, <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>, <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>, and <a class="el" href="a00050_source.xhtml#l00361">CGmmResult::setSigma()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a37585f57926ea2921734907bacc6cce8_cgraph.svg" width="640" height="342"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a37585f57926ea2921734907bacc6cce8_icgraph.svg" width="100%" height="442"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aabc5b346338600b0c0dec797abe2b89f" name="aabc5b346338600b0c0dec797abe2b89f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabc5b346338600b0c0dec797abe2b89f">&#9670;&nbsp;</a></span>mul_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mul_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise multiplication of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00475">475</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  476</span>    {</div>
<div class="line"><span class="lineno">  477</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  478</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  479</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  480</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  481</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  482</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  483</span> </div>
<div class="line"><span class="lineno">  484</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  485</span>        {</div>
<div class="line"><span class="lineno">  486</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  487</span>                pptSrcDest[m][n] *= pptSrc[m][n];</div>
<div class="line"><span class="lineno">  488</span>        }</div>
<div class="line"><span class="lineno">  489</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_aabc5b346338600b0c0dec797abe2b89f_icgraph.svg" width="454" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a49b68b5ae672826ed8c8e3b014e09769" name="a49b68b5ae672826ed8c8e3b014e09769"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49b68b5ae672826ed8c8e3b014e09769">&#9670;&nbsp;</a></span>mulC_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulC_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tScale</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies the whole matrix with a single factor </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix to analyze </td></tr>
    <tr><td class="paramname">tScale</td><td>scaling factor to apply </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00498">498</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  499</span>    {</div>
<div class="line"><span class="lineno">  500</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  501</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  502</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  503</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  504</span> </div>
<div class="line"><span class="lineno">  505</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  506</span>            <a class="code hl_function" href="a00502.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a>(pptMat[m], tScale, iNumCols);</div>
<div class="line"><span class="lineno">  507</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00214">CVector::mulC_I()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00072">CPca::compCov()</a>, <a class="el" href="a00044_source.xhtml#l00419">CChordIf::initViterbi_()</a>, and <a class="el" href="a00050_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a49b68b5ae672826ed8c8e3b014e09769_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a49b68b5ae672826ed8c8e3b014e09769_icgraph.svg" width="100%" height="482"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="acfec629a6491fb8c082b566325716224" name="acfec629a6491fb8c082b566325716224"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfec629a6491fb8c082b566325716224">&#9670;&nbsp;</a></span>mulColC_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulColC_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>fValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iCol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a column of a matrix with a constant </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>matrix with column to be multiplied </td></tr>
    <tr><td class="paramname">fValue</td><td>value to multiply the column with </td></tr>
    <tr><td class="paramname">iCol</td><td>index of column to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00517">517</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  518</span>    {</div>
<div class="line"><span class="lineno">  519</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  520</span>        assert(iCol &gt;= 0);</div>
<div class="line"><span class="lineno">  521</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  522</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  523</span> </div>
<div class="line"><span class="lineno">  524</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  525</span>            pptMat[m][iCol] *= fValue;</div>
<div class="line"><span class="lineno">  526</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00050_source.xhtml#l00117">CGmm::compProbabilities_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_acfec629a6491fb8c082b566325716224_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="acfa52b112830fff980c9a7aa860c7d4e" name="acfa52b112830fff980c9a7aa860c7d4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfa52b112830fff980c9a7aa860c7d4e">&#9670;&nbsp;</a></span>mulColvecRowvec()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulColvecRowvec </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptSrcColVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptSrcRowVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a column vec with a row vec (VEC * VEC) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>resulting matrix of dimension iNumMatRows X iNumMatCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcColVec</td><td>(column) vector to be multiplied </td></tr>
    <tr><td class="paramname">ptSrcRowVec</td><td>(row) vector to be multiplied </td></tr>
    <tr><td class="paramname">iNumMatRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumMatCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00536">536</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  537</span>    {</div>
<div class="line"><span class="lineno">  538</span>        assert(iNumMatRows &gt; 0);</div>
<div class="line"><span class="lineno">  539</span>        assert(iNumMatCols &gt; 0);</div>
<div class="line"><span class="lineno">  540</span>        assert(ptSrcRowVec);</div>
<div class="line"><span class="lineno">  541</span>        assert(ptSrcColVec);</div>
<div class="line"><span class="lineno">  542</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">  543</span>        assert(pptDestMat[0]);</div>
<div class="line"><span class="lineno">  544</span> </div>
<div class="line"><span class="lineno">  545</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumMatRows; m++)</div>
<div class="line"><span class="lineno">  546</span>        {</div>
<div class="line"><span class="lineno">  547</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumMatCols; n++)</div>
<div class="line"><span class="lineno">  548</span>                pptDestMat[m][n] = ptSrcColVec[m] * ptSrcRowVec[n];</div>
<div class="line"><span class="lineno">  549</span>        }</div>
<div class="line"><span class="lineno">  550</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00050_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_acfa52b112830fff980c9a7aa860c7d4e_icgraph.svg" width="100%" height="300"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a05a5555eb9e7b63c5534cee3f525a03c" name="a05a5555eb9e7b63c5534cee3f525a03c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05a5555eb9e7b63c5534cee3f525a03c">&#9670;&nbsp;</a></span>mulMatColvec()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulMatColvec </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptDestColVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptSrcColVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a matrix with a column vector (MAT * VEC) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDestColVec</td><td>resulting (column) vector of length iNumMatRows (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptMat</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">ptSrcColVec</td><td>(column) vector to be multiplied </td></tr>
    <tr><td class="paramname">iNumMatRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumMatCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00560">560</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  561</span>    {</div>
<div class="line"><span class="lineno">  562</span>        assert(iNumMatRows &gt; 0);</div>
<div class="line"><span class="lineno">  563</span>        assert(iNumMatCols &gt; 0);</div>
<div class="line"><span class="lineno">  564</span>        assert(ptDestColVec);</div>
<div class="line"><span class="lineno">  565</span>        assert(ptSrcColVec);</div>
<div class="line"><span class="lineno">  566</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  567</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  568</span> </div>
<div class="line"><span class="lineno">  569</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumMatRows; m++)</div>
<div class="line"><span class="lineno">  570</span>            ptDestColVec[m] = <a class="code hl_function" href="a00502.xhtml#a269d316eeb6000aac4f57ade32c83127">CVector::mulScalar</a>(pptMat[m], ptSrcColVec, iNumMatCols);</div>
<div class="line"><span class="lineno">  571</span>    }</div>
<div class="ttc" id="aa00502_xhtml_a269d316eeb6000aac4f57ade32c83127"><div class="ttname"><a href="a00502.xhtml#a269d316eeb6000aac4f57ade32c83127">CVector::mulScalar</a></div><div class="ttdeci">static T mulScalar(const T *ptSrc1, const T *ptSrc2, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00246">Vector.h:246</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00246">CVector::mulScalar()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00071_source.xhtml#l00030">CChordFromBlockIf::compChordProb()</a>, <a class="el" href="a00050_source.xhtml#l00117">CGmm::compProbabilities_()</a>, <a class="el" href="a00050_source.xhtml#l00222">CGmmResult::getProb()</a>, and <a class="el" href="a00152_source.xhtml#l00237">CFilter&lt; T &gt;::setInitState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a05a5555eb9e7b63c5534cee3f525a03c_cgraph.svg" width="347" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a05a5555eb9e7b63c5534cee3f525a03c_icgraph.svg" width="100%" height="454"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="acba558090ffee6e3a28aee7e38726754" name="acba558090ffee6e3a28aee7e38726754"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba558090ffee6e3a28aee7e38726754">&#9670;&nbsp;</a></span>mulMatMat()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulMatMat </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum1Rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum1Cols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum2Rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNum2Cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a matrix with a matrix (MAT1 * MAT2) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDest</td><td>resulting matrix of dimension iNum1Rows x iNum2Cols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptSrc1</td><td>first matrix to be multiplied </td></tr>
    <tr><td class="paramname">pptSrc2</td><td>second matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNum1Rows</td><td>number of rows in matrix 1 </td></tr>
    <tr><td class="paramname">iNum1Cols</td><td>number of columns in matrix 1 (has to equal iNum2Rows) </td></tr>
    <tr><td class="paramname">iNum2Rows</td><td>number of rows in matrix 2 (has to equal iNum1Col) </td></tr>
    <tr><td class="paramname">iNum2Cols</td><td>number of columns in matrix 2 </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00583">583</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  584</span>    {</div>
<div class="line"><span class="lineno">  585</span>        assert(iNum1Rows &gt; 0);</div>
<div class="line"><span class="lineno">  586</span>        assert(iNum1Cols &gt; 0);</div>
<div class="line"><span class="lineno">  587</span>        assert(iNum2Rows &gt; 0);</div>
<div class="line"><span class="lineno">  588</span>        assert(iNum2Cols &gt; 0);</div>
<div class="line"><span class="lineno">  589</span>        assert(iNum1Cols == iNum2Rows);</div>
<div class="line"><span class="lineno">  590</span>        assert(pptDest);</div>
<div class="line"><span class="lineno">  591</span>        assert(pptDest[0]);</div>
<div class="line"><span class="lineno">  592</span>        assert(pptSrc1);</div>
<div class="line"><span class="lineno">  593</span>        assert(pptSrc1[0]);</div>
<div class="line"><span class="lineno">  594</span>        assert(pptSrc2);</div>
<div class="line"><span class="lineno">  595</span>        assert(pptSrc2[0]);</div>
<div class="line"><span class="lineno">  596</span> </div>
<div class="line"><span class="lineno">  597</span>        iNum2Rows = iNum1Cols; <span class="comment">// avoid compiler warning</span></div>
<div class="line"><span class="lineno">  598</span> </div>
<div class="line"><span class="lineno">  599</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNum1Rows; m++)</div>
<div class="line"><span class="lineno">  600</span>        {</div>
<div class="line"><span class="lineno">  601</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNum2Cols; n++)</div>
<div class="line"><span class="lineno">  602</span>            {</div>
<div class="line"><span class="lineno">  603</span>                pptDest[m][n] = 0.F;</div>
<div class="line"><span class="lineno">  604</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> k = 0; k &lt; iNum1Cols; k++)</div>
<div class="line"><span class="lineno">  605</span>                    pptDest[m][n] += pptSrc1[m][k] * pptSrc2[k][n];</div>
<div class="line"><span class="lineno">  606</span>            }</div>
<div class="line"><span class="lineno">  607</span>        }</div>
<div class="line"><span class="lineno">  608</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00039">CPca::compPca()</a>, and <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_acba558090ffee6e3a28aee7e38726754_icgraph.svg" width="487" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="afa3d7d314cf2f43c7dc83f2d0b86ed68" name="afa3d7d314cf2f43c7dc83f2d0b86ed68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa3d7d314cf2f43c7dc83f2d0b86ed68">&#9670;&nbsp;</a></span>mulRowvecMat()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::mulRowvecMat </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>ptDestRowVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptSrcRowVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumMatCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >multiplies a row vector with a matrix (VEC * MAT) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ptDestRowVec</td><td>resulting (row) vector of length iNumMatCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcRowVec</td><td>(column) vector to be multiplied </td></tr>
    <tr><td class="paramname">pptMat</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumMatRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumMatCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00618">618</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  619</span>    {</div>
<div class="line"><span class="lineno">  620</span>        assert(iNumMatRows &gt; 0);</div>
<div class="line"><span class="lineno">  621</span>        assert(iNumMatCols &gt; 0);</div>
<div class="line"><span class="lineno">  622</span>        assert(ptDestRowVec);</div>
<div class="line"><span class="lineno">  623</span>        assert(ptSrcRowVec);</div>
<div class="line"><span class="lineno">  624</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  625</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  626</span> </div>
<div class="line"><span class="lineno">  627</span>        <a class="code hl_function" href="a00502.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a>(ptDestRowVec, iNumMatCols);</div>
<div class="line"><span class="lineno">  628</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumMatCols; n++)</div>
<div class="line"><span class="lineno">  629</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumMatRows; m++)</div>
<div class="line"><span class="lineno">  630</span>                ptDestRowVec[n] += ptSrcRowVec[m] * pptMat[m][n];</div>
<div class="line"><span class="lineno">  631</span>    }</div>
<div class="ttc" id="aa00502_xhtml_a6dbb3f9f480568b60f7fe50090d20003"><div class="ttname"><a href="a00502.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a></div><div class="ttdeci">static void setZero(T *ptSrcDest, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00114">Vector.h:114</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00114">CVector::setZero()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_afa3d7d314cf2f43c7dc83f2d0b86ed68_cgraph.svg" width="340" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a38a45a276935ba2a5566c67c8b6edd0e" name="a38a45a276935ba2a5566c67c8b6edd0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38a45a276935ba2a5566c67c8b6edd0e">&#9670;&nbsp;</a></span>rearrangeRows()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::rearrangeRows </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>piRowIndices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >rearrange the rows of a matrix according to a row index vector </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resorted matrix of dimension iNumRows x ? </td></tr>
    <tr><td class="paramname">piRowIndices</td><td>new indices iNumRows </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00854">854</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  855</span>    {</div>
<div class="line"><span class="lineno">  856</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  857</span>        assert(piRowIndices);</div>
<div class="line"><span class="lineno">  858</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  859</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  860</span> </div>
<div class="line"><span class="lineno">  861</span>        T **pptTmp = 0;</div>
<div class="line"><span class="lineno">  862</span>        <a class="code hl_function" href="a00502.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a>(pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  863</span> </div>
<div class="line"><span class="lineno">  864</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  865</span>        {</div>
<div class="line"><span class="lineno">  866</span>            assert(piRowIndices[m] &lt; iNumRows);</div>
<div class="line"><span class="lineno">  867</span>            assert(piRowIndices[m] &gt;= 0);</div>
<div class="line"><span class="lineno">  868</span> </div>
<div class="line"><span class="lineno">  869</span>            pptTmp[m] = pptSrcDest[piRowIndices[m]];</div>
<div class="line"><span class="lineno">  870</span>        }</div>
<div class="line"><span class="lineno">  871</span>        <a class="code hl_function" href="a00502.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a>(pptSrcDest, pptTmp, iNumRows);</div>
<div class="line"><span class="lineno">  872</span> </div>
<div class="line"><span class="lineno">  873</span>        <a class="code hl_function" href="a00502.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a>(pptTmp);</div>
<div class="line"><span class="lineno">  874</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00025">CVector::alloc()</a>, <a class="el" href="a00155_source.xhtml#l00041">CVector::copy()</a>, and <a class="el" href="a00155_source.xhtml#l00057">CVector::free()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00039">CPca::compPca()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a38a45a276935ba2a5566c67c8b6edd0e_cgraph.svg" width="487" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a38a45a276935ba2a5566c67c8b6edd0e_icgraph.svg" width="332" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a5a4d1830fe1344f0ac40d519690dafea" name="a5a4d1830fe1344f0ac40d519690dafea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a4d1830fe1344f0ac40d519690dafea">&#9670;&nbsp;</a></span>setCol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setCol </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptSrcVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >copies vector content to a column </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>(destination matrix, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcVec</td><td>(source vector) </td></tr>
    <tr><td class="paramname">iColIdx</td><td>index of row to copy to </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00079">79</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   80</span>    {</div>
<div class="line"><span class="lineno">   81</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">   82</span>        assert(ptSrcVec);</div>
<div class="line"><span class="lineno">   83</span>        assert(iColIdx &gt;= 0);</div>
<div class="line"><span class="lineno">   84</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   85</span> </div>
<div class="line"><span class="lineno">   86</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">   87</span>            pptDestMat[m][iColIdx] = ptSrcVec[m];</div>
<div class="line"><span class="lineno">   88</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00044_source.xhtml#l00196">CChordIf::compChords()</a>, <a class="el" href="a00044_source.xhtml#l00419">CChordIf::initViterbi_()</a>, <a class="el" href="a00125_source.xhtml#l00061">CLeaveOneOutCrossVal::process()</a>, and <a class="el" href="a00047_source.xhtml#l00032">CGmmClassifier::train()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a5a4d1830fe1344f0ac40d519690dafea_icgraph.svg" width="100%" height="454"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a8f27c49fcbbdb52e2e9a50f2b22f59c3" name="a8f27c49fcbbdb52e2e9a50f2b22f59c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f27c49fcbbdb52e2e9a50f2b22f59c3">&#9670;&nbsp;</a></span>setEye()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setEye </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >fills matrix with ones on the diagonal, zeros elsewhere </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDest</td><td>resulting matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00096">96</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">   97</span>    {</div>
<div class="line"><span class="lineno">   98</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">   99</span>        assert(iNumRows == iNumCols);</div>
<div class="line"><span class="lineno">  100</span>        assert(pptDest);</div>
<div class="line"><span class="lineno">  101</span>        assert(pptDest[0]);</div>
<div class="line"><span class="lineno">  102</span> </div>
<div class="line"><span class="lineno">  103</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  104</span>        {</div>
<div class="line"><span class="lineno">  105</span>            <a class="code hl_function" href="a00502.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a>(pptDest[m], iNumCols);</div>
<div class="line"><span class="lineno">  106</span>            pptDest[m][m] = 1.F;</div>
<div class="line"><span class="lineno">  107</span>        }</div>
<div class="line"><span class="lineno">  108</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00114">CVector::setZero()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a8f27c49fcbbdb52e2e9a50f2b22f59c3_cgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a8f27c49fcbbdb52e2e9a50f2b22f59c3_icgraph.svg" width="100%" height="442"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="aa95c84e6a291f19c70f2cc2ea7e1cd48" name="aa95c84e6a291f19c70f2cc2ea7e1cd48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa95c84e6a291f19c70f2cc2ea7e1cd48">&#9670;&nbsp;</a></span>setRand()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setRand </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets all matrix elements to a random value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00116">116</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  117</span>    {</div>
<div class="line"><span class="lineno">  118</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  119</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  120</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  121</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  122</span> </div>
<div class="line"><span class="lineno">  123</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  124</span>            <a class="code hl_function" href="a00502.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">CVector::setRand</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">  125</span>    }</div>
<div class="ttc" id="aa00502_xhtml_af7cbe6ef61f8d3acc5d853af9ad58d48"><div class="ttname"><a href="a00502.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">CVector::setRand</a></div><div class="ttdeci">static void setRand(T *ptDest, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00086">Vector.h:86</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00086">CVector::setRand()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00181">CNmfResult::init()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_aa95c84e6a291f19c70f2cc2ea7e1cd48_cgraph.svg" width="499" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_aa95c84e6a291f19c70f2cc2ea7e1cd48_icgraph.svg" width="422" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="ad81ae44f35c3404e30ae8893d57ea2ff" name="ad81ae44f35c3404e30ae8893d57ea2ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad81ae44f35c3404e30ae8893d57ea2ff">&#9670;&nbsp;</a></span>setRow()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setRow </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDestMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>ptSrcVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iRowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >copies vector content to a row </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDestMat</td><td>(destination matrix, user allocated) </td></tr>
    <tr><td class="paramname">ptSrcVec</td><td>(source vector) </td></tr>
    <tr><td class="paramname">iRowIdx</td><td>index of row to copy to </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00134">134</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  135</span>    {</div>
<div class="line"><span class="lineno">  136</span>        assert(pptDestMat);</div>
<div class="line"><span class="lineno">  137</span>        assert(ptSrcVec);</div>
<div class="line"><span class="lineno">  138</span>        assert(iRowIdx &gt;= 0);</div>
<div class="line"><span class="lineno">  139</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  140</span> </div>
<div class="line"><span class="lineno">  141</span>        <a class="code hl_function" href="a00502.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a>(pptDestMat[iRowIdx], ptSrcVec, iNumCols);</div>
<div class="line"><span class="lineno">  142</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00041">CVector::copy()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_ad81ae44f35c3404e30ae8893d57ea2ff_cgraph.svg" width="278" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a1c25e33302ff6282ca58bc27875cc10a" name="a1c25e33302ff6282ca58bc27875cc10a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c25e33302ff6282ca58bc27875cc10a">&#9670;&nbsp;</a></span>setValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setValue </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tValue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets all matrix elements to a value </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">tValue</td><td>value to use </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00151">151</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  152</span>    {</div>
<div class="line"><span class="lineno">  153</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  154</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  155</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  156</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  157</span> </div>
<div class="line"><span class="lineno">  158</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  159</span>            <a class="code hl_function" href="a00502.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a>(pptMat[m], tValue, iNumCols);</div>
<div class="line"><span class="lineno">  160</span>    }</div>
<div class="ttc" id="aa00502_xhtml_a4cf9544dd96801e3ee47fd1ef2049a1b"><div class="ttname"><a href="a00502.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a></div><div class="ttdeci">static void setValue(T *ptDest, T tValue, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00100">Vector.h:100</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00100">CVector::setValue()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00019">CNmf::init()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a1c25e33302ff6282ca58bc27875cc10a_cgraph.svg" width="308" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a1c25e33302ff6282ca58bc27875cc10a_icgraph.svg" width="260" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a7be1ae4f635c5aaec0c2693fc23b3646" name="a7be1ae4f635c5aaec0c2693fc23b3646"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7be1ae4f635c5aaec0c2693fc23b3646">&#9670;&nbsp;</a></span>setZero()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setZero </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets all matrix elements to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00168">168</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  169</span>    {</div>
<div class="line"><span class="lineno">  170</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  171</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  172</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  173</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  174</span> </div>
<div class="line"><span class="lineno">  175</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  176</span>            <a class="code hl_function" href="a00502.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a>(pptMat[m], iNumCols);</div>
<div class="line"><span class="lineno">  177</span>    }</div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00114">CVector::setZero()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00100">CPca::calcSVD()</a>, <a class="el" href="a00065_source.xhtml#l00125">CKmeans::compClusterMeans_()</a>, <a class="el" href="a00068_source.xhtml#l00072">CPca::compCov()</a>, <a class="el" href="a00074_source.xhtml#l00072">CSubFingerprint::genBands_()</a>, <a class="el" href="a00125_source.xhtml#l00010">CLeaveOneOutCrossVal::init()</a>, and <a class="el" href="a00050_source.xhtml#l00155">CGmm::updateState_()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a7be1ae4f635c5aaec0c2693fc23b3646_cgraph.svg" width="294" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a7be1ae4f635c5aaec0c2693fc23b3646_icgraph.svg" width="100%" height="529"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a8c7b91818cdb1dd765ff8add1eb87a2b" name="a8c7b91818cdb1dd765ff8add1eb87a2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c7b91818cdb1dd765ff8add1eb87a2b">&#9670;&nbsp;</a></span>setZeroBelowThresh()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::setZeroBelowThresh </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptMat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>tThresh</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >sets all elements in a matrix below a threshold to zero </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptMat</td><td>pointer to memory to be set </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
    <tr><td class="paramname">tThresh</td><td>threshold </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00186">186</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  187</span>    {</div>
<div class="line"><span class="lineno">  188</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  189</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  190</span>        assert(pptMat);</div>
<div class="line"><span class="lineno">  191</span>        assert(pptMat[0]);</div>
<div class="line"><span class="lineno">  192</span> </div>
<div class="line"><span class="lineno">  193</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  194</span>            <a class="code hl_function" href="a00502.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a>(pptMat[m], iNumCols, tThresh);</div>
<div class="line"><span class="lineno">  195</span>    }</div>
<div class="ttc" id="aa00502_xhtml_aba07261926b4c10ed7fdbe38edf6d16d"><div class="ttname"><a href="a00502.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a></div><div class="ttdeci">static void setZeroBelowThresh(T *ptSrcDest, long long int iLength, T tThresh)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00129">Vector.h:129</a></div></div>
</div><!-- fragment -->
<p class="reference">References <a class="el" href="a00155_source.xhtml#l00129">CVector::setZeroBelowThresh()</a>.</p>

<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a8c7b91818cdb1dd765ff8add1eb87a2b_cgraph.svg" width="446" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a8c7b91818cdb1dd765ff8add1eb87a2b_icgraph.svg" width="542" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a0b0e4b2f907d07d41fcd0e0301b8d8ff" name="a0b0e4b2f907d07d41fcd0e0301b8d8ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b0e4b2f907d07d41fcd0e0301b8d8ff">&#9670;&nbsp;</a></span>sub_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::sub_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >elementwise subtraction of two matrices inplace </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix </td></tr>
    <tr><td class="paramname">pptSrc</td><td>matrix to be multiplied </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00640">640</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  641</span>    {</div>
<div class="line"><span class="lineno">  642</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  643</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  644</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  645</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  646</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  647</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  648</span> </div>
<div class="line"><span class="lineno">  649</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  650</span>        {</div>
<div class="line"><span class="lineno">  651</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  652</span>                pptSrcDest[m][n] -= pptSrc[m][n];</div>
<div class="line"><span class="lineno">  653</span>        }</div>
<div class="line"><span class="lineno">  654</span>    }</div>
</div><!-- fragment -->
</div>
</div>
<a id="a559a4308e4b77c24a8544d4e26efe1e9" name="a559a4308e4b77c24a8544d4e26efe1e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a559a4308e4b77c24a8544d4e26efe1e9">&#9670;&nbsp;</a></span>swapRowCol()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::swapRowCol </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iRowIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iColIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >swaps a matrix row with a column in a square matrix </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix (to be modified) </td></tr>
    <tr><td class="paramname">iRowIdx</td><td>index of row </td></tr>
    <tr><td class="paramname">iColIdx</td><td>index of columns </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00883">883</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  884</span>    {</div>
<div class="line"><span class="lineno">  885</span>        assert(iRowIdx &gt; 0);</div>
<div class="line"><span class="lineno">  886</span>        assert(iColIdx &gt; 0);</div>
<div class="line"><span class="lineno">  887</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  888</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  889</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  890</span> </div>
<div class="line"><span class="lineno">  891</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  892</span>        {</div>
<div class="line"><span class="lineno">  893</span>            T fTmp = pptSrcDest[iRowIdx][n];</div>
<div class="line"><span class="lineno">  894</span>            pptSrcDest[iRowIdx][n] = pptSrcDest[iColIdx][n];</div>
<div class="line"><span class="lineno">  895</span>            pptSrcDest[iColIdx][n] = fTmp;</div>
<div class="line"><span class="lineno">  896</span>        }</div>
<div class="line"><span class="lineno">  897</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00143_source.xhtml#l00659">det()</a>, and <a class="el" href="a00143_source.xhtml#l00751">inv_I()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="a00486_a559a4308e4b77c24a8544d4e26efe1e9_icgraph.svg" width="100%" height="480"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>

</div>
</div>
<a id="a8b496f71fd36ee5afe60619df6cd657a" name="a8b496f71fd36ee5afe60619df6cd657a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b496f71fd36ee5afe60619df6cd657a">&#9670;&nbsp;</a></span>transpose()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::transpose </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *const *const&#160;</td>
          <td class="paramname"><em>pptSrc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumSrcCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >transposes matrix pptSrc and write the result to pptDest </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptDest</td><td>resulting matrix of dimension iNumSrcCols x iNumSrcRows (to be written, user allocated) </td></tr>
    <tr><td class="paramname">pptSrc</td><td>input matrix of dimension iNumSrcRows x iNumCols </td></tr>
    <tr><td class="paramname">iNumSrcRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumSrcCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00906">906</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  907</span>    {</div>
<div class="line"><span class="lineno">  908</span>        assert(iNumSrcRows &gt; 0);</div>
<div class="line"><span class="lineno">  909</span>        assert(iNumSrcCols &gt; 0);</div>
<div class="line"><span class="lineno">  910</span>        assert(pptSrc);</div>
<div class="line"><span class="lineno">  911</span>        assert(pptSrc[0]);</div>
<div class="line"><span class="lineno">  912</span>        assert(pptDest);</div>
<div class="line"><span class="lineno">  913</span>        assert(pptDest[0]);</div>
<div class="line"><span class="lineno">  914</span> </div>
<div class="line"><span class="lineno">  915</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumSrcRows; m++)</div>
<div class="line"><span class="lineno">  916</span>        {</div>
<div class="line"><span class="lineno">  917</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumSrcCols; n++)</div>
<div class="line"><span class="lineno">  918</span>                pptDest[n][m] = pptSrc[m][n];</div>
<div class="line"><span class="lineno">  919</span>        }</div>
<div class="line"><span class="lineno">  920</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00068_source.xhtml#l00039">CPca::compPca()</a>, <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>, and <a class="el" href="a00110_source.xhtml#l00066">CKnn::train()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a8b496f71fd36ee5afe60619df6cd657a_icgraph.svg" width="479" height="139"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<a id="a1553f74613e06cf72a741728231e88cb" name="a1553f74613e06cf72a741728231e88cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1553f74613e06cf72a741728231e88cb">&#9670;&nbsp;</a></span>vecnorm_I()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void CMatrix::vecnorm_I </td>
          <td>(</td>
          <td class="paramtype">T **&#160;</td>
          <td class="paramname"><em>pptSrcDest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumRows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>iNumCols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p >normalizes each column of the matrix (p=1) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pptSrcDest</td><td>resulting matrix of dimension iNumRows x iNumCols (to be written, user allocated) </td></tr>
    <tr><td class="paramname">iNumRows</td><td>number of rows in the matrix </td></tr>
    <tr><td class="paramname">iNumCols</td><td>number of columns in the matrix </td></tr>
  </table>
  </dd>
</dl>

<p class="definition">Definition at line <a class="el" href="a00143_source.xhtml#l00203">203</a> of file <a class="el" href="a00143_source.xhtml">Matrix.h</a>.</p>
<div class="fragment"><div class="line"><span class="lineno">  204</span>    {</div>
<div class="line"><span class="lineno">  205</span>        assert(iNumRows &gt; 0);</div>
<div class="line"><span class="lineno">  206</span>        assert(iNumCols &gt; 0);</div>
<div class="line"><span class="lineno">  207</span>        assert(pptSrcDest);</div>
<div class="line"><span class="lineno">  208</span>        assert(pptSrcDest[0]);</div>
<div class="line"><span class="lineno">  209</span> </div>
<div class="line"><span class="lineno">  210</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> n = 0; n &lt; iNumCols; n++)</div>
<div class="line"><span class="lineno">  211</span>        {</div>
<div class="line"><span class="lineno">  212</span>            T tNorm = 0;</div>
<div class="line"><span class="lineno">  213</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  214</span>                tNorm += std::abs(pptSrcDest[m][n]);</div>
<div class="line"><span class="lineno">  215</span>            <span class="keywordflow">if</span> (tNorm &gt; 0)</div>
<div class="line"><span class="lineno">  216</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> m = 0; m &lt; iNumRows; m++)</div>
<div class="line"><span class="lineno">  217</span>                    pptSrcDest[m][n] /= tNorm;</div>
<div class="line"><span class="lineno">  218</span>        }</div>
<div class="line"><span class="lineno">  219</span>    }</div>
</div><!-- fragment -->
<p class="reference">Referenced by <a class="el" href="a00116_source.xhtml#l00181">CNmfResult::init()</a>, and <a class="el" href="a00116_source.xhtml#l00099">CNmf::runNmfIter()</a>.</p>
<div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="a00486_a1553f74613e06cf72a741728231e88cb_icgraph.svg" width="483" height="88"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="a00143_source.xhtml">Matrix.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="a00486.xhtml">CMatrix</a></li>
    <li class="footer">Generated on Fri Jun 17 2022 19:37:37 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
