<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.4"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ACA: Vector.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectalign">
   <div id="projectname">ACA<span id="projectnumber">&#160;0.2.6</span>
   </div>
   <div id="projectbrief">Example Code for Audio Content Analysis</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.4 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "search",'Search','.xhtml');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('a00155_source.xhtml',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Vector.h</div></div>
</div><!--header-->
<div class="contents">
<a href="a00155.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#if !defined(__ACA_Vector_HEADER_INCLUDED__)</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#define __ACA_Vector_HEADER_INCLUDED__</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;cassert&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;cstring&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;limits&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;cmath&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="preprocessor">#include &quot;<a class="code" href="a00158.xhtml">Synthesis.h</a>&quot;</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment"></span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="comment">/*! \brief class with static functions for buffer operations with type T</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="comment">*/</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno"><a class="line" href="a00495.xhtml">   14</a></span><span class="keyword">class </span><a class="code hl_class" href="a00495.xhtml">CVector</a></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>{</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="comment"></span> </div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="comment">    /*! allocates a T buffer and inits it with zeros</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">    \param ptVec (empty pointer, to be allocated)</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="comment">    \param iLength number of Ts</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="comment">    \return</span></div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="comment">    */</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">   24</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">alloc</a>(T*&amp; ptVec, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>    {</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>        assert(iLength &gt; 0);</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>        ptVec = <span class="keyword">new</span> T[iLength];</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>        assert(ptVec);</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>        <a class="code hl_function" href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">setZero</a>(ptVec, iLength);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>    }</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment"></span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="comment">    /*! frees a T buffer and sets it to zero</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="comment">    \param ptVec (empty pointer, to be allocated)</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="comment">    \return</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span><span class="comment">    */</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno"><a class="line" href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">   39</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">free</a>(T*&amp; ptVec)</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>    {</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>        <span class="keyword">delete</span>[] ptVec;</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>        ptVec = 0;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>    }</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="comment"></span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="comment">    /*! sets a buffer to zero</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span><span class="comment">    \param ptSrcDest pointer to memory to be modified</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="comment">    \param iLength  buffer length</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="comment">    */</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno"><a class="line" href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">   51</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">setZero</a> (T *ptSrcDest, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    {</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>            memset (ptSrcDest, 0, <span class="keyword">sizeof</span>(T)*iLength);</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    }</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span><span class="comment"></span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span><span class="comment">    /*! initializes the buffer to a specific value</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="comment">    \param ptDest pointer to memory to be set</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="comment">    \param tValue value to use</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span><span class="comment">    \param iLength number of elements to be set</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span><span class="comment">    */</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="a00495.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">   67</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">setValue</a>(T* ptDest, T tValue, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>        assert(ptDest);</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>            ptDest[i] = tValue;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    }</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span><span class="comment"></span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="comment">    /*! initializes the buffer with random noise</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span><span class="comment">    \param ptDest pointer to memory to be initialized</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="comment">    \param iLength number of elements to be set</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="comment">    */</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="a00495.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">   82</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">setRand</a>(T* ptDest, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    {</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>        assert(ptDest);</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>        <a class="code hl_function" href="a00487.xhtml#a67eaa8b4b86a5c507f1fe0f1b9c92ce6">CSynthesis::genNoise</a>(ptDest, iLength);</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    }</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span><span class="comment"></span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span><span class="comment">    /*! sets all values smaller than a threshold to 0</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span><span class="comment">    \param ptSrcDest pointer to memory to be modified</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span><span class="comment">    \param iLength  buffer length</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span><span class="comment">    \param tThresh threshold value</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span><span class="comment">    */</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="a00495.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">   97</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">setZeroBelowThresh</a> (T *ptSrcDest, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, T tThresh)</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    {</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>            <span class="keywordflow">if</span> (ptSrcDest[i] &lt; tThresh)</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>                ptSrcDest[i] = 0;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    }<span class="comment"></span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span><span class="comment">    /*! copies buffer of type T</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span><span class="comment">    \param ptDest pointer to destination memory</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span><span class="comment">    \param ptSrc pointer to source memory</span></div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span><span class="comment">    \param iLength length of buffer</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="comment">    */</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">  113</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">copy</a>(T *ptDest, <span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    {</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>        {</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>            assert(ptDest);</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>            assert(ptSrc);</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>            memcpy(ptDest, ptSrc, <span class="keyword">sizeof</span>(T)*iLength);</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>        }</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    }<span class="comment"></span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span><span class="comment">    /*! reverses buffer (last to first element)</span></div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span><span class="comment">    \param ptSrcDest pointer to memory to be flipped</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span><span class="comment">    \param iLength number of elements</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="comment">    */</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno"><a class="line" href="a00495.xhtml#a16455e414da1bc89417716b46b212ab9">  130</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a16455e414da1bc89417716b46b212ab9">flip_I</a>(T *ptSrcDest, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    {</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>        {</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>            assert(ptSrcDest);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>            <span class="keyword">auto</span> iLoopLength = iLength / 2; <span class="comment">// integer division!</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLoopLength; i++)</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>            {</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>                T Tmp = ptSrcDest[i];</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>                ptSrcDest[i] = ptSrcDest[iLength - 1 - i];</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>                ptSrcDest[iLength - 1 - i] = Tmp;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>            }</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>        }</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>    }<span class="comment"></span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span><span class="comment">    /*! moves a subset of the current buffer</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span><span class="comment">    \param ptSrcDest source and destination</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span><span class="comment">    \param iDestIdx destination index</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span><span class="comment">    \param isrcIdx source index</span></div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span><span class="comment">    \param iLength number of elements to be moved</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span><span class="comment">    */</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno"><a class="line" href="a00495.xhtml#a7d2a655aca5f949e4c5909ec35b8c63c">  155</a></span>    <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a7d2a655aca5f949e4c5909ec35b8c63c">moveInMem</a> (T *ptSrcDest, <span class="keywordtype">int</span> iDestIdx, <span class="keywordtype">int</span> isrcIdx, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    {</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>            memmove (&amp;ptSrcDest[iDestIdx], &amp;ptSrcDest[isrcIdx], <span class="keyword">sizeof</span>(T)*iLength);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    }</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="comment"></span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="comment">    /*! multiplies a buffer with a scalar</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span><span class="comment">    \param ptSrcDest buffer to be multiplied</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="comment">    \param fScale scalar</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="comment">    \param iLength number of element to be multiplied</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span><span class="comment">    */</span></div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">  172</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">mulC_I</a> (T *ptSrcDest, T fScale, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    {</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>        </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>            ptSrcDest[i] *= fScale;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="comment"></span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span><span class="comment">    /*! element-wise vector multiplication</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span><span class="comment">    \param ptSrcDest one input and output buffer</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span><span class="comment">    \param ptSrc second input buffer</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span><span class="comment">    \param iLength number of element to be multiplied</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="comment">    */</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno"><a class="line" href="a00495.xhtml#a5fb59528a3f5d3968f988d550b270898">  188</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a5fb59528a3f5d3968f988d550b270898">mul_I</a> (T *ptSrcDest, <span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    {</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>        assert (ptSrc);</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>            ptSrcDest[i] *= ptSrc[i];</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    }</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span><span class="comment"></span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span><span class="comment">    /*! computes the scalar product between two vectors</span></div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span><span class="comment">    \param ptSrc1 vector one</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span><span class="comment">    \param ptSrc2 vector two</span></div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span><span class="comment">    \param iLength number of dimenions</span></div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span><span class="comment">    */</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno"><a class="line" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">  205</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">mulScalar</a> (<span class="keyword">const</span> T *ptSrc1, <span class="keyword">const</span> T *ptSrc2, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    {</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>        assert (ptSrc1);</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>        assert (ptSrc2);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>        T  fResult = 0;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>            fResult += ptSrc1[i] * ptSrc2[i];</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>    }</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span><span class="comment"></span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="comment">    /*! element-wise vector division</span></div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span><span class="comment">    \param ptSrcDest one input and output buffer</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span><span class="comment">    \param ptSrc second input buffer</span></div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span><span class="comment">    \param iLength number of element to be divided</span></div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span><span class="comment">    */</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno"><a class="line" href="a00495.xhtml#ac742bf0f863692575b9588cb78902484">  225</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#ac742bf0f863692575b9588cb78902484">div_I</a> (T *ptSrcDest, <span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    {</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>        assert (ptSrc);</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>        {</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>            assert(ptSrc[i] != 0);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>            ptSrcDest[i] /= ptSrc[i];</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>        }</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    }</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span><span class="comment"></span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span><span class="comment">    /*! element-wise vector addition</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span><span class="comment">    \param ptSrcDest one input and output buffer</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="comment">    \param ptSrc second input buffer</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span><span class="comment">    \param iLength number of element to be added</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span><span class="comment">    */</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno"><a class="line" href="a00495.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">  245</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">add_I</a> (T *ptSrcDest, <span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>    {</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>        assert (ptSrc);</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>            ptSrcDest[i] += ptSrc[i];</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>    }</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span><span class="comment"></span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span><span class="comment">    /*! adds a buffer to a scalar</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span><span class="comment">    \param ptSrcDest buffer to be added</span></div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span><span class="comment">    \param fConst scalar</span></div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span><span class="comment">    \param iLength number of element to be added</span></div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span><span class="comment">    */</span></div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno"><a class="line" href="a00495.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">  262</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">addC_I</a> (T *ptSrcDest, T fConst, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>    {</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>        assert (ptSrcDest);</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>            ptSrcDest[i] += fConst;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>    }</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span><span class="comment"></span> </div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span><span class="comment">    /*! sorts values in a buffer </span></div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span><span class="comment">    \param ptSrcDest buffer to be sorted</span></div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span><span class="comment">    \param piIndices new indices (optional, can be left 0)</span></div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span><span class="comment">    \param iLength number of elements to be sorted</span></div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span><span class="comment">    \param bAscending sort order (descending -&gt; false)</span></div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span><span class="comment">    */</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno"><a class="line" href="a00495.xhtml#a63b8f3254518a67c10b7a5b2b3e0381f">  280</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a63b8f3254518a67c10b7a5b2b3e0381f">sort_I</a>(T* ptSrcDest, <span class="keywordtype">int</span>* piIndices,  <span class="keywordtype">int</span> iLength, <span class="keywordtype">bool</span> bAscending = <span class="keyword">true</span>)</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>    {</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>        <span class="comment">// go bubble sort! ( should be replaced some time with something faster)</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>        <span class="keywordtype">bool</span> bDone = <span class="keyword">false</span>; <span class="comment">// this flag will be used to check whether we have to continue the algorithm</span></div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>        <span class="comment">// initialize</span></div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>        <span class="keywordflow">if</span> (piIndices)</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>                piIndices[i] = i;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>        <span class="keywordflow">if</span> (bAscending)</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>        {</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>            <span class="keywordflow">while</span> (!bDone)</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>            {</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>                bDone = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span> </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength-1; i++)</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>                {</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>                    <span class="keywordflow">if</span> (ptSrcDest[i] &gt; ptSrcDest[i + 1]) <span class="comment">// compare the current element with the following one</span></div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>                    {</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>                        <span class="comment">//swap them</span></div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>                        <a class="code hl_function" href="a00491.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(ptSrcDest[i], ptSrcDest[i + 1]);</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>                        <span class="keywordflow">if</span> (piIndices)</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>                            <a class="code hl_function" href="a00491.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(piIndices[i], piIndices[i + 1]);</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>                        bDone = <span class="keyword">false</span>; <span class="comment">// let&#39;s recheck the array</span></div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>                    }</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>                }</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>            }</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>        }</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>        <span class="keywordflow">else</span> <span class="comment">// descending</span></div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>        {</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>            <span class="keywordflow">while</span> (!bDone)</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>            {</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>                bDone = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>                <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength-1; i++)</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>                {</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>                    <span class="keywordflow">if</span> (ptSrcDest[i] &lt; ptSrcDest[i + 1]) <span class="comment">// compare the current element with the following one</span></div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>                    {</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>                        <span class="comment">//swap them</span></div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>                        <a class="code hl_function" href="a00491.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(ptSrcDest[i], ptSrcDest[i + 1]);</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>                        <span class="keywordflow">if</span> (piIndices)</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>                            <a class="code hl_function" href="a00491.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a>(piIndices[i], piIndices[i + 1]);</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span> </div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>                        bDone = <span class="keyword">false</span>; <span class="comment">// let&#39;s recheck the array</span></div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>                    }</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>                }</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>            }</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>        }</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>    }</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span><span class="comment"></span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="comment">    /*! element-wise vector subtraction</span></div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span><span class="comment">    \param ptSrcDest one input and output buffer</span></div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span><span class="comment">    \param ptSrc second input buffer</span></div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span><span class="comment">    \param iLength number of element to be subtracted</span></div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span><span class="comment">    */</span></div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno"><a class="line" href="a00495.xhtml#a39329371d828db80c2f0ad037074c998">  341</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a39329371d828db80c2f0ad037074c998">sub_I</a>(T* ptSrcDest, <span class="keyword">const</span> T* ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>    {</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>        assert(ptSrcDest);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>        assert(ptSrc);</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>            ptSrcDest[i] -= ptSrc[i];</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>    }</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span><span class="comment"></span> </div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span><span class="comment">    /*! manhattan distance</span></div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span><span class="comment">    \param ptSrc1 first input vector</span></div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span><span class="comment">    \param ptSrc2 second input vector</span></div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span><span class="comment">    \param iLength length of vectors</span></div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span><span class="comment">    */</span></div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno"><a class="line" href="a00495.xhtml#aab8d1ce72a924e66e81e4802a9bed2a0">  358</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#aab8d1ce72a924e66e81e4802a9bed2a0">distManhattan</a>(<span class="keyword">const</span> T* ptSrc1, <span class="keyword">const</span> T* ptSrc2, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>    {</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>        assert(ptSrc1);</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>        assert(ptSrc2);</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span> </div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>        T fDist = std::abs(ptSrc1[0] - ptSrc2[0]);</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 1; i &lt; iLength; i++)</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>            fDist += std::abs(ptSrc1[i] - ptSrc2[i]);</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>        </div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>        <span class="keywordflow">return</span> fDist;</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>    }</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span><span class="comment"></span> </div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span><span class="comment">    /*! Euclidean distance</span></div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span><span class="comment">    \param ptSrc1 first input vector</span></div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span><span class="comment">    \param ptSrc2 second input vector</span></div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span><span class="comment">    \param iLength length of vectors</span></div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span><span class="comment">    */</span></div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno"><a class="line" href="a00495.xhtml#a98bac500fad7ba363e8be30051ba6690">  378</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#a98bac500fad7ba363e8be30051ba6690">distEuclidean</a>(<span class="keyword">const</span> T* ptSrc1, <span class="keyword">const</span> T* ptSrc2, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>    {</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>        assert(ptSrc1);</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>        assert(ptSrc2);</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span> </div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>        T fDist = -2.F * <a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc1, ptSrc2, iLength);</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>        fDist += <a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc1, ptSrc1, iLength);</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>        fDist += <a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc2, ptSrc2, iLength);</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>        <span class="comment">//for (auto i = 0; i &lt; iLength; i++)</span></div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>        <span class="comment">//    fDist += (ptSrc1[i] - ptSrc2[i]) * (ptSrc1[i] - ptSrc2[i]);</span></div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span> </div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>        <span class="keywordflow">return</span> std::sqrt(fDist);</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>    }</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span><span class="comment"></span> </div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span><span class="comment">    /*! Cosine distance</span></div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span><span class="comment">    \param ptSrc1 first input vector</span></div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span><span class="comment">    \param ptSrc2 second input vector</span></div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span><span class="comment">    \param iLength length of vectors</span></div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span><span class="comment">    */</span></div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno"><a class="line" href="a00495.xhtml#a45f65002e2aab7eabf8702b8bcc8d30b">  400</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#a45f65002e2aab7eabf8702b8bcc8d30b">distCosine</a>(<span class="keyword">const</span> T* ptSrc1, <span class="keyword">const</span> T* ptSrc2, <span class="keywordtype">long</span> <span class="keywordtype">long</span> iLength)</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>    {</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>        assert(ptSrc1);</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>        assert(ptSrc2);</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span> </div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>        T fDist = 0;</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>            fDist += ptSrc1[i] * ptSrc2[i];</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span> </div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>        <span class="keywordflow">return</span> 1.F - fDist / std::sqrt(<a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc1, ptSrc1, iLength) * <a class="code hl_function" href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">mulScalar</a>(ptSrc2, ptSrc2, iLength));</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>    }</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span> </div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span><span class="comment"></span> </div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span><span class="comment">    /*! weighted element-wise vector addition</span></div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span><span class="comment">    \param ptSrcDest one input and output buffer</span></div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span><span class="comment">    \param ptSrc second input buffer</span></div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span><span class="comment">    \param fWeight weight to be applied to ptSrc entries</span></div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span><span class="comment">    \param iLength number of elements to be added</span></div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span><span class="comment">    */</span></div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno"><a class="line" href="a00495.xhtml#a2239b170d46ed3d0846d766a0634a0be">  422</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a2239b170d46ed3d0846d766a0634a0be">addW_I</a>(T* ptSrcDest, <span class="keyword">const</span> T* ptSrc, T fWeight, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>    {</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>        assert(ptSrcDest);</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>        assert(ptSrc);</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span> </div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>            ptSrcDest[i] += fWeight * ptSrc[i];</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>    }</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span><span class="comment"></span> </div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span><span class="comment">    /*! weighted element-wise vector subtraction</span></div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span><span class="comment">    \param ptSrcDest one input and output buffer</span></div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span><span class="comment">    \param ptSrc second input buffer</span></div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span><span class="comment">    \param fWeight weight to be applied to ptSrc entries</span></div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span><span class="comment">    \param iLength number of element to be subtracted</span></div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span><span class="comment">    \return void</span></div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span><span class="comment">    */</span></div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno"><a class="line" href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">  440</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">subW_I</a>(T* ptSrcDest, <span class="keyword">const</span> T* ptSrc, T fWeight, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>    {</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>        <a class="code hl_function" href="a00495.xhtml#a2239b170d46ed3d0846d766a0634a0be">addW_I</a>(ptSrcDest, ptSrc, -fWeight, iLength);</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>    }</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span><span class="comment"></span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span><span class="comment">    /*! computes the sum of a vector</span></div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span><span class="comment">    \param ptSrc vector</span></div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span><span class="comment">    \param iLength length of vector</span></div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span><span class="comment">    \param bAbs specifies whether it is the sum of absolute values or not</span></div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span><span class="comment">    */</span></div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno"><a class="line" href="a00495.xhtml#abdbcc3898121387f3694f74491b7331e">  452</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#abdbcc3898121387f3694f74491b7331e">getSum</a> (<span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, <span class="keywordtype">bool</span> bAbs = <span class="keyword">false</span>)</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>    {</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>        assert (ptSrc);</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span> </div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>        T fResult = 0;</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>        <span class="keywordflow">if</span> (bAbs)</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>        {</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>                fResult += std::abs(ptSrc[i]);</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>        }</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>        <span class="keywordflow">else</span></div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>        {</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>            <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>                fResult += ptSrc[i];</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>        }</div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span>        <span class="keywordflow">return</span> fResult;</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>    }</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span><span class="comment"></span> </div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span><span class="comment">    /*! checks to buffer for equality (no floating point tolerance)</span></div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span><span class="comment">    \param ptSrc1 buffer 1</span></div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span><span class="comment">    \param ptSrc2 buffer 2</span></div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span><span class="comment">    \param iLength number of dimensions</span></div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span><span class="comment">    \return bool</span></div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span><span class="comment">    */</span></div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno"><a class="line" href="a00495.xhtml#ad1bfa2e2a6fc6da52c05ad9e0e1dea66">  478</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="a00495.xhtml#ad1bfa2e2a6fc6da52c05ad9e0e1dea66">isEqual</a> (<span class="keyword">const</span> T *ptSrc1, <span class="keyword">const</span> T *ptSrc2, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>    {</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>        assert (ptSrc1);</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>        assert (ptSrc2);</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span> </div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>        <span class="keywordflow">return</span> (memcmp (ptSrc1, ptSrc2, iLength * <span class="keyword">sizeof</span>(T)) == 0);</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>    }</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span><span class="comment"></span> </div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span><span class="comment">    /*! extracts the mean value</span></div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span><span class="comment">    */</span></div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno"><a class="line" href="a00495.xhtml#ae6e3545cf196c5e2409365bc62b7c1de">  493</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#ae6e3545cf196c5e2409365bc62b7c1de">getMean</a> (<span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>    {</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span> </div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span>        T fMean = <a class="code hl_function" href="a00495.xhtml#abdbcc3898121387f3694f74491b7331e">getSum</a>(ptSrc, iLength);</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span> </div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span>        {</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span>            fMean  /= iLength;</div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span>        }</div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span> </div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>        <span class="keywordflow">return</span> fMean;</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>    }</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span><span class="comment"></span> </div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span><span class="comment">    /*! extracts the standard deviation (biased) from a buffer</span></div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span><span class="comment">    \param fMean mean value if it has already been computed, otherwise it will be extracted in function</span></div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span><span class="comment">    */</span></div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno"><a class="line" href="a00495.xhtml#ae2ed42101e3d7075f5dec265a23f3424">  514</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#ae2ed42101e3d7075f5dec265a23f3424">getStd</a> (<span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, T fMean = std::numeric_limits&lt;T&gt;::max())</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span>    {</div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span> </div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span>        T  fStd = 0;</div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span> </div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>        <span class="keywordflow">if</span> (fMean == std::numeric_limits&lt;T&gt;::max())</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span>        {</div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span>            fMean   = <a class="code hl_function" href="a00495.xhtml#ae6e3545cf196c5e2409365bc62b7c1de">getMean</a>(ptSrc, iLength);</div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span>        }</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span> </div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i=0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span>        {</div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span>            fStd   += (ptSrc[i] - fMean) * (ptSrc[i] - fMean);</div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span>        }</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span> </div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>        <span class="keywordflow">if</span> (iLength &gt; 1)</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span>        {</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span>            <span class="comment">//dStd   /= (iLength - 1);</span></div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span>            fStd   /= iLength;</div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span>        }</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span> </div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span>        <span class="keywordflow">return</span> std::sqrt(fStd);</div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span>    }</div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span><span class="comment"></span> </div>
<div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span><span class="comment">    /*! extracts the root mean square from a buffer</span></div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span><span class="comment">    */</span></div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno"><a class="line" href="a00495.xhtml#acba4c4298832abaf6ae306cef5990653">  545</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#acba4c4298832abaf6ae306cef5990653">getRms</a> (<span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength)</div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span>    {</div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span> </div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span>        T fRms = 0;</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span> </div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span> </div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i=0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno">  553</span>        {</div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span>            fRms   += ptSrc[i] * ptSrc[i];</div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span>        }</div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span> </div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>        <span class="keywordflow">if</span> (iLength &gt; 0)</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>        {</div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>            fRms   /= iLength;</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span>        }</div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span> </div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span>        <span class="keywordflow">return</span> std::sqrt(fRms);</div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno">  563</span>    }</div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span><span class="comment"></span> </div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span><span class="comment">    /*! finds the maximum (absolute) value in the buffer</span></div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00568" name="l00568"></a><span class="lineno">  568</span><span class="comment">    \param bAbs bool to specify whether we search absolute values</span></div>
<div class="line"><a id="l00569" name="l00569"></a><span class="lineno">  569</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span><span class="comment">    */</span></div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno">  571</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno"><a class="line" href="a00495.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">  572</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">getMax</a>(<span class="keyword">const</span> T* ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, <span class="keywordtype">bool</span> bAbs = <span class="keyword">false</span>)</div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span>    {</div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>        T fMax = 0;</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span>        <span class="keywordtype">long</span> <span class="keywordtype">long</span> iMax = -1;</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span> </div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span>        <a class="code hl_function" href="a00495.xhtml#a34a5c0abd80cd982df8a8bae7cbcea19">findMax</a>(ptSrc, fMax, iMax, iLength, bAbs);</div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span> </div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span>        <span class="keywordflow">return</span> fMax;</div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span>    }</div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span><span class="comment"></span> </div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span><span class="comment">    /*! finds the local maxima in the buffer</span></div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span><span class="comment">    \param pbisLocalMax result buffer</span></div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span><span class="comment">    \param fThresh only detect maxima above this threshold</span></div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span><span class="comment">    \return int number of local maxima</span></div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span><span class="comment">    */</span></div>
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno"><a class="line" href="a00495.xhtml#a64c5c5686629f104663dd3774e7a6e1b">  590</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code hl_function" href="a00495.xhtml#a64c5c5686629f104663dd3774e7a6e1b">findPeaks</a>(<span class="keywordtype">bool</span> *pbisLocalMax, <span class="keyword">const</span> T* ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, T fThresh = -std::numeric_limits&lt;T&gt;::max())</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>    {</div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span>        assert(iLength &gt;= 0);</div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span>        assert(ptSrc);</div>
<div class="line"><a id="l00594" name="l00594"></a><span class="lineno">  594</span>        assert(pbisLocalMax);</div>
<div class="line"><a id="l00595" name="l00595"></a><span class="lineno">  595</span> </div>
<div class="line"><a id="l00596" name="l00596"></a><span class="lineno">  596</span>        <span class="keywordtype">int</span> iNumPeaks = 0;</div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span> </div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span>        <a class="code hl_function" href="a00495.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a>(pbisLocalMax, <span class="keyword">false</span>, iLength);</div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span> </div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> k = 1; k &lt; iLength - 1; k++)</div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span>        {</div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span>            <span class="comment">// search for local maxima</span></div>
<div class="line"><a id="l00603" name="l00603"></a><span class="lineno">  603</span>            <span class="keywordflow">if</span> (ptSrc[k] &lt;= ptSrc[k - 1] || ptSrc[k] &lt;= ptSrc[k + 1] || ptSrc[k] &lt;= fThresh)</div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span>                <span class="keywordflow">continue</span>;</div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span>            <span class="keywordflow">else</span></div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span>            {</div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span>                pbisLocalMax[k] = <span class="keyword">true</span>;</div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span>                iNumPeaks++;</div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span> </div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span>                <span class="comment">// increment because the next bin cannot be a local max</span></div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span>                k++;</div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span>            }</div>
<div class="line"><a id="l00613" name="l00613"></a><span class="lineno">  613</span>        }</div>
<div class="line"><a id="l00614" name="l00614"></a><span class="lineno">  614</span> </div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span>        <span class="keywordflow">return</span> iNumPeaks;</div>
<div class="line"><a id="l00616" name="l00616"></a><span class="lineno">  616</span>    }</div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span><span class="comment"></span> </div>
<div class="line"><a id="l00618" name="l00618"></a><span class="lineno">  618</span><span class="comment">    /*! finds the minimum (absolute) value in the buffer</span></div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00620" name="l00620"></a><span class="lineno">  620</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00621" name="l00621"></a><span class="lineno">  621</span><span class="comment">    \param bAbs bool to specify whether we search absolute values</span></div>
<div class="line"><a id="l00622" name="l00622"></a><span class="lineno">  622</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00623" name="l00623"></a><span class="lineno">  623</span><span class="comment">    */</span></div>
<div class="line"><a id="l00624" name="l00624"></a><span class="lineno">  624</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00625" name="l00625"></a><span class="lineno"><a class="line" href="a00495.xhtml#a1f7f307c20239cfd2007393e2b3b26df">  625</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> T <a class="code hl_function" href="a00495.xhtml#a1f7f307c20239cfd2007393e2b3b26df">getMin</a> (<span class="keyword">const</span> T *ptSrc, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, <span class="keywordtype">bool</span> bAbs = <span class="keyword">false</span>)</div>
<div class="line"><a id="l00626" name="l00626"></a><span class="lineno">  626</span>    {</div>
<div class="line"><a id="l00627" name="l00627"></a><span class="lineno">  627</span>        T fMin = 0;</div>
<div class="line"><a id="l00628" name="l00628"></a><span class="lineno">  628</span>        <span class="keywordtype">long</span> <span class="keywordtype">long</span> iMin = -1;</div>
<div class="line"><a id="l00629" name="l00629"></a><span class="lineno">  629</span> </div>
<div class="line"><a id="l00630" name="l00630"></a><span class="lineno">  630</span>        <a class="code hl_function" href="a00495.xhtml#ad475dff5686f7f82472071000a542806">findMin</a>(ptSrc, fMin, iMin, iLength, bAbs);</div>
<div class="line"><a id="l00631" name="l00631"></a><span class="lineno">  631</span> </div>
<div class="line"><a id="l00632" name="l00632"></a><span class="lineno">  632</span>        <span class="keywordflow">return</span> fMin;</div>
<div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span>    }</div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span><span class="comment"></span> </div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span><span class="comment">    /*! finds the maximum (absolute) value in the buffer</span></div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span><span class="comment">    \param fMax resulting output value</span></div>
<div class="line"><a id="l00638" name="l00638"></a><span class="lineno">  638</span><span class="comment">    \param iMax index of the resulting output value</span></div>
<div class="line"><a id="l00639" name="l00639"></a><span class="lineno">  639</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00640" name="l00640"></a><span class="lineno">  640</span><span class="comment">    \param bAbs bool to specify whether we search absolute values</span></div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00642" name="l00642"></a><span class="lineno">  642</span><span class="comment">    */</span></div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno"><a class="line" href="a00495.xhtml#a34a5c0abd80cd982df8a8bae7cbcea19">  644</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#a34a5c0abd80cd982df8a8bae7cbcea19">findMax</a> (<span class="keyword">const</span> T *ptSrc, T &amp;fMax, <span class="keywordtype">long</span> <span class="keywordtype">long</span> &amp;iMax, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, <span class="keywordtype">bool</span> bAbs = <span class="keyword">false</span>)</div>
<div class="line"><a id="l00645" name="l00645"></a><span class="lineno">  645</span>    {</div>
<div class="line"><a id="l00646" name="l00646"></a><span class="lineno">  646</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00647" name="l00647"></a><span class="lineno">  647</span>        assert (ptSrc);</div>
<div class="line"><a id="l00648" name="l00648"></a><span class="lineno">  648</span> </div>
<div class="line"><a id="l00649" name="l00649"></a><span class="lineno">  649</span>        fMax    = -std::numeric_limits&lt;T&gt;::max();</div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span>        iMax    = -1;</div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span> </div>
<div class="line"><a id="l00652" name="l00652"></a><span class="lineno">  652</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span>        {</div>
<div class="line"><a id="l00654" name="l00654"></a><span class="lineno">  654</span>            T fCurr   = (bAbs)? std::abs(ptSrc[i]) : ptSrc[i];</div>
<div class="line"><a id="l00655" name="l00655"></a><span class="lineno">  655</span> </div>
<div class="line"><a id="l00656" name="l00656"></a><span class="lineno">  656</span>            <span class="keywordflow">if</span> (fCurr &gt; fMax)</div>
<div class="line"><a id="l00657" name="l00657"></a><span class="lineno">  657</span>            {</div>
<div class="line"><a id="l00658" name="l00658"></a><span class="lineno">  658</span>                fMax = fCurr;</div>
<div class="line"><a id="l00659" name="l00659"></a><span class="lineno">  659</span>                iMax = i;</div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>            }</div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno">  661</span>        }</div>
<div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span>    }</div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span><span class="comment"></span> </div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span><span class="comment">    /*! finds the minimum (absolute) value in the buffer</span></div>
<div class="line"><a id="l00665" name="l00665"></a><span class="lineno">  665</span><span class="comment">    \param ptSrc input buffer</span></div>
<div class="line"><a id="l00666" name="l00666"></a><span class="lineno">  666</span><span class="comment">    \param fMin resulting output value</span></div>
<div class="line"><a id="l00667" name="l00667"></a><span class="lineno">  667</span><span class="comment">    \param iMin index of the resulting output value</span></div>
<div class="line"><a id="l00668" name="l00668"></a><span class="lineno">  668</span><span class="comment">    \param iLength number of elements in buffer</span></div>
<div class="line"><a id="l00669" name="l00669"></a><span class="lineno">  669</span><span class="comment">    \param bAbs bool to specify whether we search absolute values</span></div>
<div class="line"><a id="l00670" name="l00670"></a><span class="lineno">  670</span><span class="comment">    \return T</span></div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno">  671</span><span class="comment">    */</span></div>
<div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno"><a class="line" href="a00495.xhtml#ad475dff5686f7f82472071000a542806">  673</a></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="a00495.xhtml#ad475dff5686f7f82472071000a542806">findMin</a> (<span class="keyword">const</span> T *ptSrc, T &amp;fMin, <span class="keywordtype">long</span> <span class="keywordtype">long</span> &amp;iMin, <span class="keywordtype">long</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> iLength, <span class="keywordtype">bool</span> bAbs = <span class="keyword">false</span>)</div>
<div class="line"><a id="l00674" name="l00674"></a><span class="lineno">  674</span>    {</div>
<div class="line"><a id="l00675" name="l00675"></a><span class="lineno">  675</span>        assert (iLength &gt;= 0);</div>
<div class="line"><a id="l00676" name="l00676"></a><span class="lineno">  676</span>        assert (ptSrc);</div>
<div class="line"><a id="l00677" name="l00677"></a><span class="lineno">  677</span> </div>
<div class="line"><a id="l00678" name="l00678"></a><span class="lineno">  678</span>        fMin    = std::numeric_limits&lt;T&gt;::max();</div>
<div class="line"><a id="l00679" name="l00679"></a><span class="lineno">  679</span>        iMin    = -1;</div>
<div class="line"><a id="l00680" name="l00680"></a><span class="lineno">  680</span> </div>
<div class="line"><a id="l00681" name="l00681"></a><span class="lineno">  681</span>        <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; iLength; i++)</div>
<div class="line"><a id="l00682" name="l00682"></a><span class="lineno">  682</span>        {</div>
<div class="line"><a id="l00683" name="l00683"></a><span class="lineno">  683</span>            T fCurr   = (bAbs)? std::abs(ptSrc[i]) : ptSrc[i];</div>
<div class="line"><a id="l00684" name="l00684"></a><span class="lineno">  684</span> </div>
<div class="line"><a id="l00685" name="l00685"></a><span class="lineno">  685</span>            <span class="keywordflow">if</span> (fCurr &lt; fMin)</div>
<div class="line"><a id="l00686" name="l00686"></a><span class="lineno">  686</span>            {</div>
<div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span>                fMin    = fCurr;</div>
<div class="line"><a id="l00688" name="l00688"></a><span class="lineno">  688</span>                iMin    = i;</div>
<div class="line"><a id="l00689" name="l00689"></a><span class="lineno">  689</span>            }</div>
<div class="line"><a id="l00690" name="l00690"></a><span class="lineno">  690</span>        }</div>
<div class="line"><a id="l00691" name="l00691"></a><span class="lineno">  691</span>    }</div>
<div class="line"><a id="l00692" name="l00692"></a><span class="lineno">  692</span>};</div>
<div class="line"><a id="l00693" name="l00693"></a><span class="lineno">  693</span><span class="preprocessor">#endif </span><span class="comment">// __ACA_Vector_HEADER_INCLUDED__</span></div>
<div class="ttc" id="aa00158_xhtml"><div class="ttname"><a href="a00158.xhtml">Synthesis.h</a></div></div>
<div class="ttc" id="aa00487_xhtml_a67eaa8b4b86a5c507f1fe0f1b9c92ce6"><div class="ttname"><a href="a00487.xhtml#a67eaa8b4b86a5c507f1fe0f1b9c92ce6">CSynthesis::genNoise</a></div><div class="ttdeci">static Error_t genNoise(T *pfOutBuf, long long iLength, T fAmplitude=1.)</div><div class="ttdef"><b>Definition:</b> <a href="a00158_source.xhtml#l00121">Synthesis.h:121</a></div></div>
<div class="ttc" id="aa00491_xhtml_a4518cf65aacb5732281b35ee427d0fc2"><div class="ttname"><a href="a00491.xhtml#a4518cf65aacb5732281b35ee427d0fc2">CUtil::swap</a></div><div class="ttdeci">static void swap(T &amp;tValue1, T &amp;tValue2)</div><div class="ttdef"><b>Definition:</b> <a href="a00161_source.xhtml#l00073">Util.h:73</a></div></div>
<div class="ttc" id="aa00495_xhtml"><div class="ttname"><a href="a00495.xhtml">CVector</a></div><div class="ttdoc">class with static functions for buffer operations with type T</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00014">Vector.h:15</a></div></div>
<div class="ttc" id="aa00495_xhtml_a16455e414da1bc89417716b46b212ab9"><div class="ttname"><a href="a00495.xhtml#a16455e414da1bc89417716b46b212ab9">CVector::flip_I</a></div><div class="ttdeci">static void flip_I(T *ptSrcDest, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00130">Vector.h:130</a></div></div>
<div class="ttc" id="aa00495_xhtml_a1f7f307c20239cfd2007393e2b3b26df"><div class="ttname"><a href="a00495.xhtml#a1f7f307c20239cfd2007393e2b3b26df">CVector::getMin</a></div><div class="ttdeci">static T getMin(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00625">Vector.h:625</a></div></div>
<div class="ttc" id="aa00495_xhtml_a2239b170d46ed3d0846d766a0634a0be"><div class="ttname"><a href="a00495.xhtml#a2239b170d46ed3d0846d766a0634a0be">CVector::addW_I</a></div><div class="ttdeci">static void addW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00422">Vector.h:422</a></div></div>
<div class="ttc" id="aa00495_xhtml_a22ff86e4fc2f8d5042159d9c84a7ff14"><div class="ttname"><a href="a00495.xhtml#a22ff86e4fc2f8d5042159d9c84a7ff14">CVector::addC_I</a></div><div class="ttdeci">static void addC_I(T *ptSrcDest, T fConst, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00262">Vector.h:262</a></div></div>
<div class="ttc" id="aa00495_xhtml_a269d316eeb6000aac4f57ade32c83127"><div class="ttname"><a href="a00495.xhtml#a269d316eeb6000aac4f57ade32c83127">CVector::mulScalar</a></div><div class="ttdeci">static T mulScalar(const T *ptSrc1, const T *ptSrc2, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00205">Vector.h:205</a></div></div>
<div class="ttc" id="aa00495_xhtml_a34a5c0abd80cd982df8a8bae7cbcea19"><div class="ttname"><a href="a00495.xhtml#a34a5c0abd80cd982df8a8bae7cbcea19">CVector::findMax</a></div><div class="ttdeci">static void findMax(const T *ptSrc, T &amp;fMax, long long &amp;iMax, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00644">Vector.h:644</a></div></div>
<div class="ttc" id="aa00495_xhtml_a39329371d828db80c2f0ad037074c998"><div class="ttname"><a href="a00495.xhtml#a39329371d828db80c2f0ad037074c998">CVector::sub_I</a></div><div class="ttdeci">static void sub_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00341">Vector.h:341</a></div></div>
<div class="ttc" id="aa00495_xhtml_a3a052b83e62e5c5cc44829c64ffe42eb"><div class="ttname"><a href="a00495.xhtml#a3a052b83e62e5c5cc44829c64ffe42eb">CVector::add_I</a></div><div class="ttdeci">static void add_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00245">Vector.h:245</a></div></div>
<div class="ttc" id="aa00495_xhtml_a45f65002e2aab7eabf8702b8bcc8d30b"><div class="ttname"><a href="a00495.xhtml#a45f65002e2aab7eabf8702b8bcc8d30b">CVector::distCosine</a></div><div class="ttdeci">static T distCosine(const T *ptSrc1, const T *ptSrc2, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00400">Vector.h:400</a></div></div>
<div class="ttc" id="aa00495_xhtml_a4cf9544dd96801e3ee47fd1ef2049a1b"><div class="ttname"><a href="a00495.xhtml#a4cf9544dd96801e3ee47fd1ef2049a1b">CVector::setValue</a></div><div class="ttdeci">static void setValue(T *ptDest, T tValue, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00067">Vector.h:67</a></div></div>
<div class="ttc" id="aa00495_xhtml_a4e5b5163bb46b8de5ac4013bde1ded00"><div class="ttname"><a href="a00495.xhtml#a4e5b5163bb46b8de5ac4013bde1ded00">CVector::subW_I</a></div><div class="ttdeci">static void subW_I(T *ptSrcDest, const T *ptSrc, T fWeight, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00440">Vector.h:440</a></div></div>
<div class="ttc" id="aa00495_xhtml_a5fb59528a3f5d3968f988d550b270898"><div class="ttname"><a href="a00495.xhtml#a5fb59528a3f5d3968f988d550b270898">CVector::mul_I</a></div><div class="ttdeci">static void mul_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00188">Vector.h:188</a></div></div>
<div class="ttc" id="aa00495_xhtml_a63b8f3254518a67c10b7a5b2b3e0381f"><div class="ttname"><a href="a00495.xhtml#a63b8f3254518a67c10b7a5b2b3e0381f">CVector::sort_I</a></div><div class="ttdeci">static void sort_I(T *ptSrcDest, int *piIndices, int iLength, bool bAscending=true)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00280">Vector.h:280</a></div></div>
<div class="ttc" id="aa00495_xhtml_a64c5c5686629f104663dd3774e7a6e1b"><div class="ttname"><a href="a00495.xhtml#a64c5c5686629f104663dd3774e7a6e1b">CVector::findPeaks</a></div><div class="ttdeci">static int findPeaks(bool *pbisLocalMax, const T *ptSrc, long long int iLength, T fThresh=-std::numeric_limits&lt; T &gt;::max())</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00590">Vector.h:590</a></div></div>
<div class="ttc" id="aa00495_xhtml_a6dbb3f9f480568b60f7fe50090d20003"><div class="ttname"><a href="a00495.xhtml#a6dbb3f9f480568b60f7fe50090d20003">CVector::setZero</a></div><div class="ttdeci">static void setZero(T *ptSrcDest, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00051">Vector.h:51</a></div></div>
<div class="ttc" id="aa00495_xhtml_a7d2a655aca5f949e4c5909ec35b8c63c"><div class="ttname"><a href="a00495.xhtml#a7d2a655aca5f949e4c5909ec35b8c63c">CVector::moveInMem</a></div><div class="ttdeci">static void moveInMem(T *ptSrcDest, int iDestIdx, int isrcIdx, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00155">Vector.h:155</a></div></div>
<div class="ttc" id="aa00495_xhtml_a9811f50434dd058d201290b2dc98bfcd"><div class="ttname"><a href="a00495.xhtml#a9811f50434dd058d201290b2dc98bfcd">CVector::mulC_I</a></div><div class="ttdeci">static void mulC_I(T *ptSrcDest, T fScale, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00172">Vector.h:172</a></div></div>
<div class="ttc" id="aa00495_xhtml_a98bac500fad7ba363e8be30051ba6690"><div class="ttname"><a href="a00495.xhtml#a98bac500fad7ba363e8be30051ba6690">CVector::distEuclidean</a></div><div class="ttdeci">static T distEuclidean(const T *ptSrc1, const T *ptSrc2, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00378">Vector.h:378</a></div></div>
<div class="ttc" id="aa00495_xhtml_a9f5be871090bc5a64a7732cebfb4f8ec"><div class="ttname"><a href="a00495.xhtml#a9f5be871090bc5a64a7732cebfb4f8ec">CVector::getMax</a></div><div class="ttdeci">static T getMax(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00572">Vector.h:572</a></div></div>
<div class="ttc" id="aa00495_xhtml_aa86bdb0c663d4d52f2765793756f8737"><div class="ttname"><a href="a00495.xhtml#aa86bdb0c663d4d52f2765793756f8737">CVector::free</a></div><div class="ttdeci">static void free(T *&amp;ptVec)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00039">Vector.h:39</a></div></div>
<div class="ttc" id="aa00495_xhtml_aab8d1ce72a924e66e81e4802a9bed2a0"><div class="ttname"><a href="a00495.xhtml#aab8d1ce72a924e66e81e4802a9bed2a0">CVector::distManhattan</a></div><div class="ttdeci">static T distManhattan(const T *ptSrc1, const T *ptSrc2, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00358">Vector.h:358</a></div></div>
<div class="ttc" id="aa00495_xhtml_aba07261926b4c10ed7fdbe38edf6d16d"><div class="ttname"><a href="a00495.xhtml#aba07261926b4c10ed7fdbe38edf6d16d">CVector::setZeroBelowThresh</a></div><div class="ttdeci">static void setZeroBelowThresh(T *ptSrcDest, long long int iLength, T tThresh)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00097">Vector.h:97</a></div></div>
<div class="ttc" id="aa00495_xhtml_abaadac98b1cad18b7b568852bc951696"><div class="ttname"><a href="a00495.xhtml#abaadac98b1cad18b7b568852bc951696">CVector::alloc</a></div><div class="ttdeci">static void alloc(T *&amp;ptVec, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00024">Vector.h:24</a></div></div>
<div class="ttc" id="aa00495_xhtml_abdbcc3898121387f3694f74491b7331e"><div class="ttname"><a href="a00495.xhtml#abdbcc3898121387f3694f74491b7331e">CVector::getSum</a></div><div class="ttdeci">static T getSum(const T *ptSrc, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00452">Vector.h:452</a></div></div>
<div class="ttc" id="aa00495_xhtml_ac742bf0f863692575b9588cb78902484"><div class="ttname"><a href="a00495.xhtml#ac742bf0f863692575b9588cb78902484">CVector::div_I</a></div><div class="ttdeci">static void div_I(T *ptSrcDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00225">Vector.h:225</a></div></div>
<div class="ttc" id="aa00495_xhtml_acba4c4298832abaf6ae306cef5990653"><div class="ttname"><a href="a00495.xhtml#acba4c4298832abaf6ae306cef5990653">CVector::getRms</a></div><div class="ttdeci">static T getRms(const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00545">Vector.h:545</a></div></div>
<div class="ttc" id="aa00495_xhtml_ad1bfa2e2a6fc6da52c05ad9e0e1dea66"><div class="ttname"><a href="a00495.xhtml#ad1bfa2e2a6fc6da52c05ad9e0e1dea66">CVector::isEqual</a></div><div class="ttdeci">static bool isEqual(const T *ptSrc1, const T *ptSrc2, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00478">Vector.h:478</a></div></div>
<div class="ttc" id="aa00495_xhtml_ad475dff5686f7f82472071000a542806"><div class="ttname"><a href="a00495.xhtml#ad475dff5686f7f82472071000a542806">CVector::findMin</a></div><div class="ttdeci">static void findMin(const T *ptSrc, T &amp;fMin, long long &amp;iMin, long long int iLength, bool bAbs=false)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00673">Vector.h:673</a></div></div>
<div class="ttc" id="aa00495_xhtml_ad7c5cba73e439adac77778f61c9418f0"><div class="ttname"><a href="a00495.xhtml#ad7c5cba73e439adac77778f61c9418f0">CVector::copy</a></div><div class="ttdeci">static void copy(T *ptDest, const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00113">Vector.h:113</a></div></div>
<div class="ttc" id="aa00495_xhtml_ae2ed42101e3d7075f5dec265a23f3424"><div class="ttname"><a href="a00495.xhtml#ae2ed42101e3d7075f5dec265a23f3424">CVector::getStd</a></div><div class="ttdeci">static T getStd(const T *ptSrc, long long int iLength, T fMean=std::numeric_limits&lt; T &gt;::max())</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00514">Vector.h:514</a></div></div>
<div class="ttc" id="aa00495_xhtml_ae6e3545cf196c5e2409365bc62b7c1de"><div class="ttname"><a href="a00495.xhtml#ae6e3545cf196c5e2409365bc62b7c1de">CVector::getMean</a></div><div class="ttdeci">static T getMean(const T *ptSrc, long long int iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00493">Vector.h:493</a></div></div>
<div class="ttc" id="aa00495_xhtml_af7cbe6ef61f8d3acc5d853af9ad58d48"><div class="ttname"><a href="a00495.xhtml#af7cbe6ef61f8d3acc5d853af9ad58d48">CVector::setRand</a></div><div class="ttdeci">static void setRand(T *ptDest, long long iLength)</div><div class="ttdef"><b>Definition:</b> <a href="a00155_source.xhtml#l00082">Vector.h:82</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_bfccd401955b95cf8c75461437045ac0.xhtml">inc</a></li><li class="navelem"><a class="el" href="dir_0aca768bfdcf5d30136701ca31d18db0.xhtml">helper</a></li><li class="navelem"><a class="el" href="a00155.xhtml">Vector.h</a></li>
    <li class="footer">Generated on Mon Jun 13 2022 22:01:48 for ACA by <a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.4 </li>
  </ul>
</div>
</body>
</html>
